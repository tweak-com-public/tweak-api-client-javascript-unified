/// <reference path="../../typings/tsd.d.ts" />

import * as request from "superagent";
import {
    SuperAgentStatic
} from "superagent";

type CallbackHandler = (err: any, res ? : request.Response) => void;
type x - any = any;
type Design = any;
type Team = any;
type TeamMember = any;
type InvitationTicket = any;
type TeamMemberAccessToken = any;
type CustomerPermissionSet = any;
type Customer = any;
type TeamBrand = any;
type Template = any;
type Portal = any;
type Image = any;
type TeamTemplateFolder = any;
type Workflow = any;
type ImageFolder = any;
type DesignComment = any;
type Tag = any;
type DesignTag = any;
type DesignExport = any;
type DesignFolder = any;
type TemplateTag = any;
type PortalPermissionSet = any;
type PortalMember = any;
type PortalTemplate = any;
type PortalTemplateFolder = any;
type PortalImageFolder = any;
type ImageFolderMember = any;
type TemplatePermissionSet = any;
type TemplateMember = any;
type Axes = any;

type Logger = {
    log: (line: string) => any
};

/**
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
    at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 * @class TweakApi
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class TweakApi {

    private domain: string = "https://apidevcdn.tweak.com/api";
    private errorHandlers: CallbackHandler[] = [];

    constructor(domain ? : string, private logger ? : Logger) {
        if (domain) {
            this.domain = domain;
        }
    }

    getDomain() {
        return this.domain;
    }

    addErrorHandler(handler: CallbackHandler) {
        this.errorHandlers.push(handler);
    }

    private request(method: string, url: string, body: any, headers: any, queryParameters: any, form: any, reject: CallbackHandler, resolve: CallbackHandler) {
        if (this.logger) {
            this.logger.log(`Call ${method} ${url}`);
        }

        let req = (request as SuperAgentStatic)(method, url).query(queryParameters);

        Object.keys(headers).forEach(key => {
            req.set(key, headers[key]);
        });

        if (body) {
            req.send(body);
        }

        if (typeof(body) === 'object' && !(body.constructor.name === 'Buffer')) {
            req.set('Content-Type', 'application/json');
        }

        if (Object.keys(form).length > 0) {
            req.type('form');
            req.send(form);
        }

        req.end((error, response) => {
            if (error || !response.ok) {
                reject(error);
                this.errorHandlers.forEach(handler => handler(error));
            } else {
                resolve(response);
            }
        });
    }

    getCustomersByIdDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for designs.
     * @method
     * @name TweakApi#getCustomersByIdDesignsByFk
     * @param {string} id - Customer id
     * @param {string} fk - Foreign key for designs
     */
    getCustomersByIdDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for designs.
     * @method
     * @name TweakApi#deleteCustomersByIdDesignsByFk
     * @param {string} id - Customer id
     * @param {string} fk - Foreign key for designs
     */
    deleteCustomersByIdDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersByIdDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for designs.
    * @method
    * @name TweakApi#putCustomersByIdDesignsByFk
         * @param {string} id - Customer id
         * @param {string} fk - Foreign key for designs
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putCustomersByIdDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for teams.
     * @method
     * @name TweakApi#getCustomersByIdTeamsByFk
     * @param {string} id - Customer id
     * @param {string} fk - Foreign key for teams
     */
    getCustomersByIdTeamsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for teams.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByFk
     * @param {string} id - Customer id
     * @param {string} fk - Foreign key for teams
     */
    deleteCustomersByIdTeamsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersByIdTeamsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for teams.
    * @method
    * @name TweakApi#putCustomersByIdTeamsByFk
         * @param {string} id - Customer id
         * @param {string} fk - Foreign key for teams
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putCustomersByIdTeamsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersByIdTeamsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for teams.
    * @method
    * @name TweakApi#putCustomersByIdTeamsRelByFk
         * @param {string} id - Customer id
         * @param {string} fk - Foreign key for teams
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putCustomersByIdTeamsRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the teams relation to an item by id.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsRelByFk
     * @param {string} id - Customer id
     * @param {string} fk - Foreign key for teams
     */
    deleteCustomersByIdTeamsRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headCustomersByIdTeamsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of teams relation to an item by id.
     * @method
     * @name TweakApi#headCustomersByIdTeamsRelByFk
     * @param {string} id - Customer id
     * @param {string} fk - Foreign key for teams
     */
    headCustomersByIdTeamsRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdInvitationTicketsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/invitationTickets/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for invitationTickets.
     * @method
     * @name TweakApi#getCustomersByIdInvitationTicketsByFk
     * @param {string} id - Customer id
     * @param {string} fk - Foreign key for invitationTickets
     */
    getCustomersByIdInvitationTicketsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/invitationTickets/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdInvitationTicketsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/invitationTickets/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for invitationTickets.
     * @method
     * @name TweakApi#deleteCustomersByIdInvitationTicketsByFk
     * @param {string} id - Customer id
     * @param {string} fk - Foreign key for invitationTickets
     */
    deleteCustomersByIdInvitationTicketsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/invitationTickets/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersByIdInvitationTicketsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/invitationTickets/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for invitationTickets.
    * @method
    * @name TweakApi#putCustomersByIdInvitationTicketsByFk
         * @param {string} id - Customer id
         * @param {string} fk - Foreign key for invitationTickets
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putCustomersByIdInvitationTicketsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/invitationTickets/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdAccessTokensByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/accessTokens/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for accessTokens.
     * @method
     * @name TweakApi#getCustomersByIdAccessTokensByFk
     * @param {string} id - Customer id
     * @param {string} fk - Foreign key for accessTokens
     */
    getCustomersByIdAccessTokensByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/accessTokens/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdAccessTokensByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/accessTokens/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for accessTokens.
     * @method
     * @name TweakApi#deleteCustomersByIdAccessTokensByFk
     * @param {string} id - Customer id
     * @param {string} fk - Foreign key for accessTokens
     */
    deleteCustomersByIdAccessTokensByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/accessTokens/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersByIdAccessTokensByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMemberAccessToken,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/accessTokens/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for accessTokens.
    * @method
    * @name TweakApi#putCustomersByIdAccessTokensByFk
         * @param {string} id - Customer id
         * @param {string} fk - Foreign key for accessTokens
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putCustomersByIdAccessTokensByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMemberAccessToken,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/accessTokens/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdPermissionURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/permission';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches hasOne relation permission.
    * @method
    * @name TweakApi#getCustomersByIdPermission
         * @param {string} id - Customer id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getCustomersByIdPermission(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersByIdPermissionURL(parameters: {
        'id': string,
        'data' ? : CustomerPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/permission';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in permission of this model.
    * @method
    * @name TweakApi#postCustomersByIdPermission
         * @param {string} id - Customer id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postCustomersByIdPermission(parameters: {
        'id': string,
        'data' ? : CustomerPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersByIdPermissionURL(parameters: {
        'id': string,
        'data' ? : CustomerPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/permission';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update permission of this model.
    * @method
    * @name TweakApi#putCustomersByIdPermission
         * @param {string} id - Customer id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putCustomersByIdPermission(parameters: {
        'id': string,
        'data' ? : CustomerPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdPermissionURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/permission';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes permission of this model.
     * @method
     * @name TweakApi#deleteCustomersByIdPermission
     * @param {string} id - Customer id
     */
    deleteCustomersByIdPermission(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdDesignsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/designs';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries designs of Customer.
    * @method
    * @name TweakApi#getCustomersByIdDesigns
         * @param {string} id - Customer id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getCustomersByIdDesigns(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersByIdDesignsURL(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/designs';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in designs of this model.
    * @method
    * @name TweakApi#postCustomersByIdDesigns
         * @param {string} id - Customer id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postCustomersByIdDesigns(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdDesignsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/designs';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all designs of this model.
     * @method
     * @name TweakApi#deleteCustomersByIdDesigns
     * @param {string} id - Customer id
     */
    deleteCustomersByIdDesigns(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdDesignsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/designs/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts designs of Customer.
     * @method
     * @name TweakApi#getCustomersByIdDesignsCount
     * @param {string} id - Customer id
     * @param {string} where - Criteria to match model instances
     */
    getCustomersByIdDesignsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/designs/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries teams of Customer.
    * @method
    * @name TweakApi#getCustomersByIdTeams
         * @param {string} id - Customer id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getCustomersByIdTeams(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersByIdTeamsURL(parameters: {
        'id': string,
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in teams of this model.
    * @method
    * @name TweakApi#postCustomersByIdTeams
         * @param {string} id - Customer id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postCustomersByIdTeams(parameters: {
        'id': string,
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all teams of this model.
     * @method
     * @name TweakApi#deleteCustomersByIdTeams
     * @param {string} id - Customer id
     */
    deleteCustomersByIdTeams(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts teams of Customer.
     * @method
     * @name TweakApi#getCustomersByIdTeamsCount
     * @param {string} id - Customer id
     * @param {string} where - Criteria to match model instances
     */
    getCustomersByIdTeamsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdInvitationTicketsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/invitationTickets';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries invitationTickets of Customer.
    * @method
    * @name TweakApi#getCustomersByIdInvitationTickets
         * @param {string} id - Customer id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getCustomersByIdInvitationTickets(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/invitationTickets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersByIdInvitationTicketsURL(parameters: {
        'id': string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/invitationTickets';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in invitationTickets of this model.
    * @method
    * @name TweakApi#postCustomersByIdInvitationTickets
         * @param {string} id - Customer id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postCustomersByIdInvitationTickets(parameters: {
        'id': string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/invitationTickets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdInvitationTicketsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/invitationTickets';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all invitationTickets of this model.
     * @method
     * @name TweakApi#deleteCustomersByIdInvitationTickets
     * @param {string} id - Customer id
     */
    deleteCustomersByIdInvitationTickets(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/invitationTickets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdInvitationTicketsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/invitationTickets/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts invitationTickets of Customer.
     * @method
     * @name TweakApi#getCustomersByIdInvitationTicketsCount
     * @param {string} id - Customer id
     * @param {string} where - Criteria to match model instances
     */
    getCustomersByIdInvitationTicketsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/invitationTickets/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdAccessTokensURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/accessTokens';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries accessTokens of Customer.
    * @method
    * @name TweakApi#getCustomersByIdAccessTokens
         * @param {string} id - Customer id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getCustomersByIdAccessTokens(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/accessTokens';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersByIdAccessTokensURL(parameters: {
        'id': string,
        'data' ? : TeamMemberAccessToken,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/accessTokens';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in accessTokens of this model.
    * @method
    * @name TweakApi#postCustomersByIdAccessTokens
         * @param {string} id - Customer id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postCustomersByIdAccessTokens(parameters: {
        'id': string,
        'data' ? : TeamMemberAccessToken,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/accessTokens';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdAccessTokensURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/accessTokens';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all accessTokens of this model.
     * @method
     * @name TweakApi#deleteCustomersByIdAccessTokens
     * @param {string} id - Customer id
     */
    deleteCustomersByIdAccessTokens(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/accessTokens';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdAccessTokensCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/accessTokens/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts accessTokens of Customer.
     * @method
     * @name TweakApi#getCustomersByIdAccessTokensCount
     * @param {string} id - Customer id
     * @param {string} where - Criteria to match model instances
     */
    getCustomersByIdAccessTokensCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/accessTokens/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersURL(parameters: {
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postCustomers
     * @param {} data - Model instance data
     */
    postCustomers(parameters: {
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchCustomersURL(parameters: {
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchCustomers
     * @param {} data - Model instance data
     */
    patchCustomers(parameters: {
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersURL(parameters: {
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putCustomers
     * @param {} data - Model instance data
     */
    putCustomers(parameters: {
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getCustomers
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getCustomers(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersReplaceOrCreateURL(parameters: {
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postCustomersReplaceOrCreate
     * @param {} data - Model instance data
     */
    postCustomersReplaceOrCreate(parameters: {
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postCustomersUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postCustomersUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getCustomersByIdExists
     * @param {string} id - Model id
     */
    getCustomersByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headCustomersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headCustomersById
     * @param {string} id - Model id
     */
    headCustomersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getCustomersById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getCustomersById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersByIdURL(parameters: {
        'id': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putCustomersById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putCustomersById(parameters: {
        'id': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteCustomersById
     * @param {string} id - Model id
     */
    deleteCustomersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchCustomersByIdURL(parameters: {
        'id': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchCustomersById
     * @param {string} id - Customer id
     * @param {} data - An object of model property name/value pairs
     */
    patchCustomersById(parameters: {
        'id': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postCustomersByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postCustomersByIdReplace(parameters: {
        'id': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getCustomersFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getCustomersFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postCustomersUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postCustomersUpdate(parameters: {
        'where' ? : string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getCustomersCount
     * @param {string} where - Criteria to match model instances
     */
    getCustomersCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postCustomersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postCustomersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getCustomersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getCustomersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersLoginURL(parameters: {
        'credentials': {},
        'include' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/login';

        if (parameters['include'] !== undefined) {
            queryParameters['include'] = parameters['include'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Login a user with username/email and password.
    * @method
    * @name TweakApi#postCustomersLogin
         * @param {} credentials - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {string} include - Related objects to include in the response. See the description of return value for more details.
    */
    postCustomersLogin(parameters: {
        'credentials': {},
        'include' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/login';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['credentials'] !== undefined) {
                body = parameters['credentials'];
            }

            if (parameters['credentials'] === undefined) {
                reject(new Error('Missing required  parameter: credentials'));
                return;
            }

            if (parameters['include'] !== undefined) {
                queryParameters['include'] = parameters['include'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersLogoutURL(parameters: {
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/logout';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Logout a user with access token.
     * @method
     * @name TweakApi#postCustomersLogout
     */
    postCustomersLogout(parameters: {
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/logout';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersConfirmURL(parameters: {
        'uid': string,
        'token': string,
        'redirect' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/confirm';
        if (parameters['uid'] !== undefined) {
            queryParameters['uid'] = parameters['uid'];
        }

        if (parameters['token'] !== undefined) {
            queryParameters['token'] = parameters['token'];
        }

        if (parameters['redirect'] !== undefined) {
            queryParameters['redirect'] = parameters['redirect'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Confirm a user registration with email verification token.
    * @method
    * @name TweakApi#getCustomersConfirm
         * @param {string} uid - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {string} token - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {string} redirect - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getCustomersConfirm(parameters: {
        'uid': string,
        'token': string,
        'redirect' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/confirm';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['uid'] !== undefined) {
                queryParameters['uid'] = parameters['uid'];
            }

            if (parameters['uid'] === undefined) {
                reject(new Error('Missing required  parameter: uid'));
                return;
            }

            if (parameters['token'] !== undefined) {
                queryParameters['token'] = parameters['token'];
            }

            if (parameters['token'] === undefined) {
                reject(new Error('Missing required  parameter: token'));
                return;
            }

            if (parameters['redirect'] !== undefined) {
                queryParameters['redirect'] = parameters['redirect'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersResetURL(parameters: {
        'options': {},
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/reset';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Reset password for a user with email.
    * @method
    * @name TweakApi#postCustomersReset
         * @param {} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postCustomersReset(parameters: {
        'options': {},
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/reset';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                body = parameters['options'];
            }

            if (parameters['options'] === undefined) {
                reject(new Error('Missing required  parameter: options'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersChangePasswordURL(parameters: {
        'oldPassword': string,
        'newPassword': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/change-password';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Change a user's password.
    * @method
    * @name TweakApi#postCustomersChangePassword
         * @param {string} oldPassword - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {string} newPassword - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postCustomersChangePassword(parameters: {
        'oldPassword': string,
        'newPassword': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/change-password';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['oldPassword'] !== undefined) {
                form['oldPassword'] = parameters['oldPassword'];
            }

            if (parameters['oldPassword'] === undefined) {
                reject(new Error('Missing required  parameter: oldPassword'));
                return;
            }

            if (parameters['newPassword'] !== undefined) {
                form['newPassword'] = parameters['newPassword'];
            }

            if (parameters['newPassword'] === undefined) {
                reject(new Error('Missing required  parameter: newPassword'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTokenURL(parameters: {
        'id': string,
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/token';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Get token info
     * @method
     * @name TweakApi#getCustomersByIdToken
     * @param {string} id - Customer id
     * @param {string} id - Customer id
     */
    getCustomersByIdToken(parameters: {
        'id': string,
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/token';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdActiveURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/active';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Define whether customer is active or not
     * @method
     * @name TweakApi#getCustomersByIdActive
     * @param {string} id - Customer id or email
     */
    getCustomersByIdActive(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/active';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersInvitationTicketsAcceptURL(parameters: {
        'token': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/invitationTickets/accept';
        if (parameters['token'] !== undefined) {
            queryParameters['token'] = parameters['token'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Accept invitation with token
     * @method
     * @name TweakApi#postCustomersInvitationTicketsAccept
     * @param {string} token - Token describing invitation ticket
     * @param {} data - Customer data in case new customer
     */
    postCustomersInvitationTicketsAccept(parameters: {
        'token': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/invitationTickets/accept';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['token'] !== undefined) {
                queryParameters['token'] = parameters['token'];
            }

            if (parameters['token'] === undefined) {
                reject(new Error('Missing required  parameter: token'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersRegisterURL(parameters: {
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/register';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create customer and assign it to a team
     * @method
     * @name TweakApi#postCustomersRegister
     * @param {} data - Model instance data
     */
    postCustomersRegister(parameters: {
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/register';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersByIdTeamsByTeamIdChangeURL(parameters: {
        'id': string,
        'id': string,
        'teamId': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{teamId}/change';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{teamId}', `${parameters['teamId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Move authentication to a Team
     * @method
     * @name TweakApi#postCustomersByIdTeamsByTeamIdChange
     * @param {string} id - Customer id
     * @param {string} id - Customer id
     * @param {string} teamId - Team id
     */
    postCustomersByIdTeamsByTeamIdChange(parameters: {
        'id': string,
        'id': string,
        'teamId': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{teamId}/change';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{teamId}', `${parameters['teamId']}`);

            if (parameters['teamId'] === undefined) {
                reject(new Error('Missing required  parameter: teamId'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersByIdTeamsByTeamIdPortalsByPortalIdChangeURL(parameters: {
        'id': string,
        'id': string,
        'teamId': string,
        'portalId': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{teamId}/portals/{portalId}/change';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{teamId}', `${parameters['teamId']}`);

        path = path.replace('{portalId}', `${parameters['portalId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Move authentication to a Portal
     * @method
     * @name TweakApi#postCustomersByIdTeamsByTeamIdPortalsByPortalIdChange
     * @param {string} id - Customer id
     * @param {string} id - Customer id
     * @param {string} teamId - Team id
     * @param {string} portalId - Portal id
     */
    postCustomersByIdTeamsByTeamIdPortalsByPortalIdChange(parameters: {
        'id': string,
        'id': string,
        'teamId': string,
        'portalId': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{teamId}/portals/{portalId}/change';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{teamId}', `${parameters['teamId']}`);

            if (parameters['teamId'] === undefined) {
                reject(new Error('Missing required  parameter: teamId'));
                return;
            }

            path = path.replace('{portalId}', `${parameters['portalId']}`);

            if (parameters['portalId'] === undefined) {
                reject(new Error('Missing required  parameter: portalId'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkBrandURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/brand';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches hasOne relation brand.
    * @method
    * @name TweakApi#getCustomersByIdTeamsByNkBrand
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getCustomersByIdTeamsByNkBrand(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/brand';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersByIdTeamsByNkBrandURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TeamBrand,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/brand';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in brand of this model.
    * @method
    * @name TweakApi#postCustomersByIdTeamsByNkBrand
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postCustomersByIdTeamsByNkBrand(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TeamBrand,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/brand';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersByIdTeamsByNkBrandURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TeamBrand,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/brand';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update brand of this model.
    * @method
    * @name TweakApi#putCustomersByIdTeamsByNkBrand
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putCustomersByIdTeamsByNkBrand(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TeamBrand,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/brand';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkBrandURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/brand';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes brand of this model.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkBrand
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     */
    deleteCustomersByIdTeamsByNkBrand(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/brand';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for members.
     * @method
     * @name TweakApi#getCustomersByIdTeamsByNkMembersByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for members
     */
    getCustomersByIdTeamsByNkMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for members.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkMembersByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for members
     */
    deleteCustomersByIdTeamsByNkMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersByIdTeamsByNkMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for members.
    * @method
    * @name TweakApi#putCustomersByIdTeamsByNkMembersByFk
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putCustomersByIdTeamsByNkMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersByIdTeamsByNkMembersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for members.
    * @method
    * @name TweakApi#putCustomersByIdTeamsByNkMembersRelByFk
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putCustomersByIdTeamsByNkMembersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkMembersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the members relation to an item by id.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkMembersRelByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for members
     */
    deleteCustomersByIdTeamsByNkMembersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headCustomersByIdTeamsByNkMembersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of members relation to an item by id.
     * @method
     * @name TweakApi#headCustomersByIdTeamsByNkMembersRelByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for members
     */
    headCustomersByIdTeamsByNkMembersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkTeamMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/teamMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for teamMembers.
     * @method
     * @name TweakApi#getCustomersByIdTeamsByNkTeamMembersByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for teamMembers
     */
    getCustomersByIdTeamsByNkTeamMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/teamMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkTeamMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/teamMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for teamMembers.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkTeamMembersByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for teamMembers
     */
    deleteCustomersByIdTeamsByNkTeamMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/teamMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersByIdTeamsByNkTeamMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/teamMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for teamMembers.
    * @method
    * @name TweakApi#putCustomersByIdTeamsByNkTeamMembersByFk
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {string} fk - Foreign key for teamMembers
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putCustomersByIdTeamsByNkTeamMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/teamMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkTemplatesByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templates.
     * @method
     * @name TweakApi#getCustomersByIdTeamsByNkTemplatesByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for templates
     */
    getCustomersByIdTeamsByNkTemplatesByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkTemplatesByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templates.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkTemplatesByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for templates
     */
    deleteCustomersByIdTeamsByNkTemplatesByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersByIdTeamsByNkTemplatesByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templates.
    * @method
    * @name TweakApi#putCustomersByIdTeamsByNkTemplatesByFk
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {string} fk - Foreign key for templates
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putCustomersByIdTeamsByNkTemplatesByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkPortalsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for portals.
     * @method
     * @name TweakApi#getCustomersByIdTeamsByNkPortalsByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for portals
     */
    getCustomersByIdTeamsByNkPortalsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkPortalsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for portals.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkPortalsByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for portals
     */
    deleteCustomersByIdTeamsByNkPortalsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersByIdTeamsByNkPortalsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for portals.
    * @method
    * @name TweakApi#putCustomersByIdTeamsByNkPortalsByFk
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {string} fk - Foreign key for portals
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putCustomersByIdTeamsByNkPortalsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkImagesByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/images/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for images.
     * @method
     * @name TweakApi#getCustomersByIdTeamsByNkImagesByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for images
     */
    getCustomersByIdTeamsByNkImagesByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/images/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkImagesByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/images/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for images.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkImagesByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for images
     */
    deleteCustomersByIdTeamsByNkImagesByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/images/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersByIdTeamsByNkImagesByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/images/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for images.
    * @method
    * @name TweakApi#putCustomersByIdTeamsByNkImagesByFk
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {string} fk - Foreign key for images
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putCustomersByIdTeamsByNkImagesByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/images/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkTemplateFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templateFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templateFolders.
     * @method
     * @name TweakApi#getCustomersByIdTeamsByNkTemplateFoldersByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for templateFolders
     */
    getCustomersByIdTeamsByNkTemplateFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templateFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkTemplateFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templateFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templateFolders.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkTemplateFoldersByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for templateFolders
     */
    deleteCustomersByIdTeamsByNkTemplateFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templateFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersByIdTeamsByNkTemplateFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templateFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templateFolders.
    * @method
    * @name TweakApi#putCustomersByIdTeamsByNkTemplateFoldersByFk
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {string} fk - Foreign key for templateFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putCustomersByIdTeamsByNkTemplateFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templateFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkWorkflowsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/workflows/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for workflows.
     * @method
     * @name TweakApi#getCustomersByIdTeamsByNkWorkflowsByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for workflows
     */
    getCustomersByIdTeamsByNkWorkflowsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/workflows/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkWorkflowsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/workflows/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for workflows.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkWorkflowsByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for workflows
     */
    deleteCustomersByIdTeamsByNkWorkflowsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/workflows/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersByIdTeamsByNkWorkflowsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/workflows/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for workflows.
    * @method
    * @name TweakApi#putCustomersByIdTeamsByNkWorkflowsByFk
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {string} fk - Foreign key for workflows
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putCustomersByIdTeamsByNkWorkflowsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/workflows/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkImageFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for imageFolders.
     * @method
     * @name TweakApi#getCustomersByIdTeamsByNkImageFoldersByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for imageFolders
     */
    getCustomersByIdTeamsByNkImageFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkImageFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for imageFolders.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkImageFoldersByFk
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} fk - Foreign key for imageFolders
     */
    deleteCustomersByIdTeamsByNkImageFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putCustomersByIdTeamsByNkImageFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for imageFolders.
    * @method
    * @name TweakApi#putCustomersByIdTeamsByNkImageFoldersByFk
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {string} fk - Foreign key for imageFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putCustomersByIdTeamsByNkImageFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkMembersURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries members of Team.
    * @method
    * @name TweakApi#getCustomersByIdTeamsByNkMembers
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getCustomersByIdTeamsByNkMembers(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersByIdTeamsByNkMembersURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in members of this model.
    * @method
    * @name TweakApi#postCustomersByIdTeamsByNkMembers
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postCustomersByIdTeamsByNkMembers(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkMembersURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all members of this model.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkMembers
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     */
    deleteCustomersByIdTeamsByNkMembers(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkMembersCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts members of Team.
     * @method
     * @name TweakApi#getCustomersByIdTeamsByNkMembersCount
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} where - Criteria to match model instances
     */
    getCustomersByIdTeamsByNkMembersCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/members/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkTeamMembersURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/teamMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries teamMembers of Team.
    * @method
    * @name TweakApi#getCustomersByIdTeamsByNkTeamMembers
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getCustomersByIdTeamsByNkTeamMembers(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/teamMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersByIdTeamsByNkTeamMembersURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/teamMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in teamMembers of this model.
    * @method
    * @name TweakApi#postCustomersByIdTeamsByNkTeamMembers
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postCustomersByIdTeamsByNkTeamMembers(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/teamMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkTeamMembersURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/teamMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all teamMembers of this model.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkTeamMembers
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     */
    deleteCustomersByIdTeamsByNkTeamMembers(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/teamMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkTeamMembersCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/teamMembers/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts teamMembers of Team.
     * @method
     * @name TweakApi#getCustomersByIdTeamsByNkTeamMembersCount
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} where - Criteria to match model instances
     */
    getCustomersByIdTeamsByNkTeamMembersCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/teamMembers/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkTemplatesURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templates of Team.
    * @method
    * @name TweakApi#getCustomersByIdTeamsByNkTemplates
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getCustomersByIdTeamsByNkTemplates(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersByIdTeamsByNkTemplatesURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templates of this model.
    * @method
    * @name TweakApi#postCustomersByIdTeamsByNkTemplates
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postCustomersByIdTeamsByNkTemplates(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkTemplatesURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templates of this model.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkTemplates
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     */
    deleteCustomersByIdTeamsByNkTemplates(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkTemplatesCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templates/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templates of Team.
     * @method
     * @name TweakApi#getCustomersByIdTeamsByNkTemplatesCount
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} where - Criteria to match model instances
     */
    getCustomersByIdTeamsByNkTemplatesCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templates/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkPortalsURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries portals of Team.
    * @method
    * @name TweakApi#getCustomersByIdTeamsByNkPortals
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getCustomersByIdTeamsByNkPortals(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersByIdTeamsByNkPortalsURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in portals of this model.
    * @method
    * @name TweakApi#postCustomersByIdTeamsByNkPortals
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postCustomersByIdTeamsByNkPortals(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkPortalsURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all portals of this model.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkPortals
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     */
    deleteCustomersByIdTeamsByNkPortals(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkPortalsCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/portals/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts portals of Team.
     * @method
     * @name TweakApi#getCustomersByIdTeamsByNkPortalsCount
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} where - Criteria to match model instances
     */
    getCustomersByIdTeamsByNkPortalsCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/portals/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkImagesURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/images';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries images of Team.
    * @method
    * @name TweakApi#getCustomersByIdTeamsByNkImages
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getCustomersByIdTeamsByNkImages(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersByIdTeamsByNkImagesURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/images';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in images of this model.
    * @method
    * @name TweakApi#postCustomersByIdTeamsByNkImages
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postCustomersByIdTeamsByNkImages(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkImagesURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/images';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all images of this model.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkImages
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     */
    deleteCustomersByIdTeamsByNkImages(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkImagesCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/images/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts images of Team.
     * @method
     * @name TweakApi#getCustomersByIdTeamsByNkImagesCount
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} where - Criteria to match model instances
     */
    getCustomersByIdTeamsByNkImagesCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/images/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkTemplateFoldersURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templateFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templateFolders of Team.
    * @method
    * @name TweakApi#getCustomersByIdTeamsByNkTemplateFolders
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getCustomersByIdTeamsByNkTemplateFolders(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersByIdTeamsByNkTemplateFoldersURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templateFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templateFolders of this model.
    * @method
    * @name TweakApi#postCustomersByIdTeamsByNkTemplateFolders
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postCustomersByIdTeamsByNkTemplateFolders(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkTemplateFoldersURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templateFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templateFolders of this model.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkTemplateFolders
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     */
    deleteCustomersByIdTeamsByNkTemplateFolders(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkTemplateFoldersCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templateFolders/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templateFolders of Team.
     * @method
     * @name TweakApi#getCustomersByIdTeamsByNkTemplateFoldersCount
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} where - Criteria to match model instances
     */
    getCustomersByIdTeamsByNkTemplateFoldersCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/templateFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkWorkflowsURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/workflows';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries workflows of Team.
    * @method
    * @name TweakApi#getCustomersByIdTeamsByNkWorkflows
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getCustomersByIdTeamsByNkWorkflows(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/workflows';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersByIdTeamsByNkWorkflowsURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/workflows';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in workflows of this model.
    * @method
    * @name TweakApi#postCustomersByIdTeamsByNkWorkflows
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postCustomersByIdTeamsByNkWorkflows(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/workflows';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkWorkflowsURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/workflows';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all workflows of this model.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkWorkflows
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     */
    deleteCustomersByIdTeamsByNkWorkflows(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/workflows';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkWorkflowsCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/workflows/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts workflows of Team.
     * @method
     * @name TweakApi#getCustomersByIdTeamsByNkWorkflowsCount
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} where - Criteria to match model instances
     */
    getCustomersByIdTeamsByNkWorkflowsCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/workflows/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkImageFoldersURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries imageFolders of Team.
    * @method
    * @name TweakApi#getCustomersByIdTeamsByNkImageFolders
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getCustomersByIdTeamsByNkImageFolders(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postCustomersByIdTeamsByNkImageFoldersURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in imageFolders of this model.
    * @method
    * @name TweakApi#postCustomersByIdTeamsByNkImageFolders
         * @param {string} id - Customer id
         * @param {string} nk - Foreign key for teams.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postCustomersByIdTeamsByNkImageFolders(parameters: {
        'id': string,
        'nk': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteCustomersByIdTeamsByNkImageFoldersURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all imageFolders of this model.
     * @method
     * @name TweakApi#deleteCustomersByIdTeamsByNkImageFolders
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     */
    deleteCustomersByIdTeamsByNkImageFolders(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getCustomersByIdTeamsByNkImageFoldersCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/imageFolders/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts imageFolders of Team.
     * @method
     * @name TweakApi#getCustomersByIdTeamsByNkImageFoldersCount
     * @param {string} id - Customer id
     * @param {string} nk - Foreign key for teams.
     * @param {string} where - Criteria to match model instances
     */
    getCustomersByIdTeamsByNkImageFoldersCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Customers/{id}/teams/{nk}/imageFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdCustomerURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/customer';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation customer.
    * @method
    * @name TweakApi#getDesignsByIdCustomer
         * @param {string} id - Design id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignsByIdCustomer(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/customer';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdRequesterURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/requester';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation requester.
    * @method
    * @name TweakApi#getDesignsByIdRequester
         * @param {string} id - Design id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignsByIdRequester(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/requester';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdAssigneeURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/assignee';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation assignee.
    * @method
    * @name TweakApi#getDesignsByIdAssignee
         * @param {string} id - Design id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignsByIdAssignee(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/assignee';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdReviewerURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/reviewer';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation reviewer.
    * @method
    * @name TweakApi#getDesignsByIdReviewer
         * @param {string} id - Design id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignsByIdReviewer(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/reviewer';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdTemplateURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/template';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation template.
    * @method
    * @name TweakApi#getDesignsByIdTemplate
         * @param {string} id - Design id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignsByIdTemplate(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/template';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdPortalURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/portal';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation portal.
    * @method
    * @name TweakApi#getDesignsByIdPortal
         * @param {string} id - Design id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignsByIdPortal(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/portal';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdCommentsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for comments.
     * @method
     * @name TweakApi#getDesignsByIdCommentsByFk
     * @param {string} id - Design id
     * @param {string} fk - Foreign key for comments
     */
    getDesignsByIdCommentsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignsByIdCommentsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for comments.
     * @method
     * @name TweakApi#deleteDesignsByIdCommentsByFk
     * @param {string} id - Design id
     * @param {string} fk - Foreign key for comments
     */
    deleteDesignsByIdCommentsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignsByIdCommentsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for comments.
    * @method
    * @name TweakApi#putDesignsByIdCommentsByFk
         * @param {string} id - Design id
         * @param {string} fk - Foreign key for comments
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putDesignsByIdCommentsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdCommentersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for commenters.
     * @method
     * @name TweakApi#getDesignsByIdCommentersByFk
     * @param {string} id - Design id
     * @param {string} fk - Foreign key for commenters
     */
    getDesignsByIdCommentersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignsByIdCommentersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for commenters.
     * @method
     * @name TweakApi#deleteDesignsByIdCommentersByFk
     * @param {string} id - Design id
     * @param {string} fk - Foreign key for commenters
     */
    deleteDesignsByIdCommentersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignsByIdCommentersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for commenters.
    * @method
    * @name TweakApi#putDesignsByIdCommentersByFk
         * @param {string} id - Design id
         * @param {string} fk - Foreign key for commenters
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putDesignsByIdCommentersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignsByIdCommentersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for commenters.
    * @method
    * @name TweakApi#putDesignsByIdCommentersRelByFk
         * @param {string} id - Design id
         * @param {string} fk - Foreign key for commenters
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putDesignsByIdCommentersRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignsByIdCommentersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the commenters relation to an item by id.
     * @method
     * @name TweakApi#deleteDesignsByIdCommentersRelByFk
     * @param {string} id - Design id
     * @param {string} fk - Foreign key for commenters
     */
    deleteDesignsByIdCommentersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headDesignsByIdCommentersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of commenters relation to an item by id.
     * @method
     * @name TweakApi#headDesignsByIdCommentersRelByFk
     * @param {string} id - Design id
     * @param {string} fk - Foreign key for commenters
     */
    headDesignsByIdCommentersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdTagsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for tags.
     * @method
     * @name TweakApi#getDesignsByIdTagsByFk
     * @param {string} id - Design id
     * @param {string} fk - Foreign key for tags
     */
    getDesignsByIdTagsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignsByIdTagsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for tags.
     * @method
     * @name TweakApi#deleteDesignsByIdTagsByFk
     * @param {string} id - Design id
     * @param {string} fk - Foreign key for tags
     */
    deleteDesignsByIdTagsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignsByIdTagsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for tags.
    * @method
    * @name TweakApi#putDesignsByIdTagsByFk
         * @param {string} id - Design id
         * @param {string} fk - Foreign key for tags
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putDesignsByIdTagsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignsByIdTagsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for tags.
    * @method
    * @name TweakApi#putDesignsByIdTagsRelByFk
         * @param {string} id - Design id
         * @param {string} fk - Foreign key for tags
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putDesignsByIdTagsRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignsByIdTagsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the tags relation to an item by id.
     * @method
     * @name TweakApi#deleteDesignsByIdTagsRelByFk
     * @param {string} id - Design id
     * @param {string} fk - Foreign key for tags
     */
    deleteDesignsByIdTagsRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headDesignsByIdTagsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of tags relation to an item by id.
     * @method
     * @name TweakApi#headDesignsByIdTagsRelByFk
     * @param {string} id - Design id
     * @param {string} fk - Foreign key for tags
     */
    headDesignsByIdTagsRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdExportsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/exports/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for exports.
     * @method
     * @name TweakApi#getDesignsByIdExportsByFk
     * @param {string} id - Design id
     * @param {string} fk - Foreign key for exports
     */
    getDesignsByIdExportsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/exports/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignsByIdExportsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/exports/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for exports.
     * @method
     * @name TweakApi#deleteDesignsByIdExportsByFk
     * @param {string} id - Design id
     * @param {string} fk - Foreign key for exports
     */
    deleteDesignsByIdExportsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/exports/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignsByIdExportsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/exports/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for exports.
    * @method
    * @name TweakApi#putDesignsByIdExportsByFk
         * @param {string} id - Design id
         * @param {string} fk - Foreign key for exports
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putDesignsByIdExportsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/exports/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdFolderURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/folder';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation folder.
    * @method
    * @name TweakApi#getDesignsByIdFolder
         * @param {string} id - Design id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignsByIdFolder(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/folder';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdCommentsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries comments of Design.
    * @method
    * @name TweakApi#getDesignsByIdComments
         * @param {string} id - Design id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignsByIdComments(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignsByIdCommentsURL(parameters: {
        'id': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in comments of this model.
    * @method
    * @name TweakApi#postDesignsByIdComments
         * @param {string} id - Design id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postDesignsByIdComments(parameters: {
        'id': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignsByIdCommentsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all comments of this model.
     * @method
     * @name TweakApi#deleteDesignsByIdComments
     * @param {string} id - Design id
     */
    deleteDesignsByIdComments(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdCommentsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts comments of Design.
     * @method
     * @name TweakApi#getDesignsByIdCommentsCount
     * @param {string} id - Design id
     * @param {string} where - Criteria to match model instances
     */
    getDesignsByIdCommentsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdCommentersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries commenters of Design.
    * @method
    * @name TweakApi#getDesignsByIdCommenters
         * @param {string} id - Design id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignsByIdCommenters(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignsByIdCommentersURL(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in commenters of this model.
    * @method
    * @name TweakApi#postDesignsByIdCommenters
         * @param {string} id - Design id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postDesignsByIdCommenters(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignsByIdCommentersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all commenters of this model.
     * @method
     * @name TweakApi#deleteDesignsByIdCommenters
     * @param {string} id - Design id
     */
    deleteDesignsByIdCommenters(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdCommentersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts commenters of Design.
     * @method
     * @name TweakApi#getDesignsByIdCommentersCount
     * @param {string} id - Design id
     * @param {string} where - Criteria to match model instances
     */
    getDesignsByIdCommentersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/commenters/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdTagsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries tags of Design.
    * @method
    * @name TweakApi#getDesignsByIdTags
         * @param {string} id - Design id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignsByIdTags(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignsByIdTagsURL(parameters: {
        'id': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in tags of this model.
    * @method
    * @name TweakApi#postDesignsByIdTags
         * @param {string} id - Design id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postDesignsByIdTags(parameters: {
        'id': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignsByIdTagsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all tags of this model.
     * @method
     * @name TweakApi#deleteDesignsByIdTags
     * @param {string} id - Design id
     */
    deleteDesignsByIdTags(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdTagsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts tags of Design.
     * @method
     * @name TweakApi#getDesignsByIdTagsCount
     * @param {string} id - Design id
     * @param {string} where - Criteria to match model instances
     */
    getDesignsByIdTagsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/tags/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdExportsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/exports';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries exports of Design.
    * @method
    * @name TweakApi#getDesignsByIdExports
         * @param {string} id - Design id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignsByIdExports(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/exports';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignsByIdExportsURL(parameters: {
        'id': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/exports';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in exports of this model.
    * @method
    * @name TweakApi#postDesignsByIdExports
         * @param {string} id - Design id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postDesignsByIdExports(parameters: {
        'id': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/exports';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignsByIdExportsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/exports';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all exports of this model.
     * @method
     * @name TweakApi#deleteDesignsByIdExports
     * @param {string} id - Design id
     */
    deleteDesignsByIdExports(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/exports';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdExportsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/exports/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts exports of Design.
     * @method
     * @name TweakApi#getDesignsByIdExportsCount
     * @param {string} id - Design id
     * @param {string} where - Criteria to match model instances
     */
    getDesignsByIdExportsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/exports/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignsURL(parameters: {
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postDesigns
     * @param {} data - Model instance data
     */
    postDesigns(parameters: {
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchDesignsURL(parameters: {
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchDesigns
     * @param {} data - Model instance data
     */
    patchDesigns(parameters: {
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignsURL(parameters: {
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putDesigns
     * @param {} data - Model instance data
     */
    putDesigns(parameters: {
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getDesigns
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getDesigns(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignsReplaceOrCreateURL(parameters: {
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postDesignsReplaceOrCreate
     * @param {} data - Model instance data
     */
    postDesignsReplaceOrCreate(parameters: {
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignsUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postDesignsUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postDesignsUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getDesignsByIdExists
     * @param {string} id - Model id
     */
    getDesignsByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headDesignsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headDesignsById
     * @param {string} id - Model id
     */
    headDesignsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getDesignsById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getDesignsById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignsByIdURL(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putDesignsById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putDesignsById(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteDesignsById
     * @param {string} id - Model id
     */
    deleteDesignsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchDesignsByIdURL(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchDesignsById
     * @param {string} id - Design id
     * @param {} data - An object of model property name/value pairs
     */
    patchDesignsById(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignsByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postDesignsByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postDesignsByIdReplace(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getDesignsFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getDesignsFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignsUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postDesignsUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postDesignsUpdate(parameters: {
        'where' ? : string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getDesignsCount
     * @param {string} where - Criteria to match model instances
     */
    getDesignsCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postDesignsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postDesignsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getDesignsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignsByIdSubmitURL(parameters: {
        'id': string,
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/submit';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Submit design for approval
     * @method
     * @name TweakApi#postDesignsByIdSubmit
     * @param {string} id - Design id
     * @param {string} id - Customer id
     */
    postDesignsByIdSubmit(parameters: {
        'id': string,
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/submit';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignsByIdApproveURL(parameters: {
        'id': string,
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/approve';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Approve design
     * @method
     * @name TweakApi#postDesignsByIdApprove
     * @param {string} id - Design id
     * @param {string} id - Customer id
     */
    postDesignsByIdApprove(parameters: {
        'id': string,
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/approve';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignsByIdRejectURL(parameters: {
        'id': string,
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/reject';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Reject design
     * @method
     * @name TweakApi#postDesignsByIdReject
     * @param {string} id - Design id
     * @param {string} id - Customer id
     */
    postDesignsByIdReject(parameters: {
        'id': string,
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/reject';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdCommentsByNkDesignURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/design';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation design.
    * @method
    * @name TweakApi#getDesignsByIdCommentsByNkDesign
         * @param {string} id - Design id
         * @param {string} nk - Foreign key for comments.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignsByIdCommentsByNkDesign(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/design';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdCommentsByNkRepliesByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/replies/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for replies.
     * @method
     * @name TweakApi#getDesignsByIdCommentsByNkRepliesByFk
     * @param {string} id - Design id
     * @param {string} nk - Foreign key for comments.
     * @param {string} fk - Foreign key for replies
     */
    getDesignsByIdCommentsByNkRepliesByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/replies/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignsByIdCommentsByNkRepliesByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/replies/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for replies.
     * @method
     * @name TweakApi#deleteDesignsByIdCommentsByNkRepliesByFk
     * @param {string} id - Design id
     * @param {string} nk - Foreign key for comments.
     * @param {string} fk - Foreign key for replies
     */
    deleteDesignsByIdCommentsByNkRepliesByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/replies/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignsByIdCommentsByNkRepliesByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/replies/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for replies.
    * @method
    * @name TweakApi#putDesignsByIdCommentsByNkRepliesByFk
         * @param {string} id - Design id
         * @param {string} nk - Foreign key for comments.
         * @param {string} fk - Foreign key for replies
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putDesignsByIdCommentsByNkRepliesByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/replies/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdCommentsByNkCommenterURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/commenter';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation commenter.
    * @method
    * @name TweakApi#getDesignsByIdCommentsByNkCommenter
         * @param {string} id - Design id
         * @param {string} nk - Foreign key for comments.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignsByIdCommentsByNkCommenter(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/commenter';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdCommentsByNkReplyOfURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/replyOf';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation replyOf.
    * @method
    * @name TweakApi#getDesignsByIdCommentsByNkReplyOf
         * @param {string} id - Design id
         * @param {string} nk - Foreign key for comments.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignsByIdCommentsByNkReplyOf(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/replyOf';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdCommentsByNkRepliesURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/replies';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries replies of DesignComment.
    * @method
    * @name TweakApi#getDesignsByIdCommentsByNkReplies
         * @param {string} id - Design id
         * @param {string} nk - Foreign key for comments.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignsByIdCommentsByNkReplies(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/replies';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignsByIdCommentsByNkRepliesURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/replies';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in replies of this model.
    * @method
    * @name TweakApi#postDesignsByIdCommentsByNkReplies
         * @param {string} id - Design id
         * @param {string} nk - Foreign key for comments.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postDesignsByIdCommentsByNkReplies(parameters: {
        'id': string,
        'nk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/replies';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignsByIdCommentsByNkRepliesURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/replies';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all replies of this model.
     * @method
     * @name TweakApi#deleteDesignsByIdCommentsByNkReplies
     * @param {string} id - Design id
     * @param {string} nk - Foreign key for comments.
     */
    deleteDesignsByIdCommentsByNkReplies(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/replies';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignsByIdCommentsByNkRepliesCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/replies/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts replies of DesignComment.
     * @method
     * @name TweakApi#getDesignsByIdCommentsByNkRepliesCount
     * @param {string} id - Design id
     * @param {string} nk - Foreign key for comments.
     * @param {string} where - Criteria to match model instances
     */
    getDesignsByIdCommentsByNkRepliesCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Designs/{id}/comments/{nk}/replies/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTagsByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templates.
     * @method
     * @name TweakApi#getTagsByIdTemplatesByFk
     * @param {string} id - Tag id
     * @param {string} fk - Foreign key for templates
     */
    getTagsByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTagsByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templates.
     * @method
     * @name TweakApi#deleteTagsByIdTemplatesByFk
     * @param {string} id - Tag id
     * @param {string} fk - Foreign key for templates
     */
    deleteTagsByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTagsByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templates.
    * @method
    * @name TweakApi#putTagsByIdTemplatesByFk
         * @param {string} id - Tag id
         * @param {string} fk - Foreign key for templates
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTagsByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTagsByIdTemplatesRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for templates.
    * @method
    * @name TweakApi#putTagsByIdTemplatesRelByFk
         * @param {string} id - Tag id
         * @param {string} fk - Foreign key for templates
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTagsByIdTemplatesRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTagsByIdTemplatesRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the templates relation to an item by id.
     * @method
     * @name TweakApi#deleteTagsByIdTemplatesRelByFk
     * @param {string} id - Tag id
     * @param {string} fk - Foreign key for templates
     */
    deleteTagsByIdTemplatesRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTagsByIdTemplatesRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of templates relation to an item by id.
     * @method
     * @name TweakApi#headTagsByIdTemplatesRelByFk
     * @param {string} id - Tag id
     * @param {string} fk - Foreign key for templates
     */
    headTagsByIdTemplatesRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTagsByIdDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for designs.
     * @method
     * @name TweakApi#getTagsByIdDesignsByFk
     * @param {string} id - Tag id
     * @param {string} fk - Foreign key for designs
     */
    getTagsByIdDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTagsByIdDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for designs.
     * @method
     * @name TweakApi#deleteTagsByIdDesignsByFk
     * @param {string} id - Tag id
     * @param {string} fk - Foreign key for designs
     */
    deleteTagsByIdDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTagsByIdDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for designs.
    * @method
    * @name TweakApi#putTagsByIdDesignsByFk
         * @param {string} id - Tag id
         * @param {string} fk - Foreign key for designs
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTagsByIdDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTagsByIdDesignsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for designs.
    * @method
    * @name TweakApi#putTagsByIdDesignsRelByFk
         * @param {string} id - Tag id
         * @param {string} fk - Foreign key for designs
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTagsByIdDesignsRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTagsByIdDesignsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the designs relation to an item by id.
     * @method
     * @name TweakApi#deleteTagsByIdDesignsRelByFk
     * @param {string} id - Tag id
     * @param {string} fk - Foreign key for designs
     */
    deleteTagsByIdDesignsRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTagsByIdDesignsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of designs relation to an item by id.
     * @method
     * @name TweakApi#headTagsByIdDesignsRelByFk
     * @param {string} id - Tag id
     * @param {string} fk - Foreign key for designs
     */
    headTagsByIdDesignsRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTagsByIdTemplatesURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templates of Tag.
    * @method
    * @name TweakApi#getTagsByIdTemplates
         * @param {string} id - Tag id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTagsByIdTemplates(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTagsByIdTemplatesURL(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templates of this model.
    * @method
    * @name TweakApi#postTagsByIdTemplates
         * @param {string} id - Tag id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTagsByIdTemplates(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTagsByIdTemplatesURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templates of this model.
     * @method
     * @name TweakApi#deleteTagsByIdTemplates
     * @param {string} id - Tag id
     */
    deleteTagsByIdTemplates(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTagsByIdTemplatesCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templates of Tag.
     * @method
     * @name TweakApi#getTagsByIdTemplatesCount
     * @param {string} id - Tag id
     * @param {string} where - Criteria to match model instances
     */
    getTagsByIdTemplatesCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/templates/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTagsByIdDesignsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries designs of Tag.
    * @method
    * @name TweakApi#getTagsByIdDesigns
         * @param {string} id - Tag id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTagsByIdDesigns(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTagsByIdDesignsURL(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in designs of this model.
    * @method
    * @name TweakApi#postTagsByIdDesigns
         * @param {string} id - Tag id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTagsByIdDesigns(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTagsByIdDesignsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all designs of this model.
     * @method
     * @name TweakApi#deleteTagsByIdDesigns
     * @param {string} id - Tag id
     */
    deleteTagsByIdDesigns(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTagsByIdDesignsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts designs of Tag.
     * @method
     * @name TweakApi#getTagsByIdDesignsCount
     * @param {string} id - Tag id
     * @param {string} where - Criteria to match model instances
     */
    getTagsByIdDesignsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/designs/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTagsURL(parameters: {
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postTags
     * @param {} data - Model instance data
     */
    postTags(parameters: {
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchTagsURL(parameters: {
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchTags
     * @param {} data - Model instance data
     */
    patchTags(parameters: {
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTagsURL(parameters: {
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putTags
     * @param {} data - Model instance data
     */
    putTags(parameters: {
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTagsURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getTags
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getTags(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTagsReplaceOrCreateURL(parameters: {
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postTagsReplaceOrCreate
     * @param {} data - Model instance data
     */
    postTagsReplaceOrCreate(parameters: {
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTagsUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postTagsUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postTagsUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTagsByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getTagsByIdExists
     * @param {string} id - Model id
     */
    getTagsByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTagsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headTagsById
     * @param {string} id - Model id
     */
    headTagsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTagsByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getTagsById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getTagsById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTagsByIdURL(parameters: {
        'id': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putTagsById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putTagsById(parameters: {
        'id': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTagsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteTagsById
     * @param {string} id - Model id
     */
    deleteTagsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchTagsByIdURL(parameters: {
        'id': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchTagsById
     * @param {string} id - Tag id
     * @param {} data - An object of model property name/value pairs
     */
    patchTagsById(parameters: {
        'id': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTagsByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postTagsByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postTagsByIdReplace(parameters: {
        'id': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTagsFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getTagsFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getTagsFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTagsUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postTagsUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postTagsUpdate(parameters: {
        'where' ? : string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTagsCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getTagsCount
     * @param {string} where - Criteria to match model instances
     */
    getTagsCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTagsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postTagsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTagsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTagsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getTagsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTagsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Tags/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdBrandURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/brand';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches hasOne relation brand.
    * @method
    * @name TweakApi#getTeamsByIdBrand
         * @param {string} id - Team id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdBrand(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/brand';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdBrandURL(parameters: {
        'id': string,
        'data' ? : TeamBrand,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/brand';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in brand of this model.
    * @method
    * @name TweakApi#postTeamsByIdBrand
         * @param {string} id - Team id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdBrand(parameters: {
        'id': string,
        'data' ? : TeamBrand,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/brand';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdBrandURL(parameters: {
        'id': string,
        'data' ? : TeamBrand,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/brand';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update brand of this model.
    * @method
    * @name TweakApi#putTeamsByIdBrand
         * @param {string} id - Team id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdBrand(parameters: {
        'id': string,
        'data' ? : TeamBrand,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/brand';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdBrandURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/brand';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes brand of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdBrand
     * @param {string} id - Team id
     */
    deleteTeamsByIdBrand(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/brand';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for members.
     * @method
     * @name TweakApi#getTeamsByIdMembersByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for members
     */
    getTeamsByIdMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for members.
     * @method
     * @name TweakApi#deleteTeamsByIdMembersByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for members
     */
    deleteTeamsByIdMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for members.
    * @method
    * @name TweakApi#putTeamsByIdMembersByFk
         * @param {string} id - Team id
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdMembersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdMembersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for members.
    * @method
    * @name TweakApi#putTeamsByIdMembersRelByFk
         * @param {string} id - Team id
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdMembersRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdMembersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the members relation to an item by id.
     * @method
     * @name TweakApi#deleteTeamsByIdMembersRelByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for members
     */
    deleteTeamsByIdMembersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamsByIdMembersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of members relation to an item by id.
     * @method
     * @name TweakApi#headTeamsByIdMembersRelByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for members
     */
    headTeamsByIdMembersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTeamMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/teamMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for teamMembers.
     * @method
     * @name TweakApi#getTeamsByIdTeamMembersByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for teamMembers
     */
    getTeamsByIdTeamMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/teamMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTeamMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/teamMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for teamMembers.
     * @method
     * @name TweakApi#deleteTeamsByIdTeamMembersByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for teamMembers
     */
    deleteTeamsByIdTeamMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/teamMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdTeamMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/teamMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for teamMembers.
    * @method
    * @name TweakApi#putTeamsByIdTeamMembersByFk
         * @param {string} id - Team id
         * @param {string} fk - Foreign key for teamMembers
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdTeamMembersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/teamMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templates.
     * @method
     * @name TweakApi#getTeamsByIdTemplatesByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for templates
     */
    getTeamsByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templates.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for templates
     */
    deleteTeamsByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templates.
    * @method
    * @name TweakApi#putTeamsByIdTemplatesByFk
         * @param {string} id - Team id
         * @param {string} fk - Foreign key for templates
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for portals.
     * @method
     * @name TweakApi#getTeamsByIdPortalsByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for portals
     */
    getTeamsByIdPortalsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for portals.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for portals
     */
    deleteTeamsByIdPortalsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdPortalsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for portals.
    * @method
    * @name TweakApi#putTeamsByIdPortalsByFk
         * @param {string} id - Team id
         * @param {string} fk - Foreign key for portals
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdPortalsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImagesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for images.
     * @method
     * @name TweakApi#getTeamsByIdImagesByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for images
     */
    getTeamsByIdImagesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdImagesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for images.
     * @method
     * @name TweakApi#deleteTeamsByIdImagesByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for images
     */
    deleteTeamsByIdImagesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdImagesByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for images.
    * @method
    * @name TweakApi#putTeamsByIdImagesByFk
         * @param {string} id - Team id
         * @param {string} fk - Foreign key for images
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdImagesByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplateFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templateFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templateFolders.
     * @method
     * @name TweakApi#getTeamsByIdTemplateFoldersByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for templateFolders
     */
    getTeamsByIdTemplateFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templateFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplateFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templateFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templateFolders.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplateFoldersByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for templateFolders
     */
    deleteTeamsByIdTemplateFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templateFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdTemplateFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templateFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templateFolders.
    * @method
    * @name TweakApi#putTeamsByIdTemplateFoldersByFk
         * @param {string} id - Team id
         * @param {string} fk - Foreign key for templateFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdTemplateFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templateFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdWorkflowsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/workflows/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for workflows.
     * @method
     * @name TweakApi#getTeamsByIdWorkflowsByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for workflows
     */
    getTeamsByIdWorkflowsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/workflows/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdWorkflowsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/workflows/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for workflows.
     * @method
     * @name TweakApi#deleteTeamsByIdWorkflowsByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for workflows
     */
    deleteTeamsByIdWorkflowsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/workflows/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdWorkflowsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/workflows/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for workflows.
    * @method
    * @name TweakApi#putTeamsByIdWorkflowsByFk
         * @param {string} id - Team id
         * @param {string} fk - Foreign key for workflows
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdWorkflowsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/workflows/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for imageFolders.
     * @method
     * @name TweakApi#getTeamsByIdImageFoldersByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for imageFolders
     */
    getTeamsByIdImageFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdImageFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for imageFolders.
     * @method
     * @name TweakApi#deleteTeamsByIdImageFoldersByFk
     * @param {string} id - Team id
     * @param {string} fk - Foreign key for imageFolders
     */
    deleteTeamsByIdImageFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdImageFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for imageFolders.
    * @method
    * @name TweakApi#putTeamsByIdImageFoldersByFk
         * @param {string} id - Team id
         * @param {string} fk - Foreign key for imageFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdImageFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdMembersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries members of Team.
    * @method
    * @name TweakApi#getTeamsByIdMembers
         * @param {string} id - Team id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdMembers(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdMembersURL(parameters: {
        'id': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in members of this model.
    * @method
    * @name TweakApi#postTeamsByIdMembers
         * @param {string} id - Team id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdMembers(parameters: {
        'id': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdMembersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all members of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdMembers
     * @param {string} id - Team id
     */
    deleteTeamsByIdMembers(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdMembersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts members of Team.
     * @method
     * @name TweakApi#getTeamsByIdMembersCount
     * @param {string} id - Team id
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdMembersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/members/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTeamMembersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/teamMembers';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries teamMembers of Team.
    * @method
    * @name TweakApi#getTeamsByIdTeamMembers
         * @param {string} id - Team id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdTeamMembers(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/teamMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdTeamMembersURL(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/teamMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in teamMembers of this model.
    * @method
    * @name TweakApi#postTeamsByIdTeamMembers
         * @param {string} id - Team id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdTeamMembers(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/teamMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTeamMembersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/teamMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all teamMembers of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdTeamMembers
     * @param {string} id - Team id
     */
    deleteTeamsByIdTeamMembers(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/teamMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTeamMembersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/teamMembers/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts teamMembers of Team.
     * @method
     * @name TweakApi#getTeamsByIdTeamMembersCount
     * @param {string} id - Team id
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdTeamMembersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/teamMembers/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templates of Team.
    * @method
    * @name TweakApi#getTeamsByIdTemplates
         * @param {string} id - Team id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdTemplates(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdTemplatesURL(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templates of this model.
    * @method
    * @name TweakApi#postTeamsByIdTemplates
         * @param {string} id - Team id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdTemplates(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templates of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplates
     * @param {string} id - Team id
     */
    deleteTeamsByIdTemplates(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templates of Team.
     * @method
     * @name TweakApi#getTeamsByIdTemplatesCount
     * @param {string} id - Team id
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdTemplatesCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries portals of Team.
    * @method
    * @name TweakApi#getTeamsByIdPortals
         * @param {string} id - Team id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdPortals(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdPortalsURL(parameters: {
        'id': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in portals of this model.
    * @method
    * @name TweakApi#postTeamsByIdPortals
         * @param {string} id - Team id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdPortals(parameters: {
        'id': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all portals of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdPortals
     * @param {string} id - Team id
     */
    deleteTeamsByIdPortals(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts portals of Team.
     * @method
     * @name TweakApi#getTeamsByIdPortalsCount
     * @param {string} id - Team id
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdPortalsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImagesURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries images of Team.
    * @method
    * @name TweakApi#getTeamsByIdImages
         * @param {string} id - Team id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdImages(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdImagesURL(parameters: {
        'id': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in images of this model.
    * @method
    * @name TweakApi#postTeamsByIdImages
         * @param {string} id - Team id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdImages(parameters: {
        'id': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdImagesURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all images of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdImages
     * @param {string} id - Team id
     */
    deleteTeamsByIdImages(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImagesCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts images of Team.
     * @method
     * @name TweakApi#getTeamsByIdImagesCount
     * @param {string} id - Team id
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdImagesCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplateFoldersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templateFolders';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templateFolders of Team.
    * @method
    * @name TweakApi#getTeamsByIdTemplateFolders
         * @param {string} id - Team id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdTemplateFolders(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdTemplateFoldersURL(parameters: {
        'id': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templateFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templateFolders of this model.
    * @method
    * @name TweakApi#postTeamsByIdTemplateFolders
         * @param {string} id - Team id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdTemplateFolders(parameters: {
        'id': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplateFoldersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templateFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templateFolders of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplateFolders
     * @param {string} id - Team id
     */
    deleteTeamsByIdTemplateFolders(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplateFoldersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templateFolders/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templateFolders of Team.
     * @method
     * @name TweakApi#getTeamsByIdTemplateFoldersCount
     * @param {string} id - Team id
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdTemplateFoldersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templateFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdWorkflowsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/workflows';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries workflows of Team.
    * @method
    * @name TweakApi#getTeamsByIdWorkflows
         * @param {string} id - Team id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdWorkflows(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/workflows';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdWorkflowsURL(parameters: {
        'id': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/workflows';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in workflows of this model.
    * @method
    * @name TweakApi#postTeamsByIdWorkflows
         * @param {string} id - Team id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdWorkflows(parameters: {
        'id': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/workflows';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdWorkflowsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/workflows';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all workflows of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdWorkflows
     * @param {string} id - Team id
     */
    deleteTeamsByIdWorkflows(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/workflows';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdWorkflowsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/workflows/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts workflows of Team.
     * @method
     * @name TweakApi#getTeamsByIdWorkflowsCount
     * @param {string} id - Team id
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdWorkflowsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/workflows/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries imageFolders of Team.
    * @method
    * @name TweakApi#getTeamsByIdImageFolders
         * @param {string} id - Team id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdImageFolders(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdImageFoldersURL(parameters: {
        'id': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in imageFolders of this model.
    * @method
    * @name TweakApi#postTeamsByIdImageFolders
         * @param {string} id - Team id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdImageFolders(parameters: {
        'id': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdImageFoldersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all imageFolders of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdImageFolders
     * @param {string} id - Team id
     */
    deleteTeamsByIdImageFolders(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts imageFolders of Team.
     * @method
     * @name TweakApi#getTeamsByIdImageFoldersCount
     * @param {string} id - Team id
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdImageFoldersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsURL(parameters: {
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postTeams
     * @param {} data - Model instance data
     */
    postTeams(parameters: {
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchTeamsURL(parameters: {
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchTeams
     * @param {} data - Model instance data
     */
    patchTeams(parameters: {
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsURL(parameters: {
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putTeams
     * @param {} data - Model instance data
     */
    putTeams(parameters: {
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getTeams
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getTeams(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsReplaceOrCreateURL(parameters: {
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postTeamsReplaceOrCreate
     * @param {} data - Model instance data
     */
    postTeamsReplaceOrCreate(parameters: {
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postTeamsUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postTeamsUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getTeamsByIdExists
     * @param {string} id - Model id
     */
    getTeamsByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headTeamsById
     * @param {string} id - Model id
     */
    headTeamsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getTeamsById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getTeamsById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdURL(parameters: {
        'id': string,
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putTeamsById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putTeamsById(parameters: {
        'id': string,
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteTeamsById
     * @param {string} id - Model id
     */
    deleteTeamsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchTeamsByIdURL(parameters: {
        'id': string,
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchTeamsById
     * @param {string} id - Team id
     * @param {} data - An object of model property name/value pairs
     */
    patchTeamsById(parameters: {
        'id': string,
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postTeamsByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postTeamsByIdReplace(parameters: {
        'id': string,
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getTeamsFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getTeamsFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postTeamsUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postTeamsUpdate(parameters: {
        'where' ? : string,
        'data' ? : Team,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getTeamsCount
     * @param {string} where - Criteria to match model instances
     */
    getTeamsCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postTeamsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getTeamsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdInvitationTicketsURL(parameters: {
        'id': string,
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/invitationTickets';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * List InvitationTickets for this Team
     * @method
     * @name TweakApi#getTeamsByIdInvitationTickets
     * @param {string} id - Team id
     * @param {string} id - Team id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getTeamsByIdInvitationTickets(parameters: {
        'id': string,
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/invitationTickets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdInvitationTicketsByFkURL(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/invitationTickets/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Get InvitationTicket by Id for this Team
     * @method
     * @name TweakApi#getTeamsByIdInvitationTicketsByFk
     * @param {string} id - Team id
     * @param {string} id - Team id
     * @param {string} fk - InvitationTicket id
     * @param {string} filter - Only include changes that match this filter
     */
    getTeamsByIdInvitationTicketsByFk(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/invitationTickets/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdInvitationTicketsByFkURL(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/invitationTickets/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete InvitationTickets for this Team
     * @method
     * @name TweakApi#deleteTeamsByIdInvitationTicketsByFk
     * @param {string} id - Team id
     * @param {string} id - Team id
     * @param {string} fk - InvitationTicket id
     */
    deleteTeamsByIdInvitationTicketsByFk(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/invitationTickets/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkTeamURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/team';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation team.
    * @method
    * @name TweakApi#getTeamsByIdPortalsByNkTeam
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdPortalsByNkTeam(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/team';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkDesignsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for designs.
     * @method
     * @name TweakApi#getTeamsByIdPortalsByNkDesignsByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for designs
     */
    getTeamsByIdPortalsByNkDesignsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkDesignsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for designs.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkDesignsByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for designs
     */
    deleteTeamsByIdPortalsByNkDesignsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdPortalsByNkDesignsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for designs.
    * @method
    * @name TweakApi#putTeamsByIdPortalsByNkDesignsByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} fk - Foreign key for designs
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdPortalsByNkDesignsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkPermissionURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/permission';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches hasOne relation permission.
    * @method
    * @name TweakApi#getTeamsByIdPortalsByNkPermission
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdPortalsByNkPermission(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdPortalsByNkPermissionURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/permission';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in permission of this model.
    * @method
    * @name TweakApi#postTeamsByIdPortalsByNkPermission
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdPortalsByNkPermission(parameters: {
        'id': string,
        'nk': string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdPortalsByNkPermissionURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/permission';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update permission of this model.
    * @method
    * @name TweakApi#putTeamsByIdPortalsByNkPermission
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdPortalsByNkPermission(parameters: {
        'id': string,
        'nk': string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkPermissionURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/permission';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes permission of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkPermission
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     */
    deleteTeamsByIdPortalsByNkPermission(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for members.
     * @method
     * @name TweakApi#getTeamsByIdPortalsByNkMembersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for members
     */
    getTeamsByIdPortalsByNkMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for members.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkMembersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for members
     */
    deleteTeamsByIdPortalsByNkMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdPortalsByNkMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for members.
    * @method
    * @name TweakApi#putTeamsByIdPortalsByNkMembersByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdPortalsByNkMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdPortalsByNkMembersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for members.
    * @method
    * @name TweakApi#putTeamsByIdPortalsByNkMembersRelByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdPortalsByNkMembersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkMembersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the members relation to an item by id.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkMembersRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for members
     */
    deleteTeamsByIdPortalsByNkMembersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamsByIdPortalsByNkMembersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of members relation to an item by id.
     * @method
     * @name TweakApi#headTeamsByIdPortalsByNkMembersRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for members
     */
    headTeamsByIdPortalsByNkMembersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkPortalMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/portalMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for portalMembers.
     * @method
     * @name TweakApi#getTeamsByIdPortalsByNkPortalMembersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for portalMembers
     */
    getTeamsByIdPortalsByNkPortalMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/portalMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkPortalMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/portalMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for portalMembers.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkPortalMembersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for portalMembers
     */
    deleteTeamsByIdPortalsByNkPortalMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/portalMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdPortalsByNkPortalMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/portalMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for portalMembers.
    * @method
    * @name TweakApi#putTeamsByIdPortalsByNkPortalMembersByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} fk - Foreign key for portalMembers
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdPortalsByNkPortalMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/portalMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkTemplatesByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templates.
     * @method
     * @name TweakApi#getTeamsByIdPortalsByNkTemplatesByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for templates
     */
    getTeamsByIdPortalsByNkTemplatesByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkTemplatesByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templates.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkTemplatesByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for templates
     */
    deleteTeamsByIdPortalsByNkTemplatesByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdPortalsByNkTemplatesByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templates.
    * @method
    * @name TweakApi#putTeamsByIdPortalsByNkTemplatesByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} fk - Foreign key for templates
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdPortalsByNkTemplatesByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdPortalsByNkTemplatesRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for templates.
    * @method
    * @name TweakApi#putTeamsByIdPortalsByNkTemplatesRelByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} fk - Foreign key for templates
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdPortalsByNkTemplatesRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkTemplatesRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the templates relation to an item by id.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkTemplatesRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for templates
     */
    deleteTeamsByIdPortalsByNkTemplatesRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamsByIdPortalsByNkTemplatesRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of templates relation to an item by id.
     * @method
     * @name TweakApi#headTeamsByIdPortalsByNkTemplatesRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for templates
     */
    headTeamsByIdPortalsByNkTemplatesRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkTemplateRelsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateRels/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templateRels.
     * @method
     * @name TweakApi#getTeamsByIdPortalsByNkTemplateRelsByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for templateRels
     */
    getTeamsByIdPortalsByNkTemplateRelsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateRels/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkTemplateRelsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateRels/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templateRels.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkTemplateRelsByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for templateRels
     */
    deleteTeamsByIdPortalsByNkTemplateRelsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateRels/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdPortalsByNkTemplateRelsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateRels/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templateRels.
    * @method
    * @name TweakApi#putTeamsByIdPortalsByNkTemplateRelsByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} fk - Foreign key for templateRels
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdPortalsByNkTemplateRelsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateRels/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkTemplateFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templateFolders.
     * @method
     * @name TweakApi#getTeamsByIdPortalsByNkTemplateFoldersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for templateFolders
     */
    getTeamsByIdPortalsByNkTemplateFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkTemplateFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templateFolders.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkTemplateFoldersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for templateFolders
     */
    deleteTeamsByIdPortalsByNkTemplateFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdPortalsByNkTemplateFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templateFolders.
    * @method
    * @name TweakApi#putTeamsByIdPortalsByNkTemplateFoldersByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} fk - Foreign key for templateFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdPortalsByNkTemplateFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkDesignFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for designFolders.
     * @method
     * @name TweakApi#getTeamsByIdPortalsByNkDesignFoldersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for designFolders
     */
    getTeamsByIdPortalsByNkDesignFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkDesignFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for designFolders.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkDesignFoldersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for designFolders
     */
    deleteTeamsByIdPortalsByNkDesignFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdPortalsByNkDesignFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for designFolders.
    * @method
    * @name TweakApi#putTeamsByIdPortalsByNkDesignFoldersByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} fk - Foreign key for designFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdPortalsByNkDesignFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkImageFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for imageFolders.
     * @method
     * @name TweakApi#getTeamsByIdPortalsByNkImageFoldersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for imageFolders
     */
    getTeamsByIdPortalsByNkImageFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkImageFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for imageFolders.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkImageFoldersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for imageFolders
     */
    deleteTeamsByIdPortalsByNkImageFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdPortalsByNkImageFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for imageFolders.
    * @method
    * @name TweakApi#putTeamsByIdPortalsByNkImageFoldersByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} fk - Foreign key for imageFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdPortalsByNkImageFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdPortalsByNkImageFoldersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for imageFolders.
    * @method
    * @name TweakApi#putTeamsByIdPortalsByNkImageFoldersRelByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} fk - Foreign key for imageFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdPortalsByNkImageFoldersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkImageFoldersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the imageFolders relation to an item by id.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkImageFoldersRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for imageFolders
     */
    deleteTeamsByIdPortalsByNkImageFoldersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamsByIdPortalsByNkImageFoldersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of imageFolders relation to an item by id.
     * @method
     * @name TweakApi#headTeamsByIdPortalsByNkImageFoldersRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} fk - Foreign key for imageFolders
     */
    headTeamsByIdPortalsByNkImageFoldersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkDesignsURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designs';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries designs of Portal.
    * @method
    * @name TweakApi#getTeamsByIdPortalsByNkDesigns
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdPortalsByNkDesigns(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdPortalsByNkDesignsURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designs';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in designs of this model.
    * @method
    * @name TweakApi#postTeamsByIdPortalsByNkDesigns
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdPortalsByNkDesigns(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkDesignsURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designs';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all designs of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkDesigns
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     */
    deleteTeamsByIdPortalsByNkDesigns(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkDesignsCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designs/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts designs of Portal.
     * @method
     * @name TweakApi#getTeamsByIdPortalsByNkDesignsCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdPortalsByNkDesignsCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designs/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkMembersURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries members of Portal.
    * @method
    * @name TweakApi#getTeamsByIdPortalsByNkMembers
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdPortalsByNkMembers(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdPortalsByNkMembersURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in members of this model.
    * @method
    * @name TweakApi#postTeamsByIdPortalsByNkMembers
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdPortalsByNkMembers(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkMembersURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all members of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkMembers
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     */
    deleteTeamsByIdPortalsByNkMembers(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkMembersCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts members of Portal.
     * @method
     * @name TweakApi#getTeamsByIdPortalsByNkMembersCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdPortalsByNkMembersCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/members/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkPortalMembersURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/portalMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries portalMembers of Portal.
    * @method
    * @name TweakApi#getTeamsByIdPortalsByNkPortalMembers
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdPortalsByNkPortalMembers(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/portalMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdPortalsByNkPortalMembersURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/portalMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in portalMembers of this model.
    * @method
    * @name TweakApi#postTeamsByIdPortalsByNkPortalMembers
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdPortalsByNkPortalMembers(parameters: {
        'id': string,
        'nk': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/portalMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkPortalMembersURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/portalMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all portalMembers of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkPortalMembers
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     */
    deleteTeamsByIdPortalsByNkPortalMembers(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/portalMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkPortalMembersCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/portalMembers/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts portalMembers of Portal.
     * @method
     * @name TweakApi#getTeamsByIdPortalsByNkPortalMembersCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdPortalsByNkPortalMembersCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/portalMembers/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkTemplatesURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templates of Portal.
    * @method
    * @name TweakApi#getTeamsByIdPortalsByNkTemplates
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdPortalsByNkTemplates(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdPortalsByNkTemplatesURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templates of this model.
    * @method
    * @name TweakApi#postTeamsByIdPortalsByNkTemplates
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdPortalsByNkTemplates(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkTemplatesURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templates of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkTemplates
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     */
    deleteTeamsByIdPortalsByNkTemplates(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkTemplatesCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templates of Portal.
     * @method
     * @name TweakApi#getTeamsByIdPortalsByNkTemplatesCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdPortalsByNkTemplatesCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templates/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkTemplateRelsURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateRels';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templateRels of Portal.
    * @method
    * @name TweakApi#getTeamsByIdPortalsByNkTemplateRels
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdPortalsByNkTemplateRels(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateRels';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdPortalsByNkTemplateRelsURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateRels';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templateRels of this model.
    * @method
    * @name TweakApi#postTeamsByIdPortalsByNkTemplateRels
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdPortalsByNkTemplateRels(parameters: {
        'id': string,
        'nk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateRels';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkTemplateRelsURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateRels';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templateRels of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkTemplateRels
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     */
    deleteTeamsByIdPortalsByNkTemplateRels(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateRels';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkTemplateRelsCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateRels/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templateRels of Portal.
     * @method
     * @name TweakApi#getTeamsByIdPortalsByNkTemplateRelsCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdPortalsByNkTemplateRelsCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateRels/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkTemplateFoldersURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templateFolders of Portal.
    * @method
    * @name TweakApi#getTeamsByIdPortalsByNkTemplateFolders
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdPortalsByNkTemplateFolders(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdPortalsByNkTemplateFoldersURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templateFolders of this model.
    * @method
    * @name TweakApi#postTeamsByIdPortalsByNkTemplateFolders
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdPortalsByNkTemplateFolders(parameters: {
        'id': string,
        'nk': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkTemplateFoldersURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templateFolders of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkTemplateFolders
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     */
    deleteTeamsByIdPortalsByNkTemplateFolders(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkTemplateFoldersCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateFolders/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templateFolders of Portal.
     * @method
     * @name TweakApi#getTeamsByIdPortalsByNkTemplateFoldersCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdPortalsByNkTemplateFoldersCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/templateFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkDesignFoldersURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries designFolders of Portal.
    * @method
    * @name TweakApi#getTeamsByIdPortalsByNkDesignFolders
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdPortalsByNkDesignFolders(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdPortalsByNkDesignFoldersURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in designFolders of this model.
    * @method
    * @name TweakApi#postTeamsByIdPortalsByNkDesignFolders
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdPortalsByNkDesignFolders(parameters: {
        'id': string,
        'nk': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkDesignFoldersURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all designFolders of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkDesignFolders
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     */
    deleteTeamsByIdPortalsByNkDesignFolders(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkDesignFoldersCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designFolders/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts designFolders of Portal.
     * @method
     * @name TweakApi#getTeamsByIdPortalsByNkDesignFoldersCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdPortalsByNkDesignFoldersCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/designFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkImageFoldersURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries imageFolders of Portal.
    * @method
    * @name TweakApi#getTeamsByIdPortalsByNkImageFolders
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdPortalsByNkImageFolders(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdPortalsByNkImageFoldersURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in imageFolders of this model.
    * @method
    * @name TweakApi#postTeamsByIdPortalsByNkImageFolders
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for portals.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdPortalsByNkImageFolders(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdPortalsByNkImageFoldersURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all imageFolders of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdPortalsByNkImageFolders
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     */
    deleteTeamsByIdPortalsByNkImageFolders(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdPortalsByNkImageFoldersCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts imageFolders of Portal.
     * @method
     * @name TweakApi#getTeamsByIdPortalsByNkImageFoldersCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for portals.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdPortalsByNkImageFoldersCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/portals/{nk}/imageFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImagesByNkTeamURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images/{nk}/team';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation team.
    * @method
    * @name TweakApi#getTeamsByIdImagesByNkTeam
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for images.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdImagesByNkTeam(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images/{nk}/team';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImagesByNkFolderURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images/{nk}/folder';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation folder.
    * @method
    * @name TweakApi#getTeamsByIdImagesByNkFolder
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for images.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdImagesByNkFolder(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/images/{nk}/folder';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByNkImagesByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/images/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for images.
     * @method
     * @name TweakApi#getTeamsByIdImageFoldersByNkImagesByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} fk - Foreign key for images
     */
    getTeamsByIdImageFoldersByNkImagesByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/images/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdImageFoldersByNkImagesByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/images/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for images.
     * @method
     * @name TweakApi#deleteTeamsByIdImageFoldersByNkImagesByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} fk - Foreign key for images
     */
    deleteTeamsByIdImageFoldersByNkImagesByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/images/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdImageFoldersByNkImagesByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/images/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for images.
    * @method
    * @name TweakApi#putTeamsByIdImageFoldersByNkImagesByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {string} fk - Foreign key for images
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdImageFoldersByNkImagesByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/images/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByNkTeamURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/team';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation team.
    * @method
    * @name TweakApi#getTeamsByIdImageFoldersByNkTeam
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdImageFoldersByNkTeam(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/team';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByNkParentURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/parent';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation parent.
    * @method
    * @name TweakApi#getTeamsByIdImageFoldersByNkParent
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdImageFoldersByNkParent(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/parent';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByNkChildrenByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/children/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for children.
     * @method
     * @name TweakApi#getTeamsByIdImageFoldersByNkChildrenByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} fk - Foreign key for children
     */
    getTeamsByIdImageFoldersByNkChildrenByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/children/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdImageFoldersByNkChildrenByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/children/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for children.
     * @method
     * @name TweakApi#deleteTeamsByIdImageFoldersByNkChildrenByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} fk - Foreign key for children
     */
    deleteTeamsByIdImageFoldersByNkChildrenByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/children/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdImageFoldersByNkChildrenByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/children/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for children.
    * @method
    * @name TweakApi#putTeamsByIdImageFoldersByNkChildrenByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {string} fk - Foreign key for children
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdImageFoldersByNkChildrenByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/children/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByNkPortalsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for portals.
     * @method
     * @name TweakApi#getTeamsByIdImageFoldersByNkPortalsByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} fk - Foreign key for portals
     */
    getTeamsByIdImageFoldersByNkPortalsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdImageFoldersByNkPortalsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for portals.
     * @method
     * @name TweakApi#deleteTeamsByIdImageFoldersByNkPortalsByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} fk - Foreign key for portals
     */
    deleteTeamsByIdImageFoldersByNkPortalsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdImageFoldersByNkPortalsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for portals.
    * @method
    * @name TweakApi#putTeamsByIdImageFoldersByNkPortalsByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {string} fk - Foreign key for portals
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdImageFoldersByNkPortalsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdImageFoldersByNkPortalsRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for portals.
    * @method
    * @name TweakApi#putTeamsByIdImageFoldersByNkPortalsRelByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {string} fk - Foreign key for portals
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdImageFoldersByNkPortalsRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdImageFoldersByNkPortalsRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the portals relation to an item by id.
     * @method
     * @name TweakApi#deleteTeamsByIdImageFoldersByNkPortalsRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} fk - Foreign key for portals
     */
    deleteTeamsByIdImageFoldersByNkPortalsRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamsByIdImageFoldersByNkPortalsRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of portals relation to an item by id.
     * @method
     * @name TweakApi#headTeamsByIdImageFoldersByNkPortalsRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} fk - Foreign key for portals
     */
    headTeamsByIdImageFoldersByNkPortalsRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByNkMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for members.
     * @method
     * @name TweakApi#getTeamsByIdImageFoldersByNkMembersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} fk - Foreign key for members
     */
    getTeamsByIdImageFoldersByNkMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdImageFoldersByNkMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for members.
     * @method
     * @name TweakApi#deleteTeamsByIdImageFoldersByNkMembersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} fk - Foreign key for members
     */
    deleteTeamsByIdImageFoldersByNkMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdImageFoldersByNkMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for members.
    * @method
    * @name TweakApi#putTeamsByIdImageFoldersByNkMembersByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdImageFoldersByNkMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdImageFoldersByNkMembersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for members.
    * @method
    * @name TweakApi#putTeamsByIdImageFoldersByNkMembersRelByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdImageFoldersByNkMembersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdImageFoldersByNkMembersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the members relation to an item by id.
     * @method
     * @name TweakApi#deleteTeamsByIdImageFoldersByNkMembersRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} fk - Foreign key for members
     */
    deleteTeamsByIdImageFoldersByNkMembersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamsByIdImageFoldersByNkMembersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of members relation to an item by id.
     * @method
     * @name TweakApi#headTeamsByIdImageFoldersByNkMembersRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} fk - Foreign key for members
     */
    headTeamsByIdImageFoldersByNkMembersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByNkFolderMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/folderMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for folderMembers.
     * @method
     * @name TweakApi#getTeamsByIdImageFoldersByNkFolderMembersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} fk - Foreign key for folderMembers
     */
    getTeamsByIdImageFoldersByNkFolderMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/folderMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdImageFoldersByNkFolderMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/folderMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for folderMembers.
     * @method
     * @name TweakApi#deleteTeamsByIdImageFoldersByNkFolderMembersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} fk - Foreign key for folderMembers
     */
    deleteTeamsByIdImageFoldersByNkFolderMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/folderMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdImageFoldersByNkFolderMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/folderMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for folderMembers.
    * @method
    * @name TweakApi#putTeamsByIdImageFoldersByNkFolderMembersByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {string} fk - Foreign key for folderMembers
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdImageFoldersByNkFolderMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/folderMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByNkImagesURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/images';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries images of ImageFolder.
    * @method
    * @name TweakApi#getTeamsByIdImageFoldersByNkImages
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdImageFoldersByNkImages(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdImageFoldersByNkImagesURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/images';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in images of this model.
    * @method
    * @name TweakApi#postTeamsByIdImageFoldersByNkImages
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdImageFoldersByNkImages(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdImageFoldersByNkImagesURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/images';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all images of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdImageFoldersByNkImages
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     */
    deleteTeamsByIdImageFoldersByNkImages(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByNkImagesCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/images/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts images of ImageFolder.
     * @method
     * @name TweakApi#getTeamsByIdImageFoldersByNkImagesCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdImageFoldersByNkImagesCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/images/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByNkChildrenURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/children';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries children of ImageFolder.
    * @method
    * @name TweakApi#getTeamsByIdImageFoldersByNkChildren
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdImageFoldersByNkChildren(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/children';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdImageFoldersByNkChildrenURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/children';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in children of this model.
    * @method
    * @name TweakApi#postTeamsByIdImageFoldersByNkChildren
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdImageFoldersByNkChildren(parameters: {
        'id': string,
        'nk': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/children';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdImageFoldersByNkChildrenURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/children';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all children of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdImageFoldersByNkChildren
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     */
    deleteTeamsByIdImageFoldersByNkChildren(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/children';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByNkChildrenCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/children/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts children of ImageFolder.
     * @method
     * @name TweakApi#getTeamsByIdImageFoldersByNkChildrenCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdImageFoldersByNkChildrenCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/children/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByNkPortalsURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries portals of ImageFolder.
    * @method
    * @name TweakApi#getTeamsByIdImageFoldersByNkPortals
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdImageFoldersByNkPortals(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdImageFoldersByNkPortalsURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in portals of this model.
    * @method
    * @name TweakApi#postTeamsByIdImageFoldersByNkPortals
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdImageFoldersByNkPortals(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdImageFoldersByNkPortalsURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all portals of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdImageFoldersByNkPortals
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     */
    deleteTeamsByIdImageFoldersByNkPortals(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByNkPortalsCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts portals of ImageFolder.
     * @method
     * @name TweakApi#getTeamsByIdImageFoldersByNkPortalsCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdImageFoldersByNkPortalsCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/portals/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByNkMembersURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries members of ImageFolder.
    * @method
    * @name TweakApi#getTeamsByIdImageFoldersByNkMembers
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdImageFoldersByNkMembers(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdImageFoldersByNkMembersURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in members of this model.
    * @method
    * @name TweakApi#postTeamsByIdImageFoldersByNkMembers
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdImageFoldersByNkMembers(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdImageFoldersByNkMembersURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all members of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdImageFoldersByNkMembers
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     */
    deleteTeamsByIdImageFoldersByNkMembers(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByNkMembersCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts members of ImageFolder.
     * @method
     * @name TweakApi#getTeamsByIdImageFoldersByNkMembersCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdImageFoldersByNkMembersCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/members/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByNkFolderMembersURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/folderMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries folderMembers of ImageFolder.
    * @method
    * @name TweakApi#getTeamsByIdImageFoldersByNkFolderMembers
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdImageFoldersByNkFolderMembers(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/folderMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdImageFoldersByNkFolderMembersURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/folderMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in folderMembers of this model.
    * @method
    * @name TweakApi#postTeamsByIdImageFoldersByNkFolderMembers
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for imageFolders.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdImageFoldersByNkFolderMembers(parameters: {
        'id': string,
        'nk': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/folderMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdImageFoldersByNkFolderMembersURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/folderMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all folderMembers of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdImageFoldersByNkFolderMembers
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     */
    deleteTeamsByIdImageFoldersByNkFolderMembers(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/folderMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdImageFoldersByNkFolderMembersCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/folderMembers/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts folderMembers of ImageFolder.
     * @method
     * @name TweakApi#getTeamsByIdImageFoldersByNkFolderMembersCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for imageFolders.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdImageFoldersByNkFolderMembersCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/imageFolders/{nk}/folderMembers/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkTeamURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/team';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation team.
    * @method
    * @name TweakApi#getTeamsByIdTemplatesByNkTeam
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdTemplatesByNkTeam(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/team';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkDesignsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for designs.
     * @method
     * @name TweakApi#getTeamsByIdTemplatesByNkDesignsByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for designs
     */
    getTeamsByIdTemplatesByNkDesignsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByNkDesignsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for designs.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByNkDesignsByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for designs
     */
    deleteTeamsByIdTemplatesByNkDesignsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdTemplatesByNkDesignsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for designs.
    * @method
    * @name TweakApi#putTeamsByIdTemplatesByNkDesignsByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {string} fk - Foreign key for designs
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdTemplatesByNkDesignsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkUploaderURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/uploader';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation uploader.
    * @method
    * @name TweakApi#getTeamsByIdTemplatesByNkUploader
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdTemplatesByNkUploader(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/uploader';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkPermissionURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/permission';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches hasOne relation permission.
    * @method
    * @name TweakApi#getTeamsByIdTemplatesByNkPermission
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdTemplatesByNkPermission(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdTemplatesByNkPermissionURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/permission';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in permission of this model.
    * @method
    * @name TweakApi#postTeamsByIdTemplatesByNkPermission
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdTemplatesByNkPermission(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdTemplatesByNkPermissionURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/permission';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update permission of this model.
    * @method
    * @name TweakApi#putTeamsByIdTemplatesByNkPermission
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdTemplatesByNkPermission(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByNkPermissionURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/permission';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes permission of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByNkPermission
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     */
    deleteTeamsByIdTemplatesByNkPermission(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkPortalsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for portals.
     * @method
     * @name TweakApi#getTeamsByIdTemplatesByNkPortalsByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for portals
     */
    getTeamsByIdTemplatesByNkPortalsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByNkPortalsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for portals.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByNkPortalsByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for portals
     */
    deleteTeamsByIdTemplatesByNkPortalsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdTemplatesByNkPortalsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for portals.
    * @method
    * @name TweakApi#putTeamsByIdTemplatesByNkPortalsByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {string} fk - Foreign key for portals
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdTemplatesByNkPortalsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdTemplatesByNkPortalsRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for portals.
    * @method
    * @name TweakApi#putTeamsByIdTemplatesByNkPortalsRelByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {string} fk - Foreign key for portals
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdTemplatesByNkPortalsRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByNkPortalsRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the portals relation to an item by id.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByNkPortalsRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for portals
     */
    deleteTeamsByIdTemplatesByNkPortalsRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamsByIdTemplatesByNkPortalsRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of portals relation to an item by id.
     * @method
     * @name TweakApi#headTeamsByIdTemplatesByNkPortalsRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for portals
     */
    headTeamsByIdTemplatesByNkPortalsRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for members.
     * @method
     * @name TweakApi#getTeamsByIdTemplatesByNkMembersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for members
     */
    getTeamsByIdTemplatesByNkMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByNkMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for members.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByNkMembersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for members
     */
    deleteTeamsByIdTemplatesByNkMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdTemplatesByNkMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for members.
    * @method
    * @name TweakApi#putTeamsByIdTemplatesByNkMembersByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdTemplatesByNkMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdTemplatesByNkMembersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for members.
    * @method
    * @name TweakApi#putTeamsByIdTemplatesByNkMembersRelByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdTemplatesByNkMembersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByNkMembersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the members relation to an item by id.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByNkMembersRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for members
     */
    deleteTeamsByIdTemplatesByNkMembersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamsByIdTemplatesByNkMembersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of members relation to an item by id.
     * @method
     * @name TweakApi#headTeamsByIdTemplatesByNkMembersRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for members
     */
    headTeamsByIdTemplatesByNkMembersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkTemplateMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/templateMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templateMembers.
     * @method
     * @name TweakApi#getTeamsByIdTemplatesByNkTemplateMembersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for templateMembers
     */
    getTeamsByIdTemplatesByNkTemplateMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/templateMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByNkTemplateMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/templateMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templateMembers.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByNkTemplateMembersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for templateMembers
     */
    deleteTeamsByIdTemplatesByNkTemplateMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/templateMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdTemplatesByNkTemplateMembersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/templateMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templateMembers.
    * @method
    * @name TweakApi#putTeamsByIdTemplatesByNkTemplateMembersByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {string} fk - Foreign key for templateMembers
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdTemplatesByNkTemplateMembersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/templateMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkTagsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for tags.
     * @method
     * @name TweakApi#getTeamsByIdTemplatesByNkTagsByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for tags
     */
    getTeamsByIdTemplatesByNkTagsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByNkTagsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for tags.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByNkTagsByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for tags
     */
    deleteTeamsByIdTemplatesByNkTagsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdTemplatesByNkTagsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for tags.
    * @method
    * @name TweakApi#putTeamsByIdTemplatesByNkTagsByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {string} fk - Foreign key for tags
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdTemplatesByNkTagsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdTemplatesByNkTagsRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for tags.
    * @method
    * @name TweakApi#putTeamsByIdTemplatesByNkTagsRelByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {string} fk - Foreign key for tags
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdTemplatesByNkTagsRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByNkTagsRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the tags relation to an item by id.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByNkTagsRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for tags
     */
    deleteTeamsByIdTemplatesByNkTagsRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamsByIdTemplatesByNkTagsRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of tags relation to an item by id.
     * @method
     * @name TweakApi#headTeamsByIdTemplatesByNkTagsRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for tags
     */
    headTeamsByIdTemplatesByNkTagsRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkTeamFolderURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/teamFolder';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation teamFolder.
    * @method
    * @name TweakApi#getTeamsByIdTemplatesByNkTeamFolder
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdTemplatesByNkTeamFolder(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/teamFolder';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkPortalFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for portalFolders.
     * @method
     * @name TweakApi#getTeamsByIdTemplatesByNkPortalFoldersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for portalFolders
     */
    getTeamsByIdTemplatesByNkPortalFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByNkPortalFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for portalFolders.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByNkPortalFoldersByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for portalFolders
     */
    deleteTeamsByIdTemplatesByNkPortalFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdTemplatesByNkPortalFoldersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for portalFolders.
    * @method
    * @name TweakApi#putTeamsByIdTemplatesByNkPortalFoldersByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {string} fk - Foreign key for portalFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdTemplatesByNkPortalFoldersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamsByIdTemplatesByNkPortalFoldersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for portalFolders.
    * @method
    * @name TweakApi#putTeamsByIdTemplatesByNkPortalFoldersRelByFk
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {string} fk - Foreign key for portalFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamsByIdTemplatesByNkPortalFoldersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByNkPortalFoldersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the portalFolders relation to an item by id.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByNkPortalFoldersRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for portalFolders
     */
    deleteTeamsByIdTemplatesByNkPortalFoldersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamsByIdTemplatesByNkPortalFoldersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of portalFolders relation to an item by id.
     * @method
     * @name TweakApi#headTeamsByIdTemplatesByNkPortalFoldersRelByFk
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} fk - Foreign key for portalFolders
     */
    headTeamsByIdTemplatesByNkPortalFoldersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkWorkflowURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/workflow';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation workflow.
    * @method
    * @name TweakApi#getTeamsByIdTemplatesByNkWorkflow
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdTemplatesByNkWorkflow(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/workflow';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkDesignsURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/designs';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries designs of Template.
    * @method
    * @name TweakApi#getTeamsByIdTemplatesByNkDesigns
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdTemplatesByNkDesigns(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdTemplatesByNkDesignsURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/designs';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in designs of this model.
    * @method
    * @name TweakApi#postTeamsByIdTemplatesByNkDesigns
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdTemplatesByNkDesigns(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByNkDesignsURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/designs';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all designs of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByNkDesigns
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     */
    deleteTeamsByIdTemplatesByNkDesigns(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkDesignsCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/designs/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts designs of Template.
     * @method
     * @name TweakApi#getTeamsByIdTemplatesByNkDesignsCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdTemplatesByNkDesignsCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/designs/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkPortalsURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries portals of Template.
    * @method
    * @name TweakApi#getTeamsByIdTemplatesByNkPortals
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdTemplatesByNkPortals(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdTemplatesByNkPortalsURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in portals of this model.
    * @method
    * @name TweakApi#postTeamsByIdTemplatesByNkPortals
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdTemplatesByNkPortals(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByNkPortalsURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all portals of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByNkPortals
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     */
    deleteTeamsByIdTemplatesByNkPortals(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkPortalsCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts portals of Template.
     * @method
     * @name TweakApi#getTeamsByIdTemplatesByNkPortalsCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdTemplatesByNkPortalsCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portals/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkMembersURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries members of Template.
    * @method
    * @name TweakApi#getTeamsByIdTemplatesByNkMembers
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdTemplatesByNkMembers(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdTemplatesByNkMembersURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in members of this model.
    * @method
    * @name TweakApi#postTeamsByIdTemplatesByNkMembers
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdTemplatesByNkMembers(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByNkMembersURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all members of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByNkMembers
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     */
    deleteTeamsByIdTemplatesByNkMembers(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkMembersCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts members of Template.
     * @method
     * @name TweakApi#getTeamsByIdTemplatesByNkMembersCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdTemplatesByNkMembersCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/members/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkTemplateMembersURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/templateMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templateMembers of Template.
    * @method
    * @name TweakApi#getTeamsByIdTemplatesByNkTemplateMembers
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdTemplatesByNkTemplateMembers(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/templateMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdTemplatesByNkTemplateMembersURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/templateMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templateMembers of this model.
    * @method
    * @name TweakApi#postTeamsByIdTemplatesByNkTemplateMembers
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdTemplatesByNkTemplateMembers(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/templateMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByNkTemplateMembersURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/templateMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templateMembers of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByNkTemplateMembers
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     */
    deleteTeamsByIdTemplatesByNkTemplateMembers(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/templateMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkTemplateMembersCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/templateMembers/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templateMembers of Template.
     * @method
     * @name TweakApi#getTeamsByIdTemplatesByNkTemplateMembersCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdTemplatesByNkTemplateMembersCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/templateMembers/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkTagsURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries tags of Template.
    * @method
    * @name TweakApi#getTeamsByIdTemplatesByNkTags
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdTemplatesByNkTags(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdTemplatesByNkTagsURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in tags of this model.
    * @method
    * @name TweakApi#postTeamsByIdTemplatesByNkTags
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdTemplatesByNkTags(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByNkTagsURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all tags of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByNkTags
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     */
    deleteTeamsByIdTemplatesByNkTags(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkTagsCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts tags of Template.
     * @method
     * @name TweakApi#getTeamsByIdTemplatesByNkTagsCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdTemplatesByNkTagsCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/tags/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkPortalFoldersURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries portalFolders of Template.
    * @method
    * @name TweakApi#getTeamsByIdTemplatesByNkPortalFolders
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamsByIdTemplatesByNkPortalFolders(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamsByIdTemplatesByNkPortalFoldersURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in portalFolders of this model.
    * @method
    * @name TweakApi#postTeamsByIdTemplatesByNkPortalFolders
         * @param {string} id - Team id
         * @param {string} nk - Foreign key for templates.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamsByIdTemplatesByNkPortalFolders(parameters: {
        'id': string,
        'nk': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamsByIdTemplatesByNkPortalFoldersURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all portalFolders of this model.
     * @method
     * @name TweakApi#deleteTeamsByIdTemplatesByNkPortalFolders
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     */
    deleteTeamsByIdTemplatesByNkPortalFolders(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamsByIdTemplatesByNkPortalFoldersCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts portalFolders of Template.
     * @method
     * @name TweakApi#getTeamsByIdTemplatesByNkPortalFoldersCount
     * @param {string} id - Team id
     * @param {string} nk - Foreign key for templates.
     * @param {string} where - Criteria to match model instances
     */
    getTeamsByIdTemplatesByNkPortalFoldersCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Teams/{id}/templates/{nk}/portalFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdCustomerURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/customer';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation customer.
    * @method
    * @name TweakApi#getTeamMembersByIdCustomer
         * @param {string} id - TeamMember id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdCustomer(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/customer';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation team.
    * @method
    * @name TweakApi#getTeamMembersByIdTeam
         * @param {string} id - TeamMember id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdTeam(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdRequestedDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesigns/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for requestedDesigns.
     * @method
     * @name TweakApi#getTeamMembersByIdRequestedDesignsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for requestedDesigns
     */
    getTeamMembersByIdRequestedDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesigns/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdRequestedDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesigns/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for requestedDesigns.
     * @method
     * @name TweakApi#deleteTeamMembersByIdRequestedDesignsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for requestedDesigns
     */
    deleteTeamMembersByIdRequestedDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesigns/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdRequestedDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesigns/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for requestedDesigns.
    * @method
    * @name TweakApi#putTeamMembersByIdRequestedDesignsByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for requestedDesigns
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdRequestedDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesigns/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdAssignedDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/assignedDesigns/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for assignedDesigns.
     * @method
     * @name TweakApi#getTeamMembersByIdAssignedDesignsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for assignedDesigns
     */
    getTeamMembersByIdAssignedDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/assignedDesigns/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdAssignedDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/assignedDesigns/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for assignedDesigns.
     * @method
     * @name TweakApi#deleteTeamMembersByIdAssignedDesignsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for assignedDesigns
     */
    deleteTeamMembersByIdAssignedDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/assignedDesigns/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdAssignedDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/assignedDesigns/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for assignedDesigns.
    * @method
    * @name TweakApi#putTeamMembersByIdAssignedDesignsByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for assignedDesigns
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdAssignedDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/assignedDesigns/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdReviewedDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/reviewedDesigns/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for reviewedDesigns.
     * @method
     * @name TweakApi#getTeamMembersByIdReviewedDesignsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for reviewedDesigns
     */
    getTeamMembersByIdReviewedDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/reviewedDesigns/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdReviewedDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/reviewedDesigns/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for reviewedDesigns.
     * @method
     * @name TweakApi#deleteTeamMembersByIdReviewedDesignsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for reviewedDesigns
     */
    deleteTeamMembersByIdReviewedDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/reviewedDesigns/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdReviewedDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/reviewedDesigns/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for reviewedDesigns.
    * @method
    * @name TweakApi#putTeamMembersByIdReviewedDesignsByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for reviewedDesigns
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdReviewedDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/reviewedDesigns/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdUploadedTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/uploadedTemplates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for uploadedTemplates.
     * @method
     * @name TweakApi#getTeamMembersByIdUploadedTemplatesByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for uploadedTemplates
     */
    getTeamMembersByIdUploadedTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/uploadedTemplates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdUploadedTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/uploadedTemplates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for uploadedTemplates.
     * @method
     * @name TweakApi#deleteTeamMembersByIdUploadedTemplatesByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for uploadedTemplates
     */
    deleteTeamMembersByIdUploadedTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/uploadedTemplates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdUploadedTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/uploadedTemplates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for uploadedTemplates.
    * @method
    * @name TweakApi#putTeamMembersByIdUploadedTemplatesByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for uploadedTemplates
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdUploadedTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/uploadedTemplates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdPortalsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for portals.
     * @method
     * @name TweakApi#getTeamMembersByIdPortalsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for portals
     */
    getTeamMembersByIdPortalsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdPortalsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for portals.
     * @method
     * @name TweakApi#deleteTeamMembersByIdPortalsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for portals
     */
    deleteTeamMembersByIdPortalsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdPortalsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for portals.
    * @method
    * @name TweakApi#putTeamMembersByIdPortalsByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for portals
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdPortalsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdPortalsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for portals.
    * @method
    * @name TweakApi#putTeamMembersByIdPortalsRelByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for portals
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdPortalsRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdPortalsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the portals relation to an item by id.
     * @method
     * @name TweakApi#deleteTeamMembersByIdPortalsRelByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for portals
     */
    deleteTeamMembersByIdPortalsRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamMembersByIdPortalsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of portals relation to an item by id.
     * @method
     * @name TweakApi#headTeamMembersByIdPortalsRelByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for portals
     */
    headTeamMembersByIdPortalsRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdInvitationTicketsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/invitationTickets/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for invitationTickets.
     * @method
     * @name TweakApi#getTeamMembersByIdInvitationTicketsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for invitationTickets
     */
    getTeamMembersByIdInvitationTicketsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/invitationTickets/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdInvitationTicketsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/invitationTickets/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for invitationTickets.
     * @method
     * @name TweakApi#deleteTeamMembersByIdInvitationTicketsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for invitationTickets
     */
    deleteTeamMembersByIdInvitationTicketsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/invitationTickets/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdInvitationTicketsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/invitationTickets/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for invitationTickets.
    * @method
    * @name TweakApi#putTeamMembersByIdInvitationTicketsByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for invitationTickets
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdInvitationTicketsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/invitationTickets/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdCommentedDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for commentedDesigns.
     * @method
     * @name TweakApi#getTeamMembersByIdCommentedDesignsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for commentedDesigns
     */
    getTeamMembersByIdCommentedDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdCommentedDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for commentedDesigns.
     * @method
     * @name TweakApi#deleteTeamMembersByIdCommentedDesignsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for commentedDesigns
     */
    deleteTeamMembersByIdCommentedDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdCommentedDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for commentedDesigns.
    * @method
    * @name TweakApi#putTeamMembersByIdCommentedDesignsByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for commentedDesigns
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdCommentedDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdCommentedDesignsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for commentedDesigns.
    * @method
    * @name TweakApi#putTeamMembersByIdCommentedDesignsRelByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for commentedDesigns
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdCommentedDesignsRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdCommentedDesignsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the commentedDesigns relation to an item by id.
     * @method
     * @name TweakApi#deleteTeamMembersByIdCommentedDesignsRelByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for commentedDesigns
     */
    deleteTeamMembersByIdCommentedDesignsRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamMembersByIdCommentedDesignsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of commentedDesigns relation to an item by id.
     * @method
     * @name TweakApi#headTeamMembersByIdCommentedDesignsRelByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for commentedDesigns
     */
    headTeamMembersByIdCommentedDesignsRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdDesignCommentsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designComments/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for designComments.
     * @method
     * @name TweakApi#getTeamMembersByIdDesignCommentsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for designComments
     */
    getTeamMembersByIdDesignCommentsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designComments/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdDesignCommentsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designComments/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for designComments.
     * @method
     * @name TweakApi#deleteTeamMembersByIdDesignCommentsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for designComments
     */
    deleteTeamMembersByIdDesignCommentsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designComments/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdDesignCommentsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designComments/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for designComments.
    * @method
    * @name TweakApi#putTeamMembersByIdDesignCommentsByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for designComments
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdDesignCommentsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designComments/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templates.
     * @method
     * @name TweakApi#getTeamMembersByIdTemplatesByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for templates
     */
    getTeamMembersByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templates.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTemplatesByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for templates
     */
    deleteTeamMembersByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templates.
    * @method
    * @name TweakApi#putTeamMembersByIdTemplatesByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for templates
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdTemplatesRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for templates.
    * @method
    * @name TweakApi#putTeamMembersByIdTemplatesRelByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for templates
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdTemplatesRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTemplatesRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the templates relation to an item by id.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTemplatesRelByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for templates
     */
    deleteTeamMembersByIdTemplatesRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamMembersByIdTemplatesRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of templates relation to an item by id.
     * @method
     * @name TweakApi#headTeamMembersByIdTemplatesRelByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for templates
     */
    headTeamMembersByIdTemplatesRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdRequestedDesignExportsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesignExports/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for requestedDesignExports.
     * @method
     * @name TweakApi#getTeamMembersByIdRequestedDesignExportsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for requestedDesignExports
     */
    getTeamMembersByIdRequestedDesignExportsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesignExports/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdRequestedDesignExportsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesignExports/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for requestedDesignExports.
     * @method
     * @name TweakApi#deleteTeamMembersByIdRequestedDesignExportsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for requestedDesignExports
     */
    deleteTeamMembersByIdRequestedDesignExportsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesignExports/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdRequestedDesignExportsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesignExports/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for requestedDesignExports.
    * @method
    * @name TweakApi#putTeamMembersByIdRequestedDesignExportsByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for requestedDesignExports
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdRequestedDesignExportsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesignExports/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdDesignFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for designFolders.
     * @method
     * @name TweakApi#getTeamMembersByIdDesignFoldersByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for designFolders
     */
    getTeamMembersByIdDesignFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdDesignFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for designFolders.
     * @method
     * @name TweakApi#deleteTeamMembersByIdDesignFoldersByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for designFolders
     */
    deleteTeamMembersByIdDesignFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdDesignFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for designFolders.
    * @method
    * @name TweakApi#putTeamMembersByIdDesignFoldersByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for designFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdDesignFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdWorkflowsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/workflows/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for workflows.
     * @method
     * @name TweakApi#getTeamMembersByIdWorkflowsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for workflows
     */
    getTeamMembersByIdWorkflowsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/workflows/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdWorkflowsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/workflows/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for workflows.
     * @method
     * @name TweakApi#deleteTeamMembersByIdWorkflowsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for workflows
     */
    deleteTeamMembersByIdWorkflowsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/workflows/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdWorkflowsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/workflows/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for workflows.
    * @method
    * @name TweakApi#putTeamMembersByIdWorkflowsByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for workflows
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdWorkflowsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/workflows/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdImageFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for imageFolders.
     * @method
     * @name TweakApi#getTeamMembersByIdImageFoldersByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for imageFolders
     */
    getTeamMembersByIdImageFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdImageFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for imageFolders.
     * @method
     * @name TweakApi#deleteTeamMembersByIdImageFoldersByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for imageFolders
     */
    deleteTeamMembersByIdImageFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdImageFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for imageFolders.
    * @method
    * @name TweakApi#putTeamMembersByIdImageFoldersByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for imageFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdImageFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdImageFoldersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for imageFolders.
    * @method
    * @name TweakApi#putTeamMembersByIdImageFoldersRelByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for imageFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdImageFoldersRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdImageFoldersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the imageFolders relation to an item by id.
     * @method
     * @name TweakApi#deleteTeamMembersByIdImageFoldersRelByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for imageFolders
     */
    deleteTeamMembersByIdImageFoldersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamMembersByIdImageFoldersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of imageFolders relation to an item by id.
     * @method
     * @name TweakApi#headTeamMembersByIdImageFoldersRelByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for imageFolders
     */
    headTeamMembersByIdImageFoldersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdRequestedDesignsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesigns';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries requestedDesigns of TeamMember.
    * @method
    * @name TweakApi#getTeamMembersByIdRequestedDesigns
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdRequestedDesigns(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesigns';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdRequestedDesignsURL(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesigns';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in requestedDesigns of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdRequestedDesigns
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdRequestedDesigns(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesigns';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdRequestedDesignsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesigns';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all requestedDesigns of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdRequestedDesigns
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdRequestedDesigns(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesigns';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdRequestedDesignsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesigns/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts requestedDesigns of TeamMember.
     * @method
     * @name TweakApi#getTeamMembersByIdRequestedDesignsCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdRequestedDesignsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesigns/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdAssignedDesignsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/assignedDesigns';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries assignedDesigns of TeamMember.
    * @method
    * @name TweakApi#getTeamMembersByIdAssignedDesigns
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdAssignedDesigns(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/assignedDesigns';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdAssignedDesignsURL(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/assignedDesigns';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in assignedDesigns of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdAssignedDesigns
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdAssignedDesigns(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/assignedDesigns';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdAssignedDesignsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/assignedDesigns';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all assignedDesigns of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdAssignedDesigns
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdAssignedDesigns(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/assignedDesigns';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdAssignedDesignsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/assignedDesigns/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts assignedDesigns of TeamMember.
     * @method
     * @name TweakApi#getTeamMembersByIdAssignedDesignsCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdAssignedDesignsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/assignedDesigns/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdReviewedDesignsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/reviewedDesigns';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries reviewedDesigns of TeamMember.
    * @method
    * @name TweakApi#getTeamMembersByIdReviewedDesigns
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdReviewedDesigns(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/reviewedDesigns';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdReviewedDesignsURL(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/reviewedDesigns';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in reviewedDesigns of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdReviewedDesigns
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdReviewedDesigns(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/reviewedDesigns';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdReviewedDesignsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/reviewedDesigns';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all reviewedDesigns of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdReviewedDesigns
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdReviewedDesigns(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/reviewedDesigns';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdReviewedDesignsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/reviewedDesigns/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts reviewedDesigns of TeamMember.
     * @method
     * @name TweakApi#getTeamMembersByIdReviewedDesignsCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdReviewedDesignsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/reviewedDesigns/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdUploadedTemplatesURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/uploadedTemplates';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries uploadedTemplates of TeamMember.
    * @method
    * @name TweakApi#getTeamMembersByIdUploadedTemplates
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdUploadedTemplates(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/uploadedTemplates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdUploadedTemplatesURL(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/uploadedTemplates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in uploadedTemplates of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdUploadedTemplates
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdUploadedTemplates(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/uploadedTemplates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdUploadedTemplatesURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/uploadedTemplates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all uploadedTemplates of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdUploadedTemplates
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdUploadedTemplates(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/uploadedTemplates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdUploadedTemplatesCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/uploadedTemplates/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts uploadedTemplates of TeamMember.
     * @method
     * @name TweakApi#getTeamMembersByIdUploadedTemplatesCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdUploadedTemplatesCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/uploadedTemplates/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdPortalsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries portals of TeamMember.
    * @method
    * @name TweakApi#getTeamMembersByIdPortals
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdPortals(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdPortalsURL(parameters: {
        'id': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in portals of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdPortals
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdPortals(parameters: {
        'id': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdPortalsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all portals of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdPortals
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdPortals(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdPortalsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts portals of TeamMember.
     * @method
     * @name TweakApi#getTeamMembersByIdPortalsCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdPortalsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdInvitationTicketsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/invitationTickets';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries invitationTickets of TeamMember.
    * @method
    * @name TweakApi#getTeamMembersByIdInvitationTickets
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdInvitationTickets(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/invitationTickets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdInvitationTicketsURL(parameters: {
        'id': string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/invitationTickets';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in invitationTickets of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdInvitationTickets
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdInvitationTickets(parameters: {
        'id': string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/invitationTickets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdInvitationTicketsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/invitationTickets';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all invitationTickets of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdInvitationTickets
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdInvitationTickets(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/invitationTickets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdInvitationTicketsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/invitationTickets/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts invitationTickets of TeamMember.
     * @method
     * @name TweakApi#getTeamMembersByIdInvitationTicketsCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdInvitationTicketsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/invitationTickets/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdCommentedDesignsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries commentedDesigns of TeamMember.
    * @method
    * @name TweakApi#getTeamMembersByIdCommentedDesigns
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdCommentedDesigns(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdCommentedDesignsURL(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in commentedDesigns of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdCommentedDesigns
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdCommentedDesigns(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdCommentedDesignsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all commentedDesigns of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdCommentedDesigns
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdCommentedDesigns(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdCommentedDesignsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts commentedDesigns of TeamMember.
     * @method
     * @name TweakApi#getTeamMembersByIdCommentedDesignsCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdCommentedDesignsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/commentedDesigns/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdDesignCommentsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designComments';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries designComments of TeamMember.
    * @method
    * @name TweakApi#getTeamMembersByIdDesignComments
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdDesignComments(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designComments';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdDesignCommentsURL(parameters: {
        'id': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designComments';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in designComments of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdDesignComments
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdDesignComments(parameters: {
        'id': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designComments';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdDesignCommentsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designComments';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all designComments of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdDesignComments
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdDesignComments(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designComments';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdDesignCommentsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designComments/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts designComments of TeamMember.
     * @method
     * @name TweakApi#getTeamMembersByIdDesignCommentsCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdDesignCommentsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designComments/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTemplatesURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templates of TeamMember.
    * @method
    * @name TweakApi#getTeamMembersByIdTemplates
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdTemplates(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdTemplatesURL(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templates of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdTemplates
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdTemplates(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTemplatesURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templates of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTemplates
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdTemplates(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTemplatesCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templates of TeamMember.
     * @method
     * @name TweakApi#getTeamMembersByIdTemplatesCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdTemplatesCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/templates/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdRequestedDesignExportsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesignExports';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries requestedDesignExports of TeamMember.
    * @method
    * @name TweakApi#getTeamMembersByIdRequestedDesignExports
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdRequestedDesignExports(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesignExports';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdRequestedDesignExportsURL(parameters: {
        'id': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesignExports';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in requestedDesignExports of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdRequestedDesignExports
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdRequestedDesignExports(parameters: {
        'id': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesignExports';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdRequestedDesignExportsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesignExports';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all requestedDesignExports of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdRequestedDesignExports
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdRequestedDesignExports(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesignExports';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdRequestedDesignExportsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesignExports/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts requestedDesignExports of TeamMember.
     * @method
     * @name TweakApi#getTeamMembersByIdRequestedDesignExportsCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdRequestedDesignExportsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/requestedDesignExports/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdDesignFoldersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designFolders';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries designFolders of TeamMember.
    * @method
    * @name TweakApi#getTeamMembersByIdDesignFolders
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdDesignFolders(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdDesignFoldersURL(parameters: {
        'id': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in designFolders of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdDesignFolders
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdDesignFolders(parameters: {
        'id': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdDesignFoldersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all designFolders of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdDesignFolders
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdDesignFolders(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdDesignFoldersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designFolders/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts designFolders of TeamMember.
     * @method
     * @name TweakApi#getTeamMembersByIdDesignFoldersCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdDesignFoldersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/designFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdWorkflowsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/workflows';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries workflows of TeamMember.
    * @method
    * @name TweakApi#getTeamMembersByIdWorkflows
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdWorkflows(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/workflows';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdWorkflowsURL(parameters: {
        'id': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/workflows';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in workflows of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdWorkflows
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdWorkflows(parameters: {
        'id': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/workflows';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdWorkflowsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/workflows';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all workflows of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdWorkflows
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdWorkflows(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/workflows';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdWorkflowsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/workflows/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts workflows of TeamMember.
     * @method
     * @name TweakApi#getTeamMembersByIdWorkflowsCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdWorkflowsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/workflows/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdImageFoldersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries imageFolders of TeamMember.
    * @method
    * @name TweakApi#getTeamMembersByIdImageFolders
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdImageFolders(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdImageFoldersURL(parameters: {
        'id': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in imageFolders of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdImageFolders
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdImageFolders(parameters: {
        'id': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdImageFoldersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all imageFolders of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdImageFolders
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdImageFolders(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdImageFoldersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts imageFolders of TeamMember.
     * @method
     * @name TweakApi#getTeamMembersByIdImageFoldersCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdImageFoldersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/imageFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersURL(parameters: {
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postTeamMembers
     * @param {} data - Model instance data
     */
    postTeamMembers(parameters: {
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchTeamMembersURL(parameters: {
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchTeamMembers
     * @param {} data - Model instance data
     */
    patchTeamMembers(parameters: {
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersURL(parameters: {
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putTeamMembers
     * @param {} data - Model instance data
     */
    putTeamMembers(parameters: {
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getTeamMembers
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getTeamMembers(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersReplaceOrCreateURL(parameters: {
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postTeamMembersReplaceOrCreate
     * @param {} data - Model instance data
     */
    postTeamMembersReplaceOrCreate(parameters: {
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postTeamMembersUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postTeamMembersUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getTeamMembersByIdExists
     * @param {string} id - Model id
     */
    getTeamMembersByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamMembersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headTeamMembersById
     * @param {string} id - Model id
     */
    headTeamMembersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getTeamMembersById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getTeamMembersById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdURL(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putTeamMembersById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putTeamMembersById(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteTeamMembersById
     * @param {string} id - Model id
     */
    deleteTeamMembersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchTeamMembersByIdURL(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchTeamMembersById
     * @param {string} id - TeamMember id
     * @param {} data - An object of model property name/value pairs
     */
    patchTeamMembersById(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postTeamMembersByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postTeamMembersByIdReplace(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getTeamMembersFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getTeamMembersFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postTeamMembersUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postTeamMembersUpdate(parameters: {
        'where' ? : string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getTeamMembersCount
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postTeamMembersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getTeamMembersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdInviteByInviteeURL(parameters: {
        'id': string,
        'id': string,
        'invitee': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/invite/{invitee}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{invitee}', `${parameters['invitee']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Invite somebody to join the team
    * @method
    * @name TweakApi#postTeamMembersByIdInviteByInvitee
         * @param {string} id - TeamMember id
         * @param {string} id - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {string} invitee - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdInviteByInvitee(parameters: {
        'id': string,
        'id': string,
        'invitee': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/invite/{invitee}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{invitee}', `${parameters['invitee']}`);

            if (parameters['invitee'] === undefined) {
                reject(new Error('Missing required  parameter: invitee'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdByTargetModelByTargetIdInviteByInviteeURL(parameters: {
        'id': string,
        'id': string,
        'targetModel': string,
        'targetId': string,
        'invitee': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/{targetModel}/{targetId}/invite/{invitee}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{targetModel}', `${parameters['targetModel']}`);

        path = path.replace('{targetId}', `${parameters['targetId']}`);

        path = path.replace('{invitee}', `${parameters['invitee']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Invite somebody to join a team, portal or other targets
    * @method
    * @name TweakApi#postTeamMembersByIdByTargetModelByTargetIdInviteByInvitee
         * @param {string} id - TeamMember id
         * @param {string} id - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {string} targetModel - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {string} targetId - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {string} invitee - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdByTargetModelByTargetIdInviteByInvitee(parameters: {
        'id': string,
        'id': string,
        'targetModel': string,
        'targetId': string,
        'invitee': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/{targetModel}/{targetId}/invite/{invitee}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{targetModel}', `${parameters['targetModel']}`);

            if (parameters['targetModel'] === undefined) {
                reject(new Error('Missing required  parameter: targetModel'));
                return;
            }

            path = path.replace('{targetId}', `${parameters['targetId']}`);

            if (parameters['targetId'] === undefined) {
                reject(new Error('Missing required  parameter: targetId'));
                return;
            }

            path = path.replace('{invitee}', `${parameters['invitee']}`);

            if (parameters['invitee'] === undefined) {
                reject(new Error('Missing required  parameter: invitee'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdByTargetModelByTargetIdInviteURL(parameters: {
        'id': string,
        'id': string,
        'targetModel': string,
        'targetId': string,
        'data' ? : Array < x - any >
            | x - any

            ,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/{targetModel}/{targetId}/invite';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{targetModel}', `${parameters['targetModel']}`);

        path = path.replace('{targetId}', `${parameters['targetId']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Invite a group of people to join a team, portal or other targets
    * @method
    * @name TweakApi#postTeamMembersByIdByTargetModelByTargetIdInvite
         * @param {string} id - TeamMember id
         * @param {string} id - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {string} targetModel - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {string} targetId - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdByTargetModelByTargetIdInvite(parameters: {
        'id': string,
        'id': string,
        'targetModel': string,
        'targetId': string,
        'data' ? : Array < x - any >
            | x - any

            ,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/{targetModel}/{targetId}/invite';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{targetModel}', `${parameters['targetModel']}`);

            if (parameters['targetModel'] === undefined) {
                reject(new Error('Missing required  parameter: targetModel'));
                return;
            }

            path = path.replace('{targetId}', `${parameters['targetId']}`);

            if (parameters['targetId'] === undefined) {
                reject(new Error('Missing required  parameter: targetId'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdPortalsAvailableURL(parameters: {
        'id': string,
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals/available';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Find all available Portals
    * @method
    * @name TweakApi#getTeamMembersByIdPortalsAvailable
         * @param {string} id - TeamMember id
         * @param {string} id - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
    */
    getTeamMembersByIdPortalsAvailable(parameters: {
        'id': string,
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/portals/available';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamBrandURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/brand';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches hasOne relation brand.
    * @method
    * @name TweakApi#getTeamMembersByIdTeamBrand
         * @param {string} id - TeamMember id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdTeamBrand(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/brand';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdTeamBrandURL(parameters: {
        'id': string,
        'data' ? : TeamBrand,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/brand';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in brand of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdTeamBrand
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdTeamBrand(parameters: {
        'id': string,
        'data' ? : TeamBrand,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/brand';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdTeamBrandURL(parameters: {
        'id': string,
        'data' ? : TeamBrand,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/brand';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update brand of this model.
    * @method
    * @name TweakApi#putTeamMembersByIdTeamBrand
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdTeamBrand(parameters: {
        'id': string,
        'data' ? : TeamBrand,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/brand';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamBrandURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/brand';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes brand of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamBrand
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdTeamBrand(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/brand';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for members.
     * @method
     * @name TweakApi#getTeamMembersByIdTeamMembersByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for members
     */
    getTeamMembersByIdTeamMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for members.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamMembersByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for members
     */
    deleteTeamMembersByIdTeamMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdTeamMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for members.
    * @method
    * @name TweakApi#putTeamMembersByIdTeamMembersByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdTeamMembersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdTeamMembersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for members.
    * @method
    * @name TweakApi#putTeamMembersByIdTeamMembersRelByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdTeamMembersRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamMembersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the members relation to an item by id.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamMembersRelByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for members
     */
    deleteTeamMembersByIdTeamMembersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamMembersByIdTeamMembersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of members relation to an item by id.
     * @method
     * @name TweakApi#headTeamMembersByIdTeamMembersRelByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for members
     */
    headTeamMembersByIdTeamMembersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamTeamMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/teamMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for teamMembers.
     * @method
     * @name TweakApi#getTeamMembersByIdTeamTeamMembersByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for teamMembers
     */
    getTeamMembersByIdTeamTeamMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/teamMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamTeamMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/teamMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for teamMembers.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamTeamMembersByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for teamMembers
     */
    deleteTeamMembersByIdTeamTeamMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/teamMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdTeamTeamMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/teamMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for teamMembers.
    * @method
    * @name TweakApi#putTeamMembersByIdTeamTeamMembersByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for teamMembers
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdTeamTeamMembersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/teamMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templates.
     * @method
     * @name TweakApi#getTeamMembersByIdTeamTemplatesByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for templates
     */
    getTeamMembersByIdTeamTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templates.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamTemplatesByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for templates
     */
    deleteTeamMembersByIdTeamTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdTeamTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templates.
    * @method
    * @name TweakApi#putTeamMembersByIdTeamTemplatesByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for templates
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdTeamTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamPortalsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for portals.
     * @method
     * @name TweakApi#getTeamMembersByIdTeamPortalsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for portals
     */
    getTeamMembersByIdTeamPortalsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamPortalsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for portals.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamPortalsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for portals
     */
    deleteTeamMembersByIdTeamPortalsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdTeamPortalsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for portals.
    * @method
    * @name TweakApi#putTeamMembersByIdTeamPortalsByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for portals
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdTeamPortalsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamImagesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/images/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for images.
     * @method
     * @name TweakApi#getTeamMembersByIdTeamImagesByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for images
     */
    getTeamMembersByIdTeamImagesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/images/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamImagesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/images/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for images.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamImagesByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for images
     */
    deleteTeamMembersByIdTeamImagesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/images/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdTeamImagesByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/images/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for images.
    * @method
    * @name TweakApi#putTeamMembersByIdTeamImagesByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for images
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdTeamImagesByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/images/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamTemplateFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templateFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templateFolders.
     * @method
     * @name TweakApi#getTeamMembersByIdTeamTemplateFoldersByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for templateFolders
     */
    getTeamMembersByIdTeamTemplateFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templateFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamTemplateFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templateFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templateFolders.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamTemplateFoldersByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for templateFolders
     */
    deleteTeamMembersByIdTeamTemplateFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templateFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdTeamTemplateFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templateFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templateFolders.
    * @method
    * @name TweakApi#putTeamMembersByIdTeamTemplateFoldersByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for templateFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdTeamTemplateFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templateFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamWorkflowsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/workflows/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for workflows.
     * @method
     * @name TweakApi#getTeamMembersByIdTeamWorkflowsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for workflows
     */
    getTeamMembersByIdTeamWorkflowsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/workflows/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamWorkflowsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/workflows/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for workflows.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamWorkflowsByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for workflows
     */
    deleteTeamMembersByIdTeamWorkflowsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/workflows/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdTeamWorkflowsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/workflows/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for workflows.
    * @method
    * @name TweakApi#putTeamMembersByIdTeamWorkflowsByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for workflows
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdTeamWorkflowsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/workflows/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamImageFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for imageFolders.
     * @method
     * @name TweakApi#getTeamMembersByIdTeamImageFoldersByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for imageFolders
     */
    getTeamMembersByIdTeamImageFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamImageFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for imageFolders.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamImageFoldersByFk
     * @param {string} id - TeamMember id
     * @param {string} fk - Foreign key for imageFolders
     */
    deleteTeamMembersByIdTeamImageFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamMembersByIdTeamImageFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for imageFolders.
    * @method
    * @name TweakApi#putTeamMembersByIdTeamImageFoldersByFk
         * @param {string} id - TeamMember id
         * @param {string} fk - Foreign key for imageFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamMembersByIdTeamImageFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamMembersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries members of Team.
    * @method
    * @name TweakApi#getTeamMembersByIdTeamMembers
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdTeamMembers(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdTeamMembersURL(parameters: {
        'id': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in members of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdTeamMembers
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdTeamMembers(parameters: {
        'id': string,
        'data' ? : Customer,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamMembersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all members of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamMembers
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdTeamMembers(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamMembersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts members of Team.
     * @method
     * @name TweakApi#getTeamMembersByIdTeamMembersCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdTeamMembersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/members/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamTeamMembersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/teamMembers';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries teamMembers of Team.
    * @method
    * @name TweakApi#getTeamMembersByIdTeamTeamMembers
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdTeamTeamMembers(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/teamMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdTeamTeamMembersURL(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/teamMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in teamMembers of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdTeamTeamMembers
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdTeamTeamMembers(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/teamMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamTeamMembersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/teamMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all teamMembers of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamTeamMembers
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdTeamTeamMembers(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/teamMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamTeamMembersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/teamMembers/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts teamMembers of Team.
     * @method
     * @name TweakApi#getTeamMembersByIdTeamTeamMembersCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdTeamTeamMembersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/teamMembers/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamTemplatesURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templates';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templates of Team.
    * @method
    * @name TweakApi#getTeamMembersByIdTeamTemplates
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdTeamTemplates(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdTeamTemplatesURL(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templates of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdTeamTemplates
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdTeamTemplates(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamTemplatesURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templates of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamTemplates
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdTeamTemplates(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamTemplatesCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templates/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templates of Team.
     * @method
     * @name TweakApi#getTeamMembersByIdTeamTemplatesCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdTeamTemplatesCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templates/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamPortalsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/portals';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries portals of Team.
    * @method
    * @name TweakApi#getTeamMembersByIdTeamPortals
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdTeamPortals(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdTeamPortalsURL(parameters: {
        'id': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in portals of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdTeamPortals
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdTeamPortals(parameters: {
        'id': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamPortalsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all portals of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamPortals
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdTeamPortals(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamPortalsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/portals/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts portals of Team.
     * @method
     * @name TweakApi#getTeamMembersByIdTeamPortalsCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdTeamPortalsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/portals/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamImagesURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/images';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries images of Team.
    * @method
    * @name TweakApi#getTeamMembersByIdTeamImages
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdTeamImages(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdTeamImagesURL(parameters: {
        'id': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/images';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in images of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdTeamImages
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdTeamImages(parameters: {
        'id': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamImagesURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/images';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all images of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamImages
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdTeamImages(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamImagesCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/images/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts images of Team.
     * @method
     * @name TweakApi#getTeamMembersByIdTeamImagesCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdTeamImagesCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/images/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamTemplateFoldersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templateFolders';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templateFolders of Team.
    * @method
    * @name TweakApi#getTeamMembersByIdTeamTemplateFolders
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdTeamTemplateFolders(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdTeamTemplateFoldersURL(parameters: {
        'id': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templateFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templateFolders of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdTeamTemplateFolders
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdTeamTemplateFolders(parameters: {
        'id': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamTemplateFoldersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templateFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templateFolders of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamTemplateFolders
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdTeamTemplateFolders(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamTemplateFoldersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templateFolders/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templateFolders of Team.
     * @method
     * @name TweakApi#getTeamMembersByIdTeamTemplateFoldersCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdTeamTemplateFoldersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/templateFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamWorkflowsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/workflows';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries workflows of Team.
    * @method
    * @name TweakApi#getTeamMembersByIdTeamWorkflows
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdTeamWorkflows(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/workflows';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdTeamWorkflowsURL(parameters: {
        'id': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/workflows';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in workflows of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdTeamWorkflows
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdTeamWorkflows(parameters: {
        'id': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/workflows';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamWorkflowsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/workflows';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all workflows of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamWorkflows
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdTeamWorkflows(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/workflows';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamWorkflowsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/workflows/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts workflows of Team.
     * @method
     * @name TweakApi#getTeamMembersByIdTeamWorkflowsCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdTeamWorkflowsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/workflows/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamImageFoldersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries imageFolders of Team.
    * @method
    * @name TweakApi#getTeamMembersByIdTeamImageFolders
         * @param {string} id - TeamMember id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamMembersByIdTeamImageFolders(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamMembersByIdTeamImageFoldersURL(parameters: {
        'id': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in imageFolders of this model.
    * @method
    * @name TweakApi#postTeamMembersByIdTeamImageFolders
         * @param {string} id - TeamMember id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamMembersByIdTeamImageFolders(parameters: {
        'id': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamMembersByIdTeamImageFoldersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all imageFolders of this model.
     * @method
     * @name TweakApi#deleteTeamMembersByIdTeamImageFolders
     * @param {string} id - TeamMember id
     */
    deleteTeamMembersByIdTeamImageFolders(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamMembersByIdTeamImageFoldersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/imageFolders/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts imageFolders of Team.
     * @method
     * @name TweakApi#getTeamMembersByIdTeamImageFoldersCount
     * @param {string} id - TeamMember id
     * @param {string} where - Criteria to match model instances
     */
    getTeamMembersByIdTeamImageFoldersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamMembers/{id}/team/imageFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdTeamURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/team';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation team.
    * @method
    * @name TweakApi#getTemplatesByIdTeam
         * @param {string} id - Template id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplatesByIdTeam(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/team';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for designs.
     * @method
     * @name TweakApi#getTemplatesByIdDesignsByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for designs
     */
    getTemplatesByIdDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for designs.
     * @method
     * @name TweakApi#deleteTemplatesByIdDesignsByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for designs
     */
    deleteTemplatesByIdDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplatesByIdDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for designs.
    * @method
    * @name TweakApi#putTemplatesByIdDesignsByFk
         * @param {string} id - Template id
         * @param {string} fk - Foreign key for designs
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTemplatesByIdDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdUploaderURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/uploader';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation uploader.
    * @method
    * @name TweakApi#getTemplatesByIdUploader
         * @param {string} id - Template id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplatesByIdUploader(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/uploader';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdPermissionURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/permission';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches hasOne relation permission.
    * @method
    * @name TweakApi#getTemplatesByIdPermission
         * @param {string} id - Template id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplatesByIdPermission(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatesByIdPermissionURL(parameters: {
        'id': string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/permission';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in permission of this model.
    * @method
    * @name TweakApi#postTemplatesByIdPermission
         * @param {string} id - Template id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTemplatesByIdPermission(parameters: {
        'id': string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplatesByIdPermissionURL(parameters: {
        'id': string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/permission';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update permission of this model.
    * @method
    * @name TweakApi#putTemplatesByIdPermission
         * @param {string} id - Template id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTemplatesByIdPermission(parameters: {
        'id': string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdPermissionURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/permission';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes permission of this model.
     * @method
     * @name TweakApi#deleteTemplatesByIdPermission
     * @param {string} id - Template id
     */
    deleteTemplatesByIdPermission(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdPortalsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for portals.
     * @method
     * @name TweakApi#getTemplatesByIdPortalsByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for portals
     */
    getTemplatesByIdPortalsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdPortalsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for portals.
     * @method
     * @name TweakApi#deleteTemplatesByIdPortalsByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for portals
     */
    deleteTemplatesByIdPortalsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplatesByIdPortalsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for portals.
    * @method
    * @name TweakApi#putTemplatesByIdPortalsByFk
         * @param {string} id - Template id
         * @param {string} fk - Foreign key for portals
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTemplatesByIdPortalsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplatesByIdPortalsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for portals.
    * @method
    * @name TweakApi#putTemplatesByIdPortalsRelByFk
         * @param {string} id - Template id
         * @param {string} fk - Foreign key for portals
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTemplatesByIdPortalsRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdPortalsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the portals relation to an item by id.
     * @method
     * @name TweakApi#deleteTemplatesByIdPortalsRelByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for portals
     */
    deleteTemplatesByIdPortalsRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTemplatesByIdPortalsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of portals relation to an item by id.
     * @method
     * @name TweakApi#headTemplatesByIdPortalsRelByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for portals
     */
    headTemplatesByIdPortalsRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for members.
     * @method
     * @name TweakApi#getTemplatesByIdMembersByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for members
     */
    getTemplatesByIdMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for members.
     * @method
     * @name TweakApi#deleteTemplatesByIdMembersByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for members
     */
    deleteTemplatesByIdMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplatesByIdMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for members.
    * @method
    * @name TweakApi#putTemplatesByIdMembersByFk
         * @param {string} id - Template id
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTemplatesByIdMembersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplatesByIdMembersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for members.
    * @method
    * @name TweakApi#putTemplatesByIdMembersRelByFk
         * @param {string} id - Template id
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTemplatesByIdMembersRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdMembersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the members relation to an item by id.
     * @method
     * @name TweakApi#deleteTemplatesByIdMembersRelByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for members
     */
    deleteTemplatesByIdMembersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTemplatesByIdMembersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of members relation to an item by id.
     * @method
     * @name TweakApi#headTemplatesByIdMembersRelByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for members
     */
    headTemplatesByIdMembersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdTemplateMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/templateMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templateMembers.
     * @method
     * @name TweakApi#getTemplatesByIdTemplateMembersByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for templateMembers
     */
    getTemplatesByIdTemplateMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/templateMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdTemplateMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/templateMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templateMembers.
     * @method
     * @name TweakApi#deleteTemplatesByIdTemplateMembersByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for templateMembers
     */
    deleteTemplatesByIdTemplateMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/templateMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplatesByIdTemplateMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/templateMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templateMembers.
    * @method
    * @name TweakApi#putTemplatesByIdTemplateMembersByFk
         * @param {string} id - Template id
         * @param {string} fk - Foreign key for templateMembers
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTemplatesByIdTemplateMembersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/templateMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdTagsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for tags.
     * @method
     * @name TweakApi#getTemplatesByIdTagsByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for tags
     */
    getTemplatesByIdTagsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdTagsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for tags.
     * @method
     * @name TweakApi#deleteTemplatesByIdTagsByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for tags
     */
    deleteTemplatesByIdTagsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplatesByIdTagsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for tags.
    * @method
    * @name TweakApi#putTemplatesByIdTagsByFk
         * @param {string} id - Template id
         * @param {string} fk - Foreign key for tags
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTemplatesByIdTagsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplatesByIdTagsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for tags.
    * @method
    * @name TweakApi#putTemplatesByIdTagsRelByFk
         * @param {string} id - Template id
         * @param {string} fk - Foreign key for tags
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTemplatesByIdTagsRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdTagsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the tags relation to an item by id.
     * @method
     * @name TweakApi#deleteTemplatesByIdTagsRelByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for tags
     */
    deleteTemplatesByIdTagsRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTemplatesByIdTagsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of tags relation to an item by id.
     * @method
     * @name TweakApi#headTemplatesByIdTagsRelByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for tags
     */
    headTemplatesByIdTagsRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdTeamFolderURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/teamFolder';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation teamFolder.
    * @method
    * @name TweakApi#getTemplatesByIdTeamFolder
         * @param {string} id - Template id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplatesByIdTeamFolder(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/teamFolder';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdPortalFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for portalFolders.
     * @method
     * @name TweakApi#getTemplatesByIdPortalFoldersByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for portalFolders
     */
    getTemplatesByIdPortalFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdPortalFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for portalFolders.
     * @method
     * @name TweakApi#deleteTemplatesByIdPortalFoldersByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for portalFolders
     */
    deleteTemplatesByIdPortalFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplatesByIdPortalFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for portalFolders.
    * @method
    * @name TweakApi#putTemplatesByIdPortalFoldersByFk
         * @param {string} id - Template id
         * @param {string} fk - Foreign key for portalFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTemplatesByIdPortalFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplatesByIdPortalFoldersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for portalFolders.
    * @method
    * @name TweakApi#putTemplatesByIdPortalFoldersRelByFk
         * @param {string} id - Template id
         * @param {string} fk - Foreign key for portalFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTemplatesByIdPortalFoldersRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdPortalFoldersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the portalFolders relation to an item by id.
     * @method
     * @name TweakApi#deleteTemplatesByIdPortalFoldersRelByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for portalFolders
     */
    deleteTemplatesByIdPortalFoldersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTemplatesByIdPortalFoldersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of portalFolders relation to an item by id.
     * @method
     * @name TweakApi#headTemplatesByIdPortalFoldersRelByFk
     * @param {string} id - Template id
     * @param {string} fk - Foreign key for portalFolders
     */
    headTemplatesByIdPortalFoldersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdWorkflowURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/workflow';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation workflow.
    * @method
    * @name TweakApi#getTemplatesByIdWorkflow
         * @param {string} id - Template id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplatesByIdWorkflow(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/workflow';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdDesignsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/designs';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries designs of Template.
    * @method
    * @name TweakApi#getTemplatesByIdDesigns
         * @param {string} id - Template id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplatesByIdDesigns(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatesByIdDesignsURL(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/designs';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in designs of this model.
    * @method
    * @name TweakApi#postTemplatesByIdDesigns
         * @param {string} id - Template id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTemplatesByIdDesigns(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdDesignsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/designs';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all designs of this model.
     * @method
     * @name TweakApi#deleteTemplatesByIdDesigns
     * @param {string} id - Template id
     */
    deleteTemplatesByIdDesigns(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdDesignsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/designs/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts designs of Template.
     * @method
     * @name TweakApi#getTemplatesByIdDesignsCount
     * @param {string} id - Template id
     * @param {string} where - Criteria to match model instances
     */
    getTemplatesByIdDesignsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/designs/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdPortalsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries portals of Template.
    * @method
    * @name TweakApi#getTemplatesByIdPortals
         * @param {string} id - Template id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplatesByIdPortals(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatesByIdPortalsURL(parameters: {
        'id': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in portals of this model.
    * @method
    * @name TweakApi#postTemplatesByIdPortals
         * @param {string} id - Template id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTemplatesByIdPortals(parameters: {
        'id': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdPortalsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all portals of this model.
     * @method
     * @name TweakApi#deleteTemplatesByIdPortals
     * @param {string} id - Template id
     */
    deleteTemplatesByIdPortals(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdPortalsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts portals of Template.
     * @method
     * @name TweakApi#getTemplatesByIdPortalsCount
     * @param {string} id - Template id
     * @param {string} where - Criteria to match model instances
     */
    getTemplatesByIdPortalsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portals/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdMembersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries members of Template.
    * @method
    * @name TweakApi#getTemplatesByIdMembers
         * @param {string} id - Template id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplatesByIdMembers(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatesByIdMembersURL(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in members of this model.
    * @method
    * @name TweakApi#postTemplatesByIdMembers
         * @param {string} id - Template id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTemplatesByIdMembers(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdMembersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all members of this model.
     * @method
     * @name TweakApi#deleteTemplatesByIdMembers
     * @param {string} id - Template id
     */
    deleteTemplatesByIdMembers(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdMembersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts members of Template.
     * @method
     * @name TweakApi#getTemplatesByIdMembersCount
     * @param {string} id - Template id
     * @param {string} where - Criteria to match model instances
     */
    getTemplatesByIdMembersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/members/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdTemplateMembersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/templateMembers';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templateMembers of Template.
    * @method
    * @name TweakApi#getTemplatesByIdTemplateMembers
         * @param {string} id - Template id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplatesByIdTemplateMembers(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/templateMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatesByIdTemplateMembersURL(parameters: {
        'id': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/templateMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templateMembers of this model.
    * @method
    * @name TweakApi#postTemplatesByIdTemplateMembers
         * @param {string} id - Template id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTemplatesByIdTemplateMembers(parameters: {
        'id': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/templateMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdTemplateMembersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/templateMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templateMembers of this model.
     * @method
     * @name TweakApi#deleteTemplatesByIdTemplateMembers
     * @param {string} id - Template id
     */
    deleteTemplatesByIdTemplateMembers(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/templateMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdTemplateMembersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/templateMembers/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templateMembers of Template.
     * @method
     * @name TweakApi#getTemplatesByIdTemplateMembersCount
     * @param {string} id - Template id
     * @param {string} where - Criteria to match model instances
     */
    getTemplatesByIdTemplateMembersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/templateMembers/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdTagsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries tags of Template.
    * @method
    * @name TweakApi#getTemplatesByIdTags
         * @param {string} id - Template id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplatesByIdTags(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatesByIdTagsURL(parameters: {
        'id': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in tags of this model.
    * @method
    * @name TweakApi#postTemplatesByIdTags
         * @param {string} id - Template id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTemplatesByIdTags(parameters: {
        'id': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdTagsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all tags of this model.
     * @method
     * @name TweakApi#deleteTemplatesByIdTags
     * @param {string} id - Template id
     */
    deleteTemplatesByIdTags(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdTagsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts tags of Template.
     * @method
     * @name TweakApi#getTemplatesByIdTagsCount
     * @param {string} id - Template id
     * @param {string} where - Criteria to match model instances
     */
    getTemplatesByIdTagsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/tags/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdPortalFoldersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries portalFolders of Template.
    * @method
    * @name TweakApi#getTemplatesByIdPortalFolders
         * @param {string} id - Template id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplatesByIdPortalFolders(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatesByIdPortalFoldersURL(parameters: {
        'id': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in portalFolders of this model.
    * @method
    * @name TweakApi#postTemplatesByIdPortalFolders
         * @param {string} id - Template id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTemplatesByIdPortalFolders(parameters: {
        'id': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdPortalFoldersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all portalFolders of this model.
     * @method
     * @name TweakApi#deleteTemplatesByIdPortalFolders
     * @param {string} id - Template id
     */
    deleteTemplatesByIdPortalFolders(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdPortalFoldersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts portalFolders of Template.
     * @method
     * @name TweakApi#getTemplatesByIdPortalFoldersCount
     * @param {string} id - Template id
     * @param {string} where - Criteria to match model instances
     */
    getTemplatesByIdPortalFoldersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/portalFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatesURL(parameters: {
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postTemplates
     * @param {} data - Model instance data
     */
    postTemplates(parameters: {
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchTemplatesURL(parameters: {
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchTemplates
     * @param {} data - Model instance data
     */
    patchTemplates(parameters: {
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplatesURL(parameters: {
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putTemplates
     * @param {} data - Model instance data
     */
    putTemplates(parameters: {
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getTemplates
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getTemplates(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatesReplaceOrCreateURL(parameters: {
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postTemplatesReplaceOrCreate
     * @param {} data - Model instance data
     */
    postTemplatesReplaceOrCreate(parameters: {
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatesUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postTemplatesUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postTemplatesUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getTemplatesByIdExists
     * @param {string} id - Model id
     */
    getTemplatesByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTemplatesByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headTemplatesById
     * @param {string} id - Model id
     */
    headTemplatesById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getTemplatesById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getTemplatesById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplatesByIdURL(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putTemplatesById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putTemplatesById(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteTemplatesById
     * @param {string} id - Model id
     */
    deleteTemplatesById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchTemplatesByIdURL(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchTemplatesById
     * @param {string} id - Template id
     * @param {} data - An object of model property name/value pairs
     */
    patchTemplatesById(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatesByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postTemplatesByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postTemplatesByIdReplace(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getTemplatesFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getTemplatesFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatesUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postTemplatesUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postTemplatesUpdate(parameters: {
        'where' ? : string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getTemplatesCount
     * @param {string} where - Criteria to match model instances
     */
    getTemplatesCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatesChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postTemplatesChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTemplatesChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getTemplatesChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplatesChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdInvitationTicketsURL(parameters: {
        'id': string,
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/invitationTickets';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * List InvitationTickets for this Template
     * @method
     * @name TweakApi#getTemplatesByIdInvitationTickets
     * @param {string} id - Template id
     * @param {string} id - Template id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getTemplatesByIdInvitationTickets(parameters: {
        'id': string,
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/invitationTickets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatesByIdInvitationTicketsByFkURL(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/invitationTickets/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Get InvitationTicket by Id for this Template
     * @method
     * @name TweakApi#getTemplatesByIdInvitationTicketsByFk
     * @param {string} id - Template id
     * @param {string} id - Template id
     * @param {string} fk - InvitationTicket id
     * @param {string} filter - Only include changes that match this filter
     */
    getTemplatesByIdInvitationTicketsByFk(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/invitationTickets/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatesByIdInvitationTicketsByFkURL(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/invitationTickets/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete InvitationTickets for this Template
     * @method
     * @name TweakApi#deleteTemplatesByIdInvitationTicketsByFk
     * @param {string} id - Template id
     * @param {string} id - Template id
     * @param {string} fk - InvitationTicket id
     */
    deleteTemplatesByIdInvitationTicketsByFk(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/invitationTickets/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatesByIdDesignsGenerateURL(parameters: {
        'id': string,
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/designs/generate';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Generate design from template
    * @method
    * @name TweakApi#postTemplatesByIdDesignsGenerate
         * @param {string} id - Template id
         * @param {string} id - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTemplatesByIdDesignsGenerate(parameters: {
        'id': string,
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Templates/{id}/designs/generate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatePermissionSetsByIdTemplateURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/{id}/template';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation template.
    * @method
    * @name TweakApi#getTemplatePermissionSetsByIdTemplate
         * @param {string} id - TemplatePermissionSet id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplatePermissionSetsByIdTemplate(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/{id}/template';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatePermissionSetsURL(parameters: {
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postTemplatePermissionSets
     * @param {} data - Model instance data
     */
    postTemplatePermissionSets(parameters: {
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchTemplatePermissionSetsURL(parameters: {
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchTemplatePermissionSets
     * @param {} data - Model instance data
     */
    patchTemplatePermissionSets(parameters: {
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplatePermissionSetsURL(parameters: {
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putTemplatePermissionSets
     * @param {} data - Model instance data
     */
    putTemplatePermissionSets(parameters: {
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatePermissionSetsURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getTemplatePermissionSets
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getTemplatePermissionSets(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatePermissionSetsReplaceOrCreateURL(parameters: {
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postTemplatePermissionSetsReplaceOrCreate
     * @param {} data - Model instance data
     */
    postTemplatePermissionSetsReplaceOrCreate(parameters: {
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatePermissionSetsUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postTemplatePermissionSetsUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postTemplatePermissionSetsUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatePermissionSetsByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getTemplatePermissionSetsByIdExists
     * @param {string} id - Model id
     */
    getTemplatePermissionSetsByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTemplatePermissionSetsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headTemplatePermissionSetsById
     * @param {string} id - Model id
     */
    headTemplatePermissionSetsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatePermissionSetsByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getTemplatePermissionSetsById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getTemplatePermissionSetsById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplatePermissionSetsByIdURL(parameters: {
        'id': string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putTemplatePermissionSetsById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putTemplatePermissionSetsById(parameters: {
        'id': string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplatePermissionSetsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteTemplatePermissionSetsById
     * @param {string} id - Model id
     */
    deleteTemplatePermissionSetsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchTemplatePermissionSetsByIdURL(parameters: {
        'id': string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchTemplatePermissionSetsById
     * @param {string} id - TemplatePermissionSet id
     * @param {} data - An object of model property name/value pairs
     */
    patchTemplatePermissionSetsById(parameters: {
        'id': string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatePermissionSetsByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postTemplatePermissionSetsByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postTemplatePermissionSetsByIdReplace(parameters: {
        'id': string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatePermissionSetsFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getTemplatePermissionSetsFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getTemplatePermissionSetsFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatePermissionSetsUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postTemplatePermissionSetsUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postTemplatePermissionSetsUpdate(parameters: {
        'where' ? : string,
        'data' ? : TemplatePermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatePermissionSetsCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getTemplatePermissionSetsCount
     * @param {string} where - Criteria to match model instances
     */
    getTemplatePermissionSetsCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplatePermissionSetsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postTemplatePermissionSetsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTemplatePermissionSetsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplatePermissionSetsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getTemplatePermissionSetsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplatePermissionSetsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplatePermissionSets/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdTeamURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/team';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation team.
    * @method
    * @name TweakApi#getPortalsByIdTeam
         * @param {string} id - Portal id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdTeam(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/team';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for designs.
     * @method
     * @name TweakApi#getPortalsByIdDesignsByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for designs
     */
    getPortalsByIdDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for designs.
     * @method
     * @name TweakApi#deletePortalsByIdDesignsByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for designs
     */
    deletePortalsByIdDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for designs.
    * @method
    * @name TweakApi#putPortalsByIdDesignsByFk
         * @param {string} id - Portal id
         * @param {string} fk - Foreign key for designs
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdPermissionURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/permission';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches hasOne relation permission.
    * @method
    * @name TweakApi#getPortalsByIdPermission
         * @param {string} id - Portal id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdPermission(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsByIdPermissionURL(parameters: {
        'id': string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/permission';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in permission of this model.
    * @method
    * @name TweakApi#postPortalsByIdPermission
         * @param {string} id - Portal id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalsByIdPermission(parameters: {
        'id': string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdPermissionURL(parameters: {
        'id': string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/permission';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update permission of this model.
    * @method
    * @name TweakApi#putPortalsByIdPermission
         * @param {string} id - Portal id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdPermission(parameters: {
        'id': string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdPermissionURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/permission';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes permission of this model.
     * @method
     * @name TweakApi#deletePortalsByIdPermission
     * @param {string} id - Portal id
     */
    deletePortalsByIdPermission(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/permission';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for members.
     * @method
     * @name TweakApi#getPortalsByIdMembersByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for members
     */
    getPortalsByIdMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for members.
     * @method
     * @name TweakApi#deletePortalsByIdMembersByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for members
     */
    deletePortalsByIdMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for members.
    * @method
    * @name TweakApi#putPortalsByIdMembersByFk
         * @param {string} id - Portal id
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdMembersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdMembersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for members.
    * @method
    * @name TweakApi#putPortalsByIdMembersRelByFk
         * @param {string} id - Portal id
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdMembersRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdMembersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the members relation to an item by id.
     * @method
     * @name TweakApi#deletePortalsByIdMembersRelByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for members
     */
    deletePortalsByIdMembersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headPortalsByIdMembersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of members relation to an item by id.
     * @method
     * @name TweakApi#headPortalsByIdMembersRelByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for members
     */
    headPortalsByIdMembersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdPortalMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/portalMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for portalMembers.
     * @method
     * @name TweakApi#getPortalsByIdPortalMembersByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for portalMembers
     */
    getPortalsByIdPortalMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/portalMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdPortalMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/portalMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for portalMembers.
     * @method
     * @name TweakApi#deletePortalsByIdPortalMembersByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for portalMembers
     */
    deletePortalsByIdPortalMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/portalMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdPortalMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/portalMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for portalMembers.
    * @method
    * @name TweakApi#putPortalsByIdPortalMembersByFk
         * @param {string} id - Portal id
         * @param {string} fk - Foreign key for portalMembers
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdPortalMembersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/portalMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templates.
     * @method
     * @name TweakApi#getPortalsByIdTemplatesByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for templates
     */
    getPortalsByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templates.
     * @method
     * @name TweakApi#deletePortalsByIdTemplatesByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for templates
     */
    deletePortalsByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templates.
    * @method
    * @name TweakApi#putPortalsByIdTemplatesByFk
         * @param {string} id - Portal id
         * @param {string} fk - Foreign key for templates
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdTemplatesRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for templates.
    * @method
    * @name TweakApi#putPortalsByIdTemplatesRelByFk
         * @param {string} id - Portal id
         * @param {string} fk - Foreign key for templates
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdTemplatesRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdTemplatesRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the templates relation to an item by id.
     * @method
     * @name TweakApi#deletePortalsByIdTemplatesRelByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for templates
     */
    deletePortalsByIdTemplatesRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headPortalsByIdTemplatesRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of templates relation to an item by id.
     * @method
     * @name TweakApi#headPortalsByIdTemplatesRelByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for templates
     */
    headPortalsByIdTemplatesRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdTemplateRelsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateRels/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templateRels.
     * @method
     * @name TweakApi#getPortalsByIdTemplateRelsByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for templateRels
     */
    getPortalsByIdTemplateRelsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateRels/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdTemplateRelsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateRels/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templateRels.
     * @method
     * @name TweakApi#deletePortalsByIdTemplateRelsByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for templateRels
     */
    deletePortalsByIdTemplateRelsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateRels/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdTemplateRelsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateRels/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templateRels.
    * @method
    * @name TweakApi#putPortalsByIdTemplateRelsByFk
         * @param {string} id - Portal id
         * @param {string} fk - Foreign key for templateRels
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdTemplateRelsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateRels/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdTemplateFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templateFolders.
     * @method
     * @name TweakApi#getPortalsByIdTemplateFoldersByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for templateFolders
     */
    getPortalsByIdTemplateFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdTemplateFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templateFolders.
     * @method
     * @name TweakApi#deletePortalsByIdTemplateFoldersByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for templateFolders
     */
    deletePortalsByIdTemplateFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdTemplateFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templateFolders.
    * @method
    * @name TweakApi#putPortalsByIdTemplateFoldersByFk
         * @param {string} id - Portal id
         * @param {string} fk - Foreign key for templateFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdTemplateFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for designFolders.
     * @method
     * @name TweakApi#getPortalsByIdDesignFoldersByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for designFolders
     */
    getPortalsByIdDesignFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdDesignFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for designFolders.
     * @method
     * @name TweakApi#deletePortalsByIdDesignFoldersByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for designFolders
     */
    deletePortalsByIdDesignFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdDesignFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for designFolders.
    * @method
    * @name TweakApi#putPortalsByIdDesignFoldersByFk
         * @param {string} id - Portal id
         * @param {string} fk - Foreign key for designFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdDesignFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdImageFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for imageFolders.
     * @method
     * @name TweakApi#getPortalsByIdImageFoldersByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for imageFolders
     */
    getPortalsByIdImageFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdImageFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for imageFolders.
     * @method
     * @name TweakApi#deletePortalsByIdImageFoldersByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for imageFolders
     */
    deletePortalsByIdImageFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdImageFoldersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for imageFolders.
    * @method
    * @name TweakApi#putPortalsByIdImageFoldersByFk
         * @param {string} id - Portal id
         * @param {string} fk - Foreign key for imageFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdImageFoldersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdImageFoldersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for imageFolders.
    * @method
    * @name TweakApi#putPortalsByIdImageFoldersRelByFk
         * @param {string} id - Portal id
         * @param {string} fk - Foreign key for imageFolders
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdImageFoldersRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdImageFoldersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the imageFolders relation to an item by id.
     * @method
     * @name TweakApi#deletePortalsByIdImageFoldersRelByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for imageFolders
     */
    deletePortalsByIdImageFoldersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headPortalsByIdImageFoldersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of imageFolders relation to an item by id.
     * @method
     * @name TweakApi#headPortalsByIdImageFoldersRelByFk
     * @param {string} id - Portal id
     * @param {string} fk - Foreign key for imageFolders
     */
    headPortalsByIdImageFoldersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries designs of Portal.
    * @method
    * @name TweakApi#getPortalsByIdDesigns
         * @param {string} id - Portal id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdDesigns(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsByIdDesignsURL(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in designs of this model.
    * @method
    * @name TweakApi#postPortalsByIdDesigns
         * @param {string} id - Portal id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalsByIdDesigns(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdDesignsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all designs of this model.
     * @method
     * @name TweakApi#deletePortalsByIdDesigns
     * @param {string} id - Portal id
     */
    deletePortalsByIdDesigns(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts designs of Portal.
     * @method
     * @name TweakApi#getPortalsByIdDesignsCount
     * @param {string} id - Portal id
     * @param {string} where - Criteria to match model instances
     */
    getPortalsByIdDesignsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdMembersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries members of Portal.
    * @method
    * @name TweakApi#getPortalsByIdMembers
         * @param {string} id - Portal id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdMembers(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsByIdMembersURL(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in members of this model.
    * @method
    * @name TweakApi#postPortalsByIdMembers
         * @param {string} id - Portal id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalsByIdMembers(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdMembersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all members of this model.
     * @method
     * @name TweakApi#deletePortalsByIdMembers
     * @param {string} id - Portal id
     */
    deletePortalsByIdMembers(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdMembersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts members of Portal.
     * @method
     * @name TweakApi#getPortalsByIdMembersCount
     * @param {string} id - Portal id
     * @param {string} where - Criteria to match model instances
     */
    getPortalsByIdMembersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/members/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdPortalMembersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/portalMembers';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries portalMembers of Portal.
    * @method
    * @name TweakApi#getPortalsByIdPortalMembers
         * @param {string} id - Portal id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdPortalMembers(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/portalMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsByIdPortalMembersURL(parameters: {
        'id': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/portalMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in portalMembers of this model.
    * @method
    * @name TweakApi#postPortalsByIdPortalMembers
         * @param {string} id - Portal id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalsByIdPortalMembers(parameters: {
        'id': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/portalMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdPortalMembersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/portalMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all portalMembers of this model.
     * @method
     * @name TweakApi#deletePortalsByIdPortalMembers
     * @param {string} id - Portal id
     */
    deletePortalsByIdPortalMembers(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/portalMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdPortalMembersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/portalMembers/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts portalMembers of Portal.
     * @method
     * @name TweakApi#getPortalsByIdPortalMembersCount
     * @param {string} id - Portal id
     * @param {string} where - Criteria to match model instances
     */
    getPortalsByIdPortalMembersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/portalMembers/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdTemplatesURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templates of Portal.
    * @method
    * @name TweakApi#getPortalsByIdTemplates
         * @param {string} id - Portal id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdTemplates(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsByIdTemplatesURL(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templates of this model.
    * @method
    * @name TweakApi#postPortalsByIdTemplates
         * @param {string} id - Portal id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalsByIdTemplates(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdTemplatesURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templates of this model.
     * @method
     * @name TweakApi#deletePortalsByIdTemplates
     * @param {string} id - Portal id
     */
    deletePortalsByIdTemplates(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdTemplatesCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templates of Portal.
     * @method
     * @name TweakApi#getPortalsByIdTemplatesCount
     * @param {string} id - Portal id
     * @param {string} where - Criteria to match model instances
     */
    getPortalsByIdTemplatesCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdTemplateRelsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateRels';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templateRels of Portal.
    * @method
    * @name TweakApi#getPortalsByIdTemplateRels
         * @param {string} id - Portal id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdTemplateRels(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateRels';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsByIdTemplateRelsURL(parameters: {
        'id': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateRels';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templateRels of this model.
    * @method
    * @name TweakApi#postPortalsByIdTemplateRels
         * @param {string} id - Portal id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalsByIdTemplateRels(parameters: {
        'id': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateRels';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdTemplateRelsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateRels';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templateRels of this model.
     * @method
     * @name TweakApi#deletePortalsByIdTemplateRels
     * @param {string} id - Portal id
     */
    deletePortalsByIdTemplateRels(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateRels';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdTemplateRelsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateRels/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templateRels of Portal.
     * @method
     * @name TweakApi#getPortalsByIdTemplateRelsCount
     * @param {string} id - Portal id
     * @param {string} where - Criteria to match model instances
     */
    getPortalsByIdTemplateRelsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateRels/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdTemplateFoldersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templateFolders of Portal.
    * @method
    * @name TweakApi#getPortalsByIdTemplateFolders
         * @param {string} id - Portal id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdTemplateFolders(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsByIdTemplateFoldersURL(parameters: {
        'id': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templateFolders of this model.
    * @method
    * @name TweakApi#postPortalsByIdTemplateFolders
         * @param {string} id - Portal id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalsByIdTemplateFolders(parameters: {
        'id': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdTemplateFoldersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templateFolders of this model.
     * @method
     * @name TweakApi#deletePortalsByIdTemplateFolders
     * @param {string} id - Portal id
     */
    deletePortalsByIdTemplateFolders(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdTemplateFoldersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templateFolders of Portal.
     * @method
     * @name TweakApi#getPortalsByIdTemplateFoldersCount
     * @param {string} id - Portal id
     * @param {string} where - Criteria to match model instances
     */
    getPortalsByIdTemplateFoldersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignFoldersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designFolders';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries designFolders of Portal.
    * @method
    * @name TweakApi#getPortalsByIdDesignFolders
         * @param {string} id - Portal id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdDesignFolders(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsByIdDesignFoldersURL(parameters: {
        'id': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in designFolders of this model.
    * @method
    * @name TweakApi#postPortalsByIdDesignFolders
         * @param {string} id - Portal id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalsByIdDesignFolders(parameters: {
        'id': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdDesignFoldersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all designFolders of this model.
     * @method
     * @name TweakApi#deletePortalsByIdDesignFolders
     * @param {string} id - Portal id
     */
    deletePortalsByIdDesignFolders(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignFoldersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designFolders/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts designFolders of Portal.
     * @method
     * @name TweakApi#getPortalsByIdDesignFoldersCount
     * @param {string} id - Portal id
     * @param {string} where - Criteria to match model instances
     */
    getPortalsByIdDesignFoldersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdImageFoldersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries imageFolders of Portal.
    * @method
    * @name TweakApi#getPortalsByIdImageFolders
         * @param {string} id - Portal id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdImageFolders(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsByIdImageFoldersURL(parameters: {
        'id': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in imageFolders of this model.
    * @method
    * @name TweakApi#postPortalsByIdImageFolders
         * @param {string} id - Portal id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalsByIdImageFolders(parameters: {
        'id': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdImageFoldersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all imageFolders of this model.
     * @method
     * @name TweakApi#deletePortalsByIdImageFolders
     * @param {string} id - Portal id
     */
    deletePortalsByIdImageFolders(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdImageFoldersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts imageFolders of Portal.
     * @method
     * @name TweakApi#getPortalsByIdImageFoldersCount
     * @param {string} id - Portal id
     * @param {string} where - Criteria to match model instances
     */
    getPortalsByIdImageFoldersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/imageFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsURL(parameters: {
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postPortals
     * @param {} data - Model instance data
     */
    postPortals(parameters: {
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchPortalsURL(parameters: {
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchPortals
     * @param {} data - Model instance data
     */
    patchPortals(parameters: {
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsURL(parameters: {
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putPortals
     * @param {} data - Model instance data
     */
    putPortals(parameters: {
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getPortals
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getPortals(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsReplaceOrCreateURL(parameters: {
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postPortalsReplaceOrCreate
     * @param {} data - Model instance data
     */
    postPortalsReplaceOrCreate(parameters: {
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postPortalsUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postPortalsUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getPortalsByIdExists
     * @param {string} id - Model id
     */
    getPortalsByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headPortalsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headPortalsById
     * @param {string} id - Model id
     */
    headPortalsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getPortalsById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalsById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdURL(parameters: {
        'id': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putPortalsById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putPortalsById(parameters: {
        'id': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deletePortalsById
     * @param {string} id - Model id
     */
    deletePortalsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchPortalsByIdURL(parameters: {
        'id': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchPortalsById
     * @param {string} id - Portal id
     * @param {} data - An object of model property name/value pairs
     */
    patchPortalsById(parameters: {
        'id': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postPortalsByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postPortalsByIdReplace(parameters: {
        'id': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getPortalsFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalsFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postPortalsUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postPortalsUpdate(parameters: {
        'where' ? : string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getPortalsCount
     * @param {string} where - Criteria to match model instances
     */
    getPortalsCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postPortalsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getPortalsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdInvitationTicketsURL(parameters: {
        'id': string,
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/invitationTickets';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * List InvitationTickets for this Portal
     * @method
     * @name TweakApi#getPortalsByIdInvitationTickets
     * @param {string} id - Portal id
     * @param {string} id - Portal id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalsByIdInvitationTickets(parameters: {
        'id': string,
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/invitationTickets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdInvitationTicketsByFkURL(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/invitationTickets/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Get InvitationTicket by Id for this Portal
     * @method
     * @name TweakApi#getPortalsByIdInvitationTicketsByFk
     * @param {string} id - Portal id
     * @param {string} id - Portal id
     * @param {string} fk - InvitationTicket id
     * @param {string} filter - Only include changes that match this filter
     */
    getPortalsByIdInvitationTicketsByFk(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/invitationTickets/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdInvitationTicketsByFkURL(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/invitationTickets/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete InvitationTickets for this Portal
     * @method
     * @name TweakApi#deletePortalsByIdInvitationTicketsByFk
     * @param {string} id - Portal id
     * @param {string} id - Portal id
     * @param {string} fk - InvitationTicket id
     */
    deletePortalsByIdInvitationTicketsByFk(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/invitationTickets/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdTemplateFoldersRootTemplatesURL(parameters: {
        'id': string,
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders/root/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * List templates on root folder
     * @method
     * @name TweakApi#getPortalsByIdTemplateFoldersRootTemplates
     * @param {string} id - Portal id
     * @param {string} id - Portal id
     * @param {string} filter - Only include changes that match this filter
     */
    getPortalsByIdTemplateFoldersRootTemplates(parameters: {
        'id': string,
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders/root/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdTemplateFoldersByNkTemplatesByFkRelURL(parameters: {
        'id': string,
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders/{nk}/templates/{fk}/rel';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Link folder with Template and Portal
     * @method
     * @name TweakApi#putPortalsByIdTemplateFoldersByNkTemplatesByFkRel
     * @param {string} id - Portal id
     * @param {string} id - Portal id
     * @param {string} nk - PortalTemplateFolder id
     * @param {string} fk - Template id
     */
    putPortalsByIdTemplateFoldersByNkTemplatesByFkRel(parameters: {
        'id': string,
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders/{nk}/templates/{fk}/rel';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdTemplateFoldersByNkTemplatesByFkRelURL(parameters: {
        'id': string,
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders/{nk}/templates/{fk}/rel';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Unlink folder with Template and Portal
     * @method
     * @name TweakApi#deletePortalsByIdTemplateFoldersByNkTemplatesByFkRel
     * @param {string} id - Portal id
     * @param {string} id - Portal id
     * @param {string} nk - PortalTemplateFolder id
     * @param {string} fk - Template id
     */
    deletePortalsByIdTemplateFoldersByNkTemplatesByFkRel(parameters: {
        'id': string,
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templateFolders/{nk}/templates/{fk}/rel';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsByIdTemplatesByFkDesignsGenerateURL(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/{fk}/designs/generate';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Generate Design from Template
    * @method
    * @name TweakApi#postPortalsByIdTemplatesByFkDesignsGenerate
         * @param {string} id - Portal id
         * @param {string} id - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {string} fk - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalsByIdTemplatesByFkDesignsGenerate(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/{fk}/designs/generate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsByIdTemplatesByFkDesignsGenerateBulkURL(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        'data' ? : Array < x - any >
            | x - any

            ,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/{fk}/designs/generate/bulk';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Generate Design from Template
    * @method
    * @name TweakApi#postPortalsByIdTemplatesByFkDesignsGenerateBulk
         * @param {string} id - Portal id
         * @param {string} id - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {string} fk - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalsByIdTemplatesByFkDesignsGenerateBulk(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        'data' ? : Array < x - any >
            | x - any

            ,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/templates/{fk}/designs/generate/bulk';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkCustomerURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/customer';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation customer.
    * @method
    * @name TweakApi#getPortalsByIdDesignsByNkCustomer
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdDesignsByNkCustomer(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/customer';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkRequesterURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/requester';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation requester.
    * @method
    * @name TweakApi#getPortalsByIdDesignsByNkRequester
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdDesignsByNkRequester(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/requester';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkAssigneeURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/assignee';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation assignee.
    * @method
    * @name TweakApi#getPortalsByIdDesignsByNkAssignee
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdDesignsByNkAssignee(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/assignee';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkReviewerURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/reviewer';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation reviewer.
    * @method
    * @name TweakApi#getPortalsByIdDesignsByNkReviewer
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdDesignsByNkReviewer(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/reviewer';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkTemplateURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/template';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation template.
    * @method
    * @name TweakApi#getPortalsByIdDesignsByNkTemplate
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdDesignsByNkTemplate(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/template';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkPortalURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/portal';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation portal.
    * @method
    * @name TweakApi#getPortalsByIdDesignsByNkPortal
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdDesignsByNkPortal(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/portal';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkCommentsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/comments/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for comments.
     * @method
     * @name TweakApi#getPortalsByIdDesignsByNkCommentsByFk
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     * @param {string} fk - Foreign key for comments
     */
    getPortalsByIdDesignsByNkCommentsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/comments/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdDesignsByNkCommentsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/comments/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for comments.
     * @method
     * @name TweakApi#deletePortalsByIdDesignsByNkCommentsByFk
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     * @param {string} fk - Foreign key for comments
     */
    deletePortalsByIdDesignsByNkCommentsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/comments/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdDesignsByNkCommentsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/comments/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for comments.
    * @method
    * @name TweakApi#putPortalsByIdDesignsByNkCommentsByFk
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {string} fk - Foreign key for comments
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdDesignsByNkCommentsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/comments/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkCommentersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for commenters.
     * @method
     * @name TweakApi#getPortalsByIdDesignsByNkCommentersByFk
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     * @param {string} fk - Foreign key for commenters
     */
    getPortalsByIdDesignsByNkCommentersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdDesignsByNkCommentersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for commenters.
     * @method
     * @name TweakApi#deletePortalsByIdDesignsByNkCommentersByFk
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     * @param {string} fk - Foreign key for commenters
     */
    deletePortalsByIdDesignsByNkCommentersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdDesignsByNkCommentersByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for commenters.
    * @method
    * @name TweakApi#putPortalsByIdDesignsByNkCommentersByFk
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {string} fk - Foreign key for commenters
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdDesignsByNkCommentersByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdDesignsByNkCommentersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for commenters.
    * @method
    * @name TweakApi#putPortalsByIdDesignsByNkCommentersRelByFk
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {string} fk - Foreign key for commenters
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdDesignsByNkCommentersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdDesignsByNkCommentersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the commenters relation to an item by id.
     * @method
     * @name TweakApi#deletePortalsByIdDesignsByNkCommentersRelByFk
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     * @param {string} fk - Foreign key for commenters
     */
    deletePortalsByIdDesignsByNkCommentersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headPortalsByIdDesignsByNkCommentersRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of commenters relation to an item by id.
     * @method
     * @name TweakApi#headPortalsByIdDesignsByNkCommentersRelByFk
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     * @param {string} fk - Foreign key for commenters
     */
    headPortalsByIdDesignsByNkCommentersRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkTagsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for tags.
     * @method
     * @name TweakApi#getPortalsByIdDesignsByNkTagsByFk
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     * @param {string} fk - Foreign key for tags
     */
    getPortalsByIdDesignsByNkTagsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdDesignsByNkTagsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for tags.
     * @method
     * @name TweakApi#deletePortalsByIdDesignsByNkTagsByFk
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     * @param {string} fk - Foreign key for tags
     */
    deletePortalsByIdDesignsByNkTagsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdDesignsByNkTagsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for tags.
    * @method
    * @name TweakApi#putPortalsByIdDesignsByNkTagsByFk
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {string} fk - Foreign key for tags
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdDesignsByNkTagsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdDesignsByNkTagsRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for tags.
    * @method
    * @name TweakApi#putPortalsByIdDesignsByNkTagsRelByFk
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {string} fk - Foreign key for tags
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdDesignsByNkTagsRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdDesignsByNkTagsRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the tags relation to an item by id.
     * @method
     * @name TweakApi#deletePortalsByIdDesignsByNkTagsRelByFk
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     * @param {string} fk - Foreign key for tags
     */
    deletePortalsByIdDesignsByNkTagsRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headPortalsByIdDesignsByNkTagsRelByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of tags relation to an item by id.
     * @method
     * @name TweakApi#headPortalsByIdDesignsByNkTagsRelByFk
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     * @param {string} fk - Foreign key for tags
     */
    headPortalsByIdDesignsByNkTagsRelByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkExportsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/exports/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for exports.
     * @method
     * @name TweakApi#getPortalsByIdDesignsByNkExportsByFk
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     * @param {string} fk - Foreign key for exports
     */
    getPortalsByIdDesignsByNkExportsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/exports/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdDesignsByNkExportsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/exports/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for exports.
     * @method
     * @name TweakApi#deletePortalsByIdDesignsByNkExportsByFk
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     * @param {string} fk - Foreign key for exports
     */
    deletePortalsByIdDesignsByNkExportsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/exports/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalsByIdDesignsByNkExportsByFkURL(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/exports/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for exports.
    * @method
    * @name TweakApi#putPortalsByIdDesignsByNkExportsByFk
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {string} fk - Foreign key for exports
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalsByIdDesignsByNkExportsByFk(parameters: {
        'id': string,
        'nk': string,
        'fk': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/exports/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkFolderURL(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/folder';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation folder.
    * @method
    * @name TweakApi#getPortalsByIdDesignsByNkFolder
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdDesignsByNkFolder(parameters: {
        'id': string,
        'nk': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/folder';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkCommentsURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/comments';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries comments of Design.
    * @method
    * @name TweakApi#getPortalsByIdDesignsByNkComments
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdDesignsByNkComments(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/comments';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsByIdDesignsByNkCommentsURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/comments';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in comments of this model.
    * @method
    * @name TweakApi#postPortalsByIdDesignsByNkComments
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalsByIdDesignsByNkComments(parameters: {
        'id': string,
        'nk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/comments';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdDesignsByNkCommentsURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/comments';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all comments of this model.
     * @method
     * @name TweakApi#deletePortalsByIdDesignsByNkComments
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     */
    deletePortalsByIdDesignsByNkComments(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/comments';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkCommentsCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/comments/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts comments of Design.
     * @method
     * @name TweakApi#getPortalsByIdDesignsByNkCommentsCount
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     * @param {string} where - Criteria to match model instances
     */
    getPortalsByIdDesignsByNkCommentsCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/comments/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkCommentersURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries commenters of Design.
    * @method
    * @name TweakApi#getPortalsByIdDesignsByNkCommenters
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdDesignsByNkCommenters(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsByIdDesignsByNkCommentersURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in commenters of this model.
    * @method
    * @name TweakApi#postPortalsByIdDesignsByNkCommenters
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalsByIdDesignsByNkCommenters(parameters: {
        'id': string,
        'nk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdDesignsByNkCommentersURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all commenters of this model.
     * @method
     * @name TweakApi#deletePortalsByIdDesignsByNkCommenters
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     */
    deletePortalsByIdDesignsByNkCommenters(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkCommentersCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts commenters of Design.
     * @method
     * @name TweakApi#getPortalsByIdDesignsByNkCommentersCount
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     * @param {string} where - Criteria to match model instances
     */
    getPortalsByIdDesignsByNkCommentersCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/commenters/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkTagsURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries tags of Design.
    * @method
    * @name TweakApi#getPortalsByIdDesignsByNkTags
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdDesignsByNkTags(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsByIdDesignsByNkTagsURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in tags of this model.
    * @method
    * @name TweakApi#postPortalsByIdDesignsByNkTags
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalsByIdDesignsByNkTags(parameters: {
        'id': string,
        'nk': string,
        'data' ? : Tag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdDesignsByNkTagsURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all tags of this model.
     * @method
     * @name TweakApi#deletePortalsByIdDesignsByNkTags
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     */
    deletePortalsByIdDesignsByNkTags(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkTagsCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts tags of Design.
     * @method
     * @name TweakApi#getPortalsByIdDesignsByNkTagsCount
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     * @param {string} where - Criteria to match model instances
     */
    getPortalsByIdDesignsByNkTagsCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/tags/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkExportsURL(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/exports';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries exports of Design.
    * @method
    * @name TweakApi#getPortalsByIdDesignsByNkExports
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalsByIdDesignsByNkExports(parameters: {
        'id': string,
        'nk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/exports';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalsByIdDesignsByNkExportsURL(parameters: {
        'id': string,
        'nk': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/exports';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in exports of this model.
    * @method
    * @name TweakApi#postPortalsByIdDesignsByNkExports
         * @param {string} id - Portal id
         * @param {string} nk - Foreign key for designs.
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalsByIdDesignsByNkExports(parameters: {
        'id': string,
        'nk': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/exports';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalsByIdDesignsByNkExportsURL(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/exports';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all exports of this model.
     * @method
     * @name TweakApi#deletePortalsByIdDesignsByNkExports
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     */
    deletePortalsByIdDesignsByNkExports(parameters: {
        'id': string,
        'nk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/exports';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalsByIdDesignsByNkExportsCountURL(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/exports/count';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{nk}', `${parameters['nk']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts exports of Design.
     * @method
     * @name TweakApi#getPortalsByIdDesignsByNkExportsCount
     * @param {string} id - Portal id
     * @param {string} nk - Foreign key for designs.
     * @param {string} where - Criteria to match model instances
     */
    getPortalsByIdDesignsByNkExportsCount(parameters: {
        'id': string,
        'nk': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Portals/{id}/designs/{nk}/exports/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{nk}', `${parameters['nk']}`);

            if (parameters['nk'] === undefined) {
                reject(new Error('Missing required  parameter: nk'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalPermissionSetsByIdPortalURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/{id}/portal';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation portal.
    * @method
    * @name TweakApi#getPortalPermissionSetsByIdPortal
         * @param {string} id - PortalPermissionSet id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalPermissionSetsByIdPortal(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/{id}/portal';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalPermissionSetsURL(parameters: {
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postPortalPermissionSets
     * @param {} data - Model instance data
     */
    postPortalPermissionSets(parameters: {
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchPortalPermissionSetsURL(parameters: {
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchPortalPermissionSets
     * @param {} data - Model instance data
     */
    patchPortalPermissionSets(parameters: {
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalPermissionSetsURL(parameters: {
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putPortalPermissionSets
     * @param {} data - Model instance data
     */
    putPortalPermissionSets(parameters: {
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalPermissionSetsURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getPortalPermissionSets
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalPermissionSets(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalPermissionSetsReplaceOrCreateURL(parameters: {
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postPortalPermissionSetsReplaceOrCreate
     * @param {} data - Model instance data
     */
    postPortalPermissionSetsReplaceOrCreate(parameters: {
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalPermissionSetsUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postPortalPermissionSetsUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postPortalPermissionSetsUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalPermissionSetsByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getPortalPermissionSetsByIdExists
     * @param {string} id - Model id
     */
    getPortalPermissionSetsByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headPortalPermissionSetsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headPortalPermissionSetsById
     * @param {string} id - Model id
     */
    headPortalPermissionSetsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalPermissionSetsByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getPortalPermissionSetsById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalPermissionSetsById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalPermissionSetsByIdURL(parameters: {
        'id': string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putPortalPermissionSetsById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putPortalPermissionSetsById(parameters: {
        'id': string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalPermissionSetsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deletePortalPermissionSetsById
     * @param {string} id - Model id
     */
    deletePortalPermissionSetsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchPortalPermissionSetsByIdURL(parameters: {
        'id': string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchPortalPermissionSetsById
     * @param {string} id - PortalPermissionSet id
     * @param {} data - An object of model property name/value pairs
     */
    patchPortalPermissionSetsById(parameters: {
        'id': string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalPermissionSetsByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postPortalPermissionSetsByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postPortalPermissionSetsByIdReplace(parameters: {
        'id': string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalPermissionSetsFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getPortalPermissionSetsFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalPermissionSetsFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalPermissionSetsUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postPortalPermissionSetsUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postPortalPermissionSetsUpdate(parameters: {
        'where' ? : string,
        'data' ? : PortalPermissionSet,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalPermissionSetsCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getPortalPermissionSetsCount
     * @param {string} where - Criteria to match model instances
     */
    getPortalPermissionSetsCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalPermissionSetsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postPortalPermissionSetsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalPermissionSetsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalPermissionSetsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getPortalPermissionSetsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalPermissionSetsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalPermissionSets/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalMembersByIdPortalURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}/portal';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation portal.
    * @method
    * @name TweakApi#getPortalMembersByIdPortal
         * @param {string} id - PortalMember id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalMembersByIdPortal(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}/portal';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalMembersByIdMemberURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}/member';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation member.
    * @method
    * @name TweakApi#getPortalMembersByIdMember
         * @param {string} id - PortalMember id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalMembersByIdMember(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}/member';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalMembersURL(parameters: {
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postPortalMembers
     * @param {} data - Model instance data
     */
    postPortalMembers(parameters: {
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchPortalMembersURL(parameters: {
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchPortalMembers
     * @param {} data - Model instance data
     */
    patchPortalMembers(parameters: {
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalMembersURL(parameters: {
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putPortalMembers
     * @param {} data - Model instance data
     */
    putPortalMembers(parameters: {
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalMembersURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getPortalMembers
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalMembers(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalMembersReplaceOrCreateURL(parameters: {
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postPortalMembersReplaceOrCreate
     * @param {} data - Model instance data
     */
    postPortalMembersReplaceOrCreate(parameters: {
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalMembersUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postPortalMembersUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postPortalMembersUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalMembersByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getPortalMembersByIdExists
     * @param {string} id - Model id
     */
    getPortalMembersByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headPortalMembersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headPortalMembersById
     * @param {string} id - Model id
     */
    headPortalMembersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalMembersByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getPortalMembersById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalMembersById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalMembersByIdURL(parameters: {
        'id': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putPortalMembersById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putPortalMembersById(parameters: {
        'id': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalMembersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deletePortalMembersById
     * @param {string} id - Model id
     */
    deletePortalMembersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchPortalMembersByIdURL(parameters: {
        'id': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchPortalMembersById
     * @param {string} id - PortalMember id
     * @param {} data - An object of model property name/value pairs
     */
    patchPortalMembersById(parameters: {
        'id': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalMembersByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postPortalMembersByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postPortalMembersByIdReplace(parameters: {
        'id': string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalMembersFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getPortalMembersFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalMembersFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalMembersUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postPortalMembersUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postPortalMembersUpdate(parameters: {
        'where' ? : string,
        'data' ? : PortalMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalMembersCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getPortalMembersCount
     * @param {string} where - Criteria to match model instances
     */
    getPortalMembersCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalMembersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postPortalMembersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalMembersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalMembersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getPortalMembersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalMembersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalMembers/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getInvitationTicketsByIdInviteeURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}/invitee';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation invitee.
    * @method
    * @name TweakApi#getInvitationTicketsByIdInvitee
         * @param {string} id - InvitationTicket id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getInvitationTicketsByIdInvitee(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}/invitee';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getInvitationTicketsByIdInviterURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}/inviter';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation inviter.
    * @method
    * @name TweakApi#getInvitationTicketsByIdInviter
         * @param {string} id - InvitationTicket id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getInvitationTicketsByIdInviter(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}/inviter';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postInvitationTicketsURL(parameters: {
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postInvitationTickets
     * @param {} data - Model instance data
     */
    postInvitationTickets(parameters: {
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchInvitationTicketsURL(parameters: {
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchInvitationTickets
     * @param {} data - Model instance data
     */
    patchInvitationTickets(parameters: {
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putInvitationTicketsURL(parameters: {
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putInvitationTickets
     * @param {} data - Model instance data
     */
    putInvitationTickets(parameters: {
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getInvitationTicketsURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getInvitationTickets
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getInvitationTickets(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postInvitationTicketsReplaceOrCreateURL(parameters: {
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postInvitationTicketsReplaceOrCreate
     * @param {} data - Model instance data
     */
    postInvitationTicketsReplaceOrCreate(parameters: {
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postInvitationTicketsUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postInvitationTicketsUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postInvitationTicketsUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getInvitationTicketsByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getInvitationTicketsByIdExists
     * @param {string} id - Model id
     */
    getInvitationTicketsByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headInvitationTicketsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headInvitationTicketsById
     * @param {string} id - Model id
     */
    headInvitationTicketsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getInvitationTicketsByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getInvitationTicketsById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getInvitationTicketsById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putInvitationTicketsByIdURL(parameters: {
        'id': string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putInvitationTicketsById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putInvitationTicketsById(parameters: {
        'id': string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteInvitationTicketsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteInvitationTicketsById
     * @param {string} id - Model id
     */
    deleteInvitationTicketsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchInvitationTicketsByIdURL(parameters: {
        'id': string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchInvitationTicketsById
     * @param {string} id - InvitationTicket id
     * @param {} data - An object of model property name/value pairs
     */
    patchInvitationTicketsById(parameters: {
        'id': string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postInvitationTicketsByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postInvitationTicketsByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postInvitationTicketsByIdReplace(parameters: {
        'id': string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getInvitationTicketsFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getInvitationTicketsFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getInvitationTicketsFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postInvitationTicketsUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postInvitationTicketsUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postInvitationTicketsUpdate(parameters: {
        'where' ? : string,
        'data' ? : InvitationTicket,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getInvitationTicketsCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getInvitationTicketsCount
     * @param {string} where - Criteria to match model instances
     */
    getInvitationTicketsCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postInvitationTicketsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postInvitationTicketsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postInvitationTicketsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getInvitationTicketsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getInvitationTicketsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getInvitationTicketsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/InvitationTickets/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignCommentsByIdDesignURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/design';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation design.
    * @method
    * @name TweakApi#getDesignCommentsByIdDesign
         * @param {string} id - DesignComment id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignCommentsByIdDesign(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/design';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignCommentsByIdRepliesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replies/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for replies.
     * @method
     * @name TweakApi#getDesignCommentsByIdRepliesByFk
     * @param {string} id - DesignComment id
     * @param {string} fk - Foreign key for replies
     */
    getDesignCommentsByIdRepliesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replies/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignCommentsByIdRepliesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replies/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for replies.
     * @method
     * @name TweakApi#deleteDesignCommentsByIdRepliesByFk
     * @param {string} id - DesignComment id
     * @param {string} fk - Foreign key for replies
     */
    deleteDesignCommentsByIdRepliesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replies/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignCommentsByIdRepliesByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replies/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for replies.
    * @method
    * @name TweakApi#putDesignCommentsByIdRepliesByFk
         * @param {string} id - DesignComment id
         * @param {string} fk - Foreign key for replies
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putDesignCommentsByIdRepliesByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replies/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignCommentsByIdCommenterURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/commenter';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation commenter.
    * @method
    * @name TweakApi#getDesignCommentsByIdCommenter
         * @param {string} id - DesignComment id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignCommentsByIdCommenter(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/commenter';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignCommentsByIdReplyOfURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replyOf';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation replyOf.
    * @method
    * @name TweakApi#getDesignCommentsByIdReplyOf
         * @param {string} id - DesignComment id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignCommentsByIdReplyOf(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replyOf';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignCommentsByIdRepliesURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replies';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries replies of DesignComment.
    * @method
    * @name TweakApi#getDesignCommentsByIdReplies
         * @param {string} id - DesignComment id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignCommentsByIdReplies(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replies';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignCommentsByIdRepliesURL(parameters: {
        'id': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replies';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in replies of this model.
    * @method
    * @name TweakApi#postDesignCommentsByIdReplies
         * @param {string} id - DesignComment id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postDesignCommentsByIdReplies(parameters: {
        'id': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replies';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignCommentsByIdRepliesURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replies';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all replies of this model.
     * @method
     * @name TweakApi#deleteDesignCommentsByIdReplies
     * @param {string} id - DesignComment id
     */
    deleteDesignCommentsByIdReplies(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replies';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignCommentsByIdRepliesCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replies/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts replies of DesignComment.
     * @method
     * @name TweakApi#getDesignCommentsByIdRepliesCount
     * @param {string} id - DesignComment id
     * @param {string} where - Criteria to match model instances
     */
    getDesignCommentsByIdRepliesCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replies/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignCommentsURL(parameters: {
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postDesignComments
     * @param {} data - Model instance data
     */
    postDesignComments(parameters: {
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchDesignCommentsURL(parameters: {
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchDesignComments
     * @param {} data - Model instance data
     */
    patchDesignComments(parameters: {
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignCommentsURL(parameters: {
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putDesignComments
     * @param {} data - Model instance data
     */
    putDesignComments(parameters: {
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignCommentsURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getDesignComments
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getDesignComments(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignCommentsReplaceOrCreateURL(parameters: {
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postDesignCommentsReplaceOrCreate
     * @param {} data - Model instance data
     */
    postDesignCommentsReplaceOrCreate(parameters: {
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignCommentsUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postDesignCommentsUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postDesignCommentsUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignCommentsByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getDesignCommentsByIdExists
     * @param {string} id - Model id
     */
    getDesignCommentsByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headDesignCommentsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headDesignCommentsById
     * @param {string} id - Model id
     */
    headDesignCommentsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignCommentsByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getDesignCommentsById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getDesignCommentsById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignCommentsByIdURL(parameters: {
        'id': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putDesignCommentsById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putDesignCommentsById(parameters: {
        'id': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignCommentsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteDesignCommentsById
     * @param {string} id - Model id
     */
    deleteDesignCommentsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchDesignCommentsByIdURL(parameters: {
        'id': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchDesignCommentsById
     * @param {string} id - DesignComment id
     * @param {} data - An object of model property name/value pairs
     */
    patchDesignCommentsById(parameters: {
        'id': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignCommentsByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postDesignCommentsByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postDesignCommentsByIdReplace(parameters: {
        'id': string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignCommentsFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getDesignCommentsFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getDesignCommentsFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignCommentsUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postDesignCommentsUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postDesignCommentsUpdate(parameters: {
        'where' ? : string,
        'data' ? : DesignComment,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignCommentsCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getDesignCommentsCount
     * @param {string} where - Criteria to match model instances
     */
    getDesignCommentsCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignCommentsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postDesignCommentsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postDesignCommentsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignCommentsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getDesignCommentsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignCommentsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignComments/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImagesByIdTeamURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}/team';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation team.
    * @method
    * @name TweakApi#getImagesByIdTeam
         * @param {string} id - Image id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getImagesByIdTeam(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}/team';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImagesByIdFolderURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}/folder';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation folder.
    * @method
    * @name TweakApi#getImagesByIdFolder
         * @param {string} id - Image id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getImagesByIdFolder(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}/folder';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImagesURL(parameters: {
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postImages
     * @param {} data - Model instance data
     */
    postImages(parameters: {
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchImagesURL(parameters: {
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchImages
     * @param {} data - Model instance data
     */
    patchImages(parameters: {
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putImagesURL(parameters: {
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putImages
     * @param {} data - Model instance data
     */
    putImages(parameters: {
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImagesURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getImages
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getImages(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImagesReplaceOrCreateURL(parameters: {
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postImagesReplaceOrCreate
     * @param {} data - Model instance data
     */
    postImagesReplaceOrCreate(parameters: {
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImagesUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postImagesUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postImagesUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImagesByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getImagesByIdExists
     * @param {string} id - Model id
     */
    getImagesByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headImagesByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headImagesById
     * @param {string} id - Model id
     */
    headImagesById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImagesByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getImagesById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getImagesById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putImagesByIdURL(parameters: {
        'id': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putImagesById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putImagesById(parameters: {
        'id': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteImagesByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteImagesById
     * @param {string} id - Model id
     */
    deleteImagesById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchImagesByIdURL(parameters: {
        'id': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchImagesById
     * @param {string} id - Image id
     * @param {} data - An object of model property name/value pairs
     */
    patchImagesById(parameters: {
        'id': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImagesByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postImagesByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postImagesByIdReplace(parameters: {
        'id': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImagesFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getImagesFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getImagesFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImagesUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postImagesUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postImagesUpdate(parameters: {
        'where' ? : string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImagesCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getImagesCount
     * @param {string} where - Criteria to match model instances
     */
    getImagesCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImagesChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postImagesChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postImagesChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImagesChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getImagesChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getImagesChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Images/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplatesByIdPortalURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}/portal';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation portal.
    * @method
    * @name TweakApi#getPortalTemplatesByIdPortal
         * @param {string} id - PortalTemplate id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalTemplatesByIdPortal(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}/portal';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplatesByIdTemplateURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}/template';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation template.
    * @method
    * @name TweakApi#getPortalTemplatesByIdTemplate
         * @param {string} id - PortalTemplate id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalTemplatesByIdTemplate(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}/template';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplatesByIdFolderURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}/folder';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation folder.
    * @method
    * @name TweakApi#getPortalTemplatesByIdFolder
         * @param {string} id - PortalTemplate id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalTemplatesByIdFolder(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}/folder';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalTemplatesURL(parameters: {
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postPortalTemplates
     * @param {} data - Model instance data
     */
    postPortalTemplates(parameters: {
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchPortalTemplatesURL(parameters: {
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchPortalTemplates
     * @param {} data - Model instance data
     */
    patchPortalTemplates(parameters: {
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalTemplatesURL(parameters: {
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putPortalTemplates
     * @param {} data - Model instance data
     */
    putPortalTemplates(parameters: {
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplatesURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getPortalTemplates
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalTemplates(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalTemplatesReplaceOrCreateURL(parameters: {
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postPortalTemplatesReplaceOrCreate
     * @param {} data - Model instance data
     */
    postPortalTemplatesReplaceOrCreate(parameters: {
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalTemplatesUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postPortalTemplatesUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postPortalTemplatesUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplatesByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getPortalTemplatesByIdExists
     * @param {string} id - Model id
     */
    getPortalTemplatesByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headPortalTemplatesByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headPortalTemplatesById
     * @param {string} id - Model id
     */
    headPortalTemplatesById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplatesByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getPortalTemplatesById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalTemplatesById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalTemplatesByIdURL(parameters: {
        'id': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putPortalTemplatesById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putPortalTemplatesById(parameters: {
        'id': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalTemplatesByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deletePortalTemplatesById
     * @param {string} id - Model id
     */
    deletePortalTemplatesById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchPortalTemplatesByIdURL(parameters: {
        'id': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchPortalTemplatesById
     * @param {string} id - PortalTemplate id
     * @param {} data - An object of model property name/value pairs
     */
    patchPortalTemplatesById(parameters: {
        'id': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalTemplatesByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postPortalTemplatesByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postPortalTemplatesByIdReplace(parameters: {
        'id': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplatesFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getPortalTemplatesFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalTemplatesFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalTemplatesUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postPortalTemplatesUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postPortalTemplatesUpdate(parameters: {
        'where' ? : string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplatesCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getPortalTemplatesCount
     * @param {string} where - Criteria to match model instances
     */
    getPortalTemplatesCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalTemplatesChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postPortalTemplatesChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalTemplatesChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplatesChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getPortalTemplatesChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalTemplatesChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplates/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplateMembersByIdTemplateURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}/template';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation template.
    * @method
    * @name TweakApi#getTemplateMembersByIdTemplate
         * @param {string} id - TemplateMember id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplateMembersByIdTemplate(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}/template';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplateMembersByIdMemberURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}/member';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation member.
    * @method
    * @name TweakApi#getTemplateMembersByIdMember
         * @param {string} id - TemplateMember id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplateMembersByIdMember(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}/member';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplateMembersURL(parameters: {
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postTemplateMembers
     * @param {} data - Model instance data
     */
    postTemplateMembers(parameters: {
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchTemplateMembersURL(parameters: {
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchTemplateMembers
     * @param {} data - Model instance data
     */
    patchTemplateMembers(parameters: {
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplateMembersURL(parameters: {
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putTemplateMembers
     * @param {} data - Model instance data
     */
    putTemplateMembers(parameters: {
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplateMembersURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getTemplateMembers
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getTemplateMembers(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplateMembersReplaceOrCreateURL(parameters: {
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postTemplateMembersReplaceOrCreate
     * @param {} data - Model instance data
     */
    postTemplateMembersReplaceOrCreate(parameters: {
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplateMembersUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postTemplateMembersUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postTemplateMembersUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplateMembersByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getTemplateMembersByIdExists
     * @param {string} id - Model id
     */
    getTemplateMembersByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTemplateMembersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headTemplateMembersById
     * @param {string} id - Model id
     */
    headTemplateMembersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplateMembersByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getTemplateMembersById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getTemplateMembersById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplateMembersByIdURL(parameters: {
        'id': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putTemplateMembersById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putTemplateMembersById(parameters: {
        'id': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplateMembersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteTemplateMembersById
     * @param {string} id - Model id
     */
    deleteTemplateMembersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchTemplateMembersByIdURL(parameters: {
        'id': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchTemplateMembersById
     * @param {string} id - TemplateMember id
     * @param {} data - An object of model property name/value pairs
     */
    patchTemplateMembersById(parameters: {
        'id': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplateMembersByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postTemplateMembersByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postTemplateMembersByIdReplace(parameters: {
        'id': string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplateMembersFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getTemplateMembersFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getTemplateMembersFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplateMembersUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postTemplateMembersUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postTemplateMembersUpdate(parameters: {
        'where' ? : string,
        'data' ? : TemplateMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplateMembersCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getTemplateMembersCount
     * @param {string} where - Criteria to match model instances
     */
    getTemplateMembersCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplateMembersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postTemplateMembersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTemplateMembersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplateMembersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getTemplateMembersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplateMembersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateMembers/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplateTagsByIdTagURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}/tag';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation tag.
    * @method
    * @name TweakApi#getTemplateTagsByIdTag
         * @param {string} id - TemplateTag id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplateTagsByIdTag(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}/tag';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplateTagsByIdTemplateURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}/template';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation template.
    * @method
    * @name TweakApi#getTemplateTagsByIdTemplate
         * @param {string} id - TemplateTag id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplateTagsByIdTemplate(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}/template';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplateTagsURL(parameters: {
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postTemplateTags
     * @param {} data - Model instance data
     */
    postTemplateTags(parameters: {
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchTemplateTagsURL(parameters: {
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchTemplateTags
     * @param {} data - Model instance data
     */
    patchTemplateTags(parameters: {
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplateTagsURL(parameters: {
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putTemplateTags
     * @param {} data - Model instance data
     */
    putTemplateTags(parameters: {
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplateTagsURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getTemplateTags
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getTemplateTags(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplateTagsReplaceOrCreateURL(parameters: {
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postTemplateTagsReplaceOrCreate
     * @param {} data - Model instance data
     */
    postTemplateTagsReplaceOrCreate(parameters: {
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplateTagsUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postTemplateTagsUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postTemplateTagsUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplateTagsByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getTemplateTagsByIdExists
     * @param {string} id - Model id
     */
    getTemplateTagsByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTemplateTagsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headTemplateTagsById
     * @param {string} id - Model id
     */
    headTemplateTagsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplateTagsByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getTemplateTagsById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getTemplateTagsById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTemplateTagsByIdURL(parameters: {
        'id': string,
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putTemplateTagsById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putTemplateTagsById(parameters: {
        'id': string,
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTemplateTagsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteTemplateTagsById
     * @param {string} id - Model id
     */
    deleteTemplateTagsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchTemplateTagsByIdURL(parameters: {
        'id': string,
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchTemplateTagsById
     * @param {string} id - TemplateTag id
     * @param {} data - An object of model property name/value pairs
     */
    patchTemplateTagsById(parameters: {
        'id': string,
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplateTagsByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postTemplateTagsByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postTemplateTagsByIdReplace(parameters: {
        'id': string,
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplateTagsFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getTemplateTagsFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getTemplateTagsFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplateTagsUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postTemplateTagsUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postTemplateTagsUpdate(parameters: {
        'where' ? : string,
        'data' ? : TemplateTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplateTagsCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getTemplateTagsCount
     * @param {string} where - Criteria to match model instances
     */
    getTemplateTagsCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTemplateTagsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postTemplateTagsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTemplateTagsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTemplateTagsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getTemplateTagsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTemplateTagsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TemplateTags/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignTagsByIdDesignURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}/design';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation design.
    * @method
    * @name TweakApi#getDesignTagsByIdDesign
         * @param {string} id - DesignTag id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignTagsByIdDesign(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}/design';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignTagsByIdTagURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}/tag';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation tag.
    * @method
    * @name TweakApi#getDesignTagsByIdTag
         * @param {string} id - DesignTag id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignTagsByIdTag(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}/tag';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignTagsURL(parameters: {
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postDesignTags
     * @param {} data - Model instance data
     */
    postDesignTags(parameters: {
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchDesignTagsURL(parameters: {
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchDesignTags
     * @param {} data - Model instance data
     */
    patchDesignTags(parameters: {
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignTagsURL(parameters: {
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putDesignTags
     * @param {} data - Model instance data
     */
    putDesignTags(parameters: {
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignTagsURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getDesignTags
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getDesignTags(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignTagsReplaceOrCreateURL(parameters: {
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postDesignTagsReplaceOrCreate
     * @param {} data - Model instance data
     */
    postDesignTagsReplaceOrCreate(parameters: {
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignTagsUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postDesignTagsUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postDesignTagsUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignTagsByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getDesignTagsByIdExists
     * @param {string} id - Model id
     */
    getDesignTagsByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headDesignTagsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headDesignTagsById
     * @param {string} id - Model id
     */
    headDesignTagsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignTagsByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getDesignTagsById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getDesignTagsById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignTagsByIdURL(parameters: {
        'id': string,
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putDesignTagsById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putDesignTagsById(parameters: {
        'id': string,
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignTagsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteDesignTagsById
     * @param {string} id - Model id
     */
    deleteDesignTagsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchDesignTagsByIdURL(parameters: {
        'id': string,
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchDesignTagsById
     * @param {string} id - DesignTag id
     * @param {} data - An object of model property name/value pairs
     */
    patchDesignTagsById(parameters: {
        'id': string,
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignTagsByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postDesignTagsByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postDesignTagsByIdReplace(parameters: {
        'id': string,
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignTagsFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getDesignTagsFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getDesignTagsFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignTagsUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postDesignTagsUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postDesignTagsUpdate(parameters: {
        'where' ? : string,
        'data' ? : DesignTag,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignTagsCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getDesignTagsCount
     * @param {string} where - Criteria to match model instances
     */
    getDesignTagsCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignTagsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postDesignTagsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postDesignTagsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignTagsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getDesignTagsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignTagsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignTags/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignExportsByIdDesignsURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}/designs';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation designs.
    * @method
    * @name TweakApi#getDesignExportsByIdDesigns
         * @param {string} id - DesignExport id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignExportsByIdDesigns(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignExportsByIdRequesterURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}/requester';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation requester.
    * @method
    * @name TweakApi#getDesignExportsByIdRequester
         * @param {string} id - DesignExport id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignExportsByIdRequester(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}/requester';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignExportsURL(parameters: {
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postDesignExports
     * @param {} data - Model instance data
     */
    postDesignExports(parameters: {
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchDesignExportsURL(parameters: {
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchDesignExports
     * @param {} data - Model instance data
     */
    patchDesignExports(parameters: {
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignExportsURL(parameters: {
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putDesignExports
     * @param {} data - Model instance data
     */
    putDesignExports(parameters: {
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignExportsURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getDesignExports
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getDesignExports(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignExportsReplaceOrCreateURL(parameters: {
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postDesignExportsReplaceOrCreate
     * @param {} data - Model instance data
     */
    postDesignExportsReplaceOrCreate(parameters: {
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignExportsUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postDesignExportsUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postDesignExportsUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignExportsByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getDesignExportsByIdExists
     * @param {string} id - Model id
     */
    getDesignExportsByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headDesignExportsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headDesignExportsById
     * @param {string} id - Model id
     */
    headDesignExportsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignExportsByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getDesignExportsById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getDesignExportsById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignExportsByIdURL(parameters: {
        'id': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putDesignExportsById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putDesignExportsById(parameters: {
        'id': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignExportsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteDesignExportsById
     * @param {string} id - Model id
     */
    deleteDesignExportsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchDesignExportsByIdURL(parameters: {
        'id': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchDesignExportsById
     * @param {string} id - DesignExport id
     * @param {} data - An object of model property name/value pairs
     */
    patchDesignExportsById(parameters: {
        'id': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignExportsByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postDesignExportsByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postDesignExportsByIdReplace(parameters: {
        'id': string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignExportsFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getDesignExportsFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getDesignExportsFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignExportsUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postDesignExportsUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postDesignExportsUpdate(parameters: {
        'where' ? : string,
        'data' ? : DesignExport,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignExportsCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getDesignExportsCount
     * @param {string} where - Criteria to match model instances
     */
    getDesignExportsCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignExportsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postDesignExportsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postDesignExportsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignExportsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getDesignExportsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignExportsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignExports/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamTemplateFoldersByIdTeamURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/team';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation team.
    * @method
    * @name TweakApi#getTeamTemplateFoldersByIdTeam
         * @param {string} id - TeamTemplateFolder id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamTemplateFoldersByIdTeam(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/team';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamTemplateFoldersByIdChildrenByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/children/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for children.
     * @method
     * @name TweakApi#getTeamTemplateFoldersByIdChildrenByFk
     * @param {string} id - TeamTemplateFolder id
     * @param {string} fk - Foreign key for children
     */
    getTeamTemplateFoldersByIdChildrenByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/children/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamTemplateFoldersByIdChildrenByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/children/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for children.
     * @method
     * @name TweakApi#deleteTeamTemplateFoldersByIdChildrenByFk
     * @param {string} id - TeamTemplateFolder id
     * @param {string} fk - Foreign key for children
     */
    deleteTeamTemplateFoldersByIdChildrenByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/children/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamTemplateFoldersByIdChildrenByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/children/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for children.
    * @method
    * @name TweakApi#putTeamTemplateFoldersByIdChildrenByFk
         * @param {string} id - TeamTemplateFolder id
         * @param {string} fk - Foreign key for children
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamTemplateFoldersByIdChildrenByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/children/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamTemplateFoldersByIdParentURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/parent';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation parent.
    * @method
    * @name TweakApi#getTeamTemplateFoldersByIdParent
         * @param {string} id - TeamTemplateFolder id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamTemplateFoldersByIdParent(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/parent';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamTemplateFoldersByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templates.
     * @method
     * @name TweakApi#getTeamTemplateFoldersByIdTemplatesByFk
     * @param {string} id - TeamTemplateFolder id
     * @param {string} fk - Foreign key for templates
     */
    getTeamTemplateFoldersByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamTemplateFoldersByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templates.
     * @method
     * @name TweakApi#deleteTeamTemplateFoldersByIdTemplatesByFk
     * @param {string} id - TeamTemplateFolder id
     * @param {string} fk - Foreign key for templates
     */
    deleteTeamTemplateFoldersByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamTemplateFoldersByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templates.
    * @method
    * @name TweakApi#putTeamTemplateFoldersByIdTemplatesByFk
         * @param {string} id - TeamTemplateFolder id
         * @param {string} fk - Foreign key for templates
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putTeamTemplateFoldersByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamTemplateFoldersByIdChildrenURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/children';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries children of TeamTemplateFolder.
    * @method
    * @name TweakApi#getTeamTemplateFoldersByIdChildren
         * @param {string} id - TeamTemplateFolder id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamTemplateFoldersByIdChildren(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/children';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamTemplateFoldersByIdChildrenURL(parameters: {
        'id': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/children';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in children of this model.
    * @method
    * @name TweakApi#postTeamTemplateFoldersByIdChildren
         * @param {string} id - TeamTemplateFolder id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamTemplateFoldersByIdChildren(parameters: {
        'id': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/children';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamTemplateFoldersByIdChildrenURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/children';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all children of this model.
     * @method
     * @name TweakApi#deleteTeamTemplateFoldersByIdChildren
     * @param {string} id - TeamTemplateFolder id
     */
    deleteTeamTemplateFoldersByIdChildren(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/children';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamTemplateFoldersByIdChildrenCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/children/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts children of TeamTemplateFolder.
     * @method
     * @name TweakApi#getTeamTemplateFoldersByIdChildrenCount
     * @param {string} id - TeamTemplateFolder id
     * @param {string} where - Criteria to match model instances
     */
    getTeamTemplateFoldersByIdChildrenCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/children/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamTemplateFoldersByIdTemplatesURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templates of TeamTemplateFolder.
    * @method
    * @name TweakApi#getTeamTemplateFoldersByIdTemplates
         * @param {string} id - TeamTemplateFolder id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamTemplateFoldersByIdTemplates(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamTemplateFoldersByIdTemplatesURL(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templates of this model.
    * @method
    * @name TweakApi#postTeamTemplateFoldersByIdTemplates
         * @param {string} id - TeamTemplateFolder id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamTemplateFoldersByIdTemplates(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamTemplateFoldersByIdTemplatesURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templates of this model.
     * @method
     * @name TweakApi#deleteTeamTemplateFoldersByIdTemplates
     * @param {string} id - TeamTemplateFolder id
     */
    deleteTeamTemplateFoldersByIdTemplates(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamTemplateFoldersByIdTemplatesCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/templates/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templates of TeamTemplateFolder.
     * @method
     * @name TweakApi#getTeamTemplateFoldersByIdTemplatesCount
     * @param {string} id - TeamTemplateFolder id
     * @param {string} where - Criteria to match model instances
     */
    getTeamTemplateFoldersByIdTemplatesCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/templates/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamTemplateFoldersURL(parameters: {
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postTeamTemplateFolders
     * @param {} data - Model instance data
     */
    postTeamTemplateFolders(parameters: {
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchTeamTemplateFoldersURL(parameters: {
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchTeamTemplateFolders
     * @param {} data - Model instance data
     */
    patchTeamTemplateFolders(parameters: {
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamTemplateFoldersURL(parameters: {
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putTeamTemplateFolders
     * @param {} data - Model instance data
     */
    putTeamTemplateFolders(parameters: {
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamTemplateFoldersURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getTeamTemplateFolders
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getTeamTemplateFolders(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamTemplateFoldersReplaceOrCreateURL(parameters: {
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postTeamTemplateFoldersReplaceOrCreate
     * @param {} data - Model instance data
     */
    postTeamTemplateFoldersReplaceOrCreate(parameters: {
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamTemplateFoldersUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postTeamTemplateFoldersUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postTeamTemplateFoldersUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamTemplateFoldersByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getTeamTemplateFoldersByIdExists
     * @param {string} id - Model id
     */
    getTeamTemplateFoldersByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headTeamTemplateFoldersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headTeamTemplateFoldersById
     * @param {string} id - Model id
     */
    headTeamTemplateFoldersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamTemplateFoldersByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getTeamTemplateFoldersById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getTeamTemplateFoldersById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putTeamTemplateFoldersByIdURL(parameters: {
        'id': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putTeamTemplateFoldersById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putTeamTemplateFoldersById(parameters: {
        'id': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteTeamTemplateFoldersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteTeamTemplateFoldersById
     * @param {string} id - Model id
     */
    deleteTeamTemplateFoldersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchTeamTemplateFoldersByIdURL(parameters: {
        'id': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchTeamTemplateFoldersById
     * @param {string} id - TeamTemplateFolder id
     * @param {} data - An object of model property name/value pairs
     */
    patchTeamTemplateFoldersById(parameters: {
        'id': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamTemplateFoldersByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postTeamTemplateFoldersByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postTeamTemplateFoldersByIdReplace(parameters: {
        'id': string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamTemplateFoldersFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getTeamTemplateFoldersFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getTeamTemplateFoldersFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamTemplateFoldersUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postTeamTemplateFoldersUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postTeamTemplateFoldersUpdate(parameters: {
        'where' ? : string,
        'data' ? : TeamTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamTemplateFoldersCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getTeamTemplateFoldersCount
     * @param {string} where - Criteria to match model instances
     */
    getTeamTemplateFoldersCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postTeamTemplateFoldersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postTeamTemplateFoldersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postTeamTemplateFoldersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getTeamTemplateFoldersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getTeamTemplateFoldersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getTeamTemplateFoldersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/TeamTemplateFolders/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplateFoldersByIdPortalURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/portal';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation portal.
    * @method
    * @name TweakApi#getPortalTemplateFoldersByIdPortal
         * @param {string} id - PortalTemplateFolder id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalTemplateFoldersByIdPortal(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/portal';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplateFoldersByIdChildrenByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/children/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for children.
     * @method
     * @name TweakApi#getPortalTemplateFoldersByIdChildrenByFk
     * @param {string} id - PortalTemplateFolder id
     * @param {string} fk - Foreign key for children
     */
    getPortalTemplateFoldersByIdChildrenByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/children/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalTemplateFoldersByIdChildrenByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/children/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for children.
     * @method
     * @name TweakApi#deletePortalTemplateFoldersByIdChildrenByFk
     * @param {string} id - PortalTemplateFolder id
     * @param {string} fk - Foreign key for children
     */
    deletePortalTemplateFoldersByIdChildrenByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/children/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalTemplateFoldersByIdChildrenByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/children/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for children.
    * @method
    * @name TweakApi#putPortalTemplateFoldersByIdChildrenByFk
         * @param {string} id - PortalTemplateFolder id
         * @param {string} fk - Foreign key for children
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalTemplateFoldersByIdChildrenByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/children/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplateFoldersByIdParentURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/parent';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation parent.
    * @method
    * @name TweakApi#getPortalTemplateFoldersByIdParent
         * @param {string} id - PortalTemplateFolder id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalTemplateFoldersByIdParent(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/parent';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplateFoldersByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templates.
     * @method
     * @name TweakApi#getPortalTemplateFoldersByIdTemplatesByFk
     * @param {string} id - PortalTemplateFolder id
     * @param {string} fk - Foreign key for templates
     */
    getPortalTemplateFoldersByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalTemplateFoldersByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templates.
     * @method
     * @name TweakApi#deletePortalTemplateFoldersByIdTemplatesByFk
     * @param {string} id - PortalTemplateFolder id
     * @param {string} fk - Foreign key for templates
     */
    deletePortalTemplateFoldersByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalTemplateFoldersByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templates.
    * @method
    * @name TweakApi#putPortalTemplateFoldersByIdTemplatesByFk
         * @param {string} id - PortalTemplateFolder id
         * @param {string} fk - Foreign key for templates
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalTemplateFoldersByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalTemplateFoldersByIdTemplatesRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for templates.
    * @method
    * @name TweakApi#putPortalTemplateFoldersByIdTemplatesRelByFk
         * @param {string} id - PortalTemplateFolder id
         * @param {string} fk - Foreign key for templates
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putPortalTemplateFoldersByIdTemplatesRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalTemplate,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalTemplateFoldersByIdTemplatesRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the templates relation to an item by id.
     * @method
     * @name TweakApi#deletePortalTemplateFoldersByIdTemplatesRelByFk
     * @param {string} id - PortalTemplateFolder id
     * @param {string} fk - Foreign key for templates
     */
    deletePortalTemplateFoldersByIdTemplatesRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headPortalTemplateFoldersByIdTemplatesRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of templates relation to an item by id.
     * @method
     * @name TweakApi#headPortalTemplateFoldersByIdTemplatesRelByFk
     * @param {string} id - PortalTemplateFolder id
     * @param {string} fk - Foreign key for templates
     */
    headPortalTemplateFoldersByIdTemplatesRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplateFoldersByIdChildrenURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/children';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries children of PortalTemplateFolder.
    * @method
    * @name TweakApi#getPortalTemplateFoldersByIdChildren
         * @param {string} id - PortalTemplateFolder id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalTemplateFoldersByIdChildren(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/children';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalTemplateFoldersByIdChildrenURL(parameters: {
        'id': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/children';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in children of this model.
    * @method
    * @name TweakApi#postPortalTemplateFoldersByIdChildren
         * @param {string} id - PortalTemplateFolder id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalTemplateFoldersByIdChildren(parameters: {
        'id': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/children';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalTemplateFoldersByIdChildrenURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/children';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all children of this model.
     * @method
     * @name TweakApi#deletePortalTemplateFoldersByIdChildren
     * @param {string} id - PortalTemplateFolder id
     */
    deletePortalTemplateFoldersByIdChildren(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/children';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplateFoldersByIdChildrenCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/children/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts children of PortalTemplateFolder.
     * @method
     * @name TweakApi#getPortalTemplateFoldersByIdChildrenCount
     * @param {string} id - PortalTemplateFolder id
     * @param {string} where - Criteria to match model instances
     */
    getPortalTemplateFoldersByIdChildrenCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/children/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplateFoldersByIdTemplatesURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templates of PortalTemplateFolder.
    * @method
    * @name TweakApi#getPortalTemplateFoldersByIdTemplates
         * @param {string} id - PortalTemplateFolder id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalTemplateFoldersByIdTemplates(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalTemplateFoldersByIdTemplatesURL(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templates of this model.
    * @method
    * @name TweakApi#postPortalTemplateFoldersByIdTemplates
         * @param {string} id - PortalTemplateFolder id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalTemplateFoldersByIdTemplates(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalTemplateFoldersByIdTemplatesURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templates of this model.
     * @method
     * @name TweakApi#deletePortalTemplateFoldersByIdTemplates
     * @param {string} id - PortalTemplateFolder id
     */
    deletePortalTemplateFoldersByIdTemplates(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplateFoldersByIdTemplatesCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templates of PortalTemplateFolder.
     * @method
     * @name TweakApi#getPortalTemplateFoldersByIdTemplatesCount
     * @param {string} id - PortalTemplateFolder id
     * @param {string} where - Criteria to match model instances
     */
    getPortalTemplateFoldersByIdTemplatesCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/templates/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalTemplateFoldersURL(parameters: {
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postPortalTemplateFolders
     * @param {} data - Model instance data
     */
    postPortalTemplateFolders(parameters: {
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchPortalTemplateFoldersURL(parameters: {
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchPortalTemplateFolders
     * @param {} data - Model instance data
     */
    patchPortalTemplateFolders(parameters: {
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalTemplateFoldersURL(parameters: {
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putPortalTemplateFolders
     * @param {} data - Model instance data
     */
    putPortalTemplateFolders(parameters: {
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplateFoldersURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getPortalTemplateFolders
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalTemplateFolders(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalTemplateFoldersReplaceOrCreateURL(parameters: {
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postPortalTemplateFoldersReplaceOrCreate
     * @param {} data - Model instance data
     */
    postPortalTemplateFoldersReplaceOrCreate(parameters: {
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalTemplateFoldersUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postPortalTemplateFoldersUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postPortalTemplateFoldersUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplateFoldersByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getPortalTemplateFoldersByIdExists
     * @param {string} id - Model id
     */
    getPortalTemplateFoldersByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headPortalTemplateFoldersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headPortalTemplateFoldersById
     * @param {string} id - Model id
     */
    headPortalTemplateFoldersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplateFoldersByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getPortalTemplateFoldersById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalTemplateFoldersById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalTemplateFoldersByIdURL(parameters: {
        'id': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putPortalTemplateFoldersById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putPortalTemplateFoldersById(parameters: {
        'id': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalTemplateFoldersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deletePortalTemplateFoldersById
     * @param {string} id - Model id
     */
    deletePortalTemplateFoldersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchPortalTemplateFoldersByIdURL(parameters: {
        'id': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchPortalTemplateFoldersById
     * @param {string} id - PortalTemplateFolder id
     * @param {} data - An object of model property name/value pairs
     */
    patchPortalTemplateFoldersById(parameters: {
        'id': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalTemplateFoldersByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postPortalTemplateFoldersByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postPortalTemplateFoldersByIdReplace(parameters: {
        'id': string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplateFoldersFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getPortalTemplateFoldersFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalTemplateFoldersFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalTemplateFoldersUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postPortalTemplateFoldersUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postPortalTemplateFoldersUpdate(parameters: {
        'where' ? : string,
        'data' ? : PortalTemplateFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplateFoldersCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getPortalTemplateFoldersCount
     * @param {string} where - Criteria to match model instances
     */
    getPortalTemplateFoldersCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalTemplateFoldersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postPortalTemplateFoldersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalTemplateFoldersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalTemplateFoldersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getPortalTemplateFoldersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalTemplateFoldersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalTemplateFolders/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignFoldersByIdMemberURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/member';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation member.
    * @method
    * @name TweakApi#getDesignFoldersByIdMember
         * @param {string} id - DesignFolder id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignFoldersByIdMember(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/member';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignFoldersByIdChildrenByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/children/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for children.
     * @method
     * @name TweakApi#getDesignFoldersByIdChildrenByFk
     * @param {string} id - DesignFolder id
     * @param {string} fk - Foreign key for children
     */
    getDesignFoldersByIdChildrenByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/children/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignFoldersByIdChildrenByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/children/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for children.
     * @method
     * @name TweakApi#deleteDesignFoldersByIdChildrenByFk
     * @param {string} id - DesignFolder id
     * @param {string} fk - Foreign key for children
     */
    deleteDesignFoldersByIdChildrenByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/children/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignFoldersByIdChildrenByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/children/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for children.
    * @method
    * @name TweakApi#putDesignFoldersByIdChildrenByFk
         * @param {string} id - DesignFolder id
         * @param {string} fk - Foreign key for children
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putDesignFoldersByIdChildrenByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/children/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignFoldersByIdParentURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/parent';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation parent.
    * @method
    * @name TweakApi#getDesignFoldersByIdParent
         * @param {string} id - DesignFolder id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignFoldersByIdParent(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/parent';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignFoldersByIdDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for designs.
     * @method
     * @name TweakApi#getDesignFoldersByIdDesignsByFk
     * @param {string} id - DesignFolder id
     * @param {string} fk - Foreign key for designs
     */
    getDesignFoldersByIdDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignFoldersByIdDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for designs.
     * @method
     * @name TweakApi#deleteDesignFoldersByIdDesignsByFk
     * @param {string} id - DesignFolder id
     * @param {string} fk - Foreign key for designs
     */
    deleteDesignFoldersByIdDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignFoldersByIdDesignsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/designs/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for designs.
    * @method
    * @name TweakApi#putDesignFoldersByIdDesignsByFk
         * @param {string} id - DesignFolder id
         * @param {string} fk - Foreign key for designs
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putDesignFoldersByIdDesignsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/designs/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignFoldersByIdPortalURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/portal';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation portal.
    * @method
    * @name TweakApi#getDesignFoldersByIdPortal
         * @param {string} id - DesignFolder id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignFoldersByIdPortal(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/portal';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignFoldersByIdChildrenURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/children';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries children of DesignFolder.
    * @method
    * @name TweakApi#getDesignFoldersByIdChildren
         * @param {string} id - DesignFolder id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignFoldersByIdChildren(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/children';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignFoldersByIdChildrenURL(parameters: {
        'id': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/children';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in children of this model.
    * @method
    * @name TweakApi#postDesignFoldersByIdChildren
         * @param {string} id - DesignFolder id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postDesignFoldersByIdChildren(parameters: {
        'id': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/children';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignFoldersByIdChildrenURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/children';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all children of this model.
     * @method
     * @name TweakApi#deleteDesignFoldersByIdChildren
     * @param {string} id - DesignFolder id
     */
    deleteDesignFoldersByIdChildren(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/children';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignFoldersByIdChildrenCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/children/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts children of DesignFolder.
     * @method
     * @name TweakApi#getDesignFoldersByIdChildrenCount
     * @param {string} id - DesignFolder id
     * @param {string} where - Criteria to match model instances
     */
    getDesignFoldersByIdChildrenCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/children/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignFoldersByIdDesignsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/designs';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries designs of DesignFolder.
    * @method
    * @name TweakApi#getDesignFoldersByIdDesigns
         * @param {string} id - DesignFolder id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignFoldersByIdDesigns(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignFoldersByIdDesignsURL(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/designs';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in designs of this model.
    * @method
    * @name TweakApi#postDesignFoldersByIdDesigns
         * @param {string} id - DesignFolder id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postDesignFoldersByIdDesigns(parameters: {
        'id': string,
        'data' ? : Design,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignFoldersByIdDesignsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/designs';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all designs of this model.
     * @method
     * @name TweakApi#deleteDesignFoldersByIdDesigns
     * @param {string} id - DesignFolder id
     */
    deleteDesignFoldersByIdDesigns(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/designs';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignFoldersByIdDesignsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/designs/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts designs of DesignFolder.
     * @method
     * @name TweakApi#getDesignFoldersByIdDesignsCount
     * @param {string} id - DesignFolder id
     * @param {string} where - Criteria to match model instances
     */
    getDesignFoldersByIdDesignsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/designs/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignFoldersURL(parameters: {
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postDesignFolders
     * @param {} data - Model instance data
     */
    postDesignFolders(parameters: {
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchDesignFoldersURL(parameters: {
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchDesignFolders
     * @param {} data - Model instance data
     */
    patchDesignFolders(parameters: {
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignFoldersURL(parameters: {
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putDesignFolders
     * @param {} data - Model instance data
     */
    putDesignFolders(parameters: {
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignFoldersURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getDesignFolders
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getDesignFolders(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignFoldersReplaceOrCreateURL(parameters: {
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postDesignFoldersReplaceOrCreate
     * @param {} data - Model instance data
     */
    postDesignFoldersReplaceOrCreate(parameters: {
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignFoldersUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postDesignFoldersUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postDesignFoldersUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignFoldersByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getDesignFoldersByIdExists
     * @param {string} id - Model id
     */
    getDesignFoldersByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headDesignFoldersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headDesignFoldersById
     * @param {string} id - Model id
     */
    headDesignFoldersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignFoldersByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getDesignFoldersById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getDesignFoldersById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putDesignFoldersByIdURL(parameters: {
        'id': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putDesignFoldersById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putDesignFoldersById(parameters: {
        'id': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteDesignFoldersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteDesignFoldersById
     * @param {string} id - Model id
     */
    deleteDesignFoldersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchDesignFoldersByIdURL(parameters: {
        'id': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchDesignFoldersById
     * @param {string} id - DesignFolder id
     * @param {} data - An object of model property name/value pairs
     */
    patchDesignFoldersById(parameters: {
        'id': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignFoldersByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postDesignFoldersByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postDesignFoldersByIdReplace(parameters: {
        'id': string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignFoldersFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getDesignFoldersFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getDesignFoldersFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignFoldersUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postDesignFoldersUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postDesignFoldersUpdate(parameters: {
        'where' ? : string,
        'data' ? : DesignFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignFoldersCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getDesignFoldersCount
     * @param {string} where - Criteria to match model instances
     */
    getDesignFoldersCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postDesignFoldersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postDesignFoldersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postDesignFoldersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getDesignFoldersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getDesignFoldersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getDesignFoldersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/DesignFolders/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getWorkflowsByIdTeamURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/team';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation team.
    * @method
    * @name TweakApi#getWorkflowsByIdTeam
         * @param {string} id - Workflow id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getWorkflowsByIdTeam(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/team';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getWorkflowsByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for templates.
     * @method
     * @name TweakApi#getWorkflowsByIdTemplatesByFk
     * @param {string} id - Workflow id
     * @param {string} fk - Foreign key for templates
     */
    getWorkflowsByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteWorkflowsByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for templates.
     * @method
     * @name TweakApi#deleteWorkflowsByIdTemplatesByFk
     * @param {string} id - Workflow id
     * @param {string} fk - Foreign key for templates
     */
    deleteWorkflowsByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putWorkflowsByIdTemplatesByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/templates/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for templates.
    * @method
    * @name TweakApi#putWorkflowsByIdTemplatesByFk
         * @param {string} id - Workflow id
         * @param {string} fk - Foreign key for templates
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putWorkflowsByIdTemplatesByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/templates/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getWorkflowsByIdCreatorURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/creator';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation creator.
    * @method
    * @name TweakApi#getWorkflowsByIdCreator
         * @param {string} id - Workflow id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getWorkflowsByIdCreator(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/creator';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getWorkflowsByIdTemplatesURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries templates of Workflow.
    * @method
    * @name TweakApi#getWorkflowsByIdTemplates
         * @param {string} id - Workflow id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getWorkflowsByIdTemplates(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postWorkflowsByIdTemplatesURL(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in templates of this model.
    * @method
    * @name TweakApi#postWorkflowsByIdTemplates
         * @param {string} id - Workflow id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postWorkflowsByIdTemplates(parameters: {
        'id': string,
        'data' ? : Template,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteWorkflowsByIdTemplatesURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/templates';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all templates of this model.
     * @method
     * @name TweakApi#deleteWorkflowsByIdTemplates
     * @param {string} id - Workflow id
     */
    deleteWorkflowsByIdTemplates(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/templates';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getWorkflowsByIdTemplatesCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/templates/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts templates of Workflow.
     * @method
     * @name TweakApi#getWorkflowsByIdTemplatesCount
     * @param {string} id - Workflow id
     * @param {string} where - Criteria to match model instances
     */
    getWorkflowsByIdTemplatesCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/templates/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postWorkflowsURL(parameters: {
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postWorkflows
     * @param {} data - Model instance data
     */
    postWorkflows(parameters: {
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchWorkflowsURL(parameters: {
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchWorkflows
     * @param {} data - Model instance data
     */
    patchWorkflows(parameters: {
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putWorkflowsURL(parameters: {
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putWorkflows
     * @param {} data - Model instance data
     */
    putWorkflows(parameters: {
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getWorkflowsURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getWorkflows
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getWorkflows(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postWorkflowsReplaceOrCreateURL(parameters: {
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postWorkflowsReplaceOrCreate
     * @param {} data - Model instance data
     */
    postWorkflowsReplaceOrCreate(parameters: {
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postWorkflowsUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postWorkflowsUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postWorkflowsUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getWorkflowsByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getWorkflowsByIdExists
     * @param {string} id - Model id
     */
    getWorkflowsByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headWorkflowsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headWorkflowsById
     * @param {string} id - Model id
     */
    headWorkflowsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getWorkflowsByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getWorkflowsById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getWorkflowsById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putWorkflowsByIdURL(parameters: {
        'id': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putWorkflowsById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putWorkflowsById(parameters: {
        'id': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteWorkflowsByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteWorkflowsById
     * @param {string} id - Model id
     */
    deleteWorkflowsById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchWorkflowsByIdURL(parameters: {
        'id': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchWorkflowsById
     * @param {string} id - Workflow id
     * @param {} data - An object of model property name/value pairs
     */
    patchWorkflowsById(parameters: {
        'id': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postWorkflowsByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postWorkflowsByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postWorkflowsByIdReplace(parameters: {
        'id': string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getWorkflowsFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getWorkflowsFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getWorkflowsFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postWorkflowsUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postWorkflowsUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postWorkflowsUpdate(parameters: {
        'where' ? : string,
        'data' ? : Workflow,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getWorkflowsCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getWorkflowsCount
     * @param {string} where - Criteria to match model instances
     */
    getWorkflowsCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postWorkflowsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postWorkflowsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postWorkflowsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getWorkflowsChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getWorkflowsChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getWorkflowsChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/Workflows/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdImagesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/images/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for images.
     * @method
     * @name TweakApi#getImageFoldersByIdImagesByFk
     * @param {string} id - ImageFolder id
     * @param {string} fk - Foreign key for images
     */
    getImageFoldersByIdImagesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/images/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteImageFoldersByIdImagesByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/images/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for images.
     * @method
     * @name TweakApi#deleteImageFoldersByIdImagesByFk
     * @param {string} id - ImageFolder id
     * @param {string} fk - Foreign key for images
     */
    deleteImageFoldersByIdImagesByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/images/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putImageFoldersByIdImagesByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/images/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for images.
    * @method
    * @name TweakApi#putImageFoldersByIdImagesByFk
         * @param {string} id - ImageFolder id
         * @param {string} fk - Foreign key for images
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putImageFoldersByIdImagesByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/images/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdTeamURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/team';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation team.
    * @method
    * @name TweakApi#getImageFoldersByIdTeam
         * @param {string} id - ImageFolder id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getImageFoldersByIdTeam(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/team';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdParentURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/parent';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation parent.
    * @method
    * @name TweakApi#getImageFoldersByIdParent
         * @param {string} id - ImageFolder id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getImageFoldersByIdParent(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/parent';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdChildrenByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/children/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for children.
     * @method
     * @name TweakApi#getImageFoldersByIdChildrenByFk
     * @param {string} id - ImageFolder id
     * @param {string} fk - Foreign key for children
     */
    getImageFoldersByIdChildrenByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/children/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteImageFoldersByIdChildrenByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/children/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for children.
     * @method
     * @name TweakApi#deleteImageFoldersByIdChildrenByFk
     * @param {string} id - ImageFolder id
     * @param {string} fk - Foreign key for children
     */
    deleteImageFoldersByIdChildrenByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/children/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putImageFoldersByIdChildrenByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/children/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for children.
    * @method
    * @name TweakApi#putImageFoldersByIdChildrenByFk
         * @param {string} id - ImageFolder id
         * @param {string} fk - Foreign key for children
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putImageFoldersByIdChildrenByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/children/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdPortalsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for portals.
     * @method
     * @name TweakApi#getImageFoldersByIdPortalsByFk
     * @param {string} id - ImageFolder id
     * @param {string} fk - Foreign key for portals
     */
    getImageFoldersByIdPortalsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteImageFoldersByIdPortalsByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for portals.
     * @method
     * @name TweakApi#deleteImageFoldersByIdPortalsByFk
     * @param {string} id - ImageFolder id
     * @param {string} fk - Foreign key for portals
     */
    deleteImageFoldersByIdPortalsByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putImageFoldersByIdPortalsByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for portals.
    * @method
    * @name TweakApi#putImageFoldersByIdPortalsByFk
         * @param {string} id - ImageFolder id
         * @param {string} fk - Foreign key for portals
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putImageFoldersByIdPortalsByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putImageFoldersByIdPortalsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for portals.
    * @method
    * @name TweakApi#putImageFoldersByIdPortalsRelByFk
         * @param {string} id - ImageFolder id
         * @param {string} fk - Foreign key for portals
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putImageFoldersByIdPortalsRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteImageFoldersByIdPortalsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the portals relation to an item by id.
     * @method
     * @name TweakApi#deleteImageFoldersByIdPortalsRelByFk
     * @param {string} id - ImageFolder id
     * @param {string} fk - Foreign key for portals
     */
    deleteImageFoldersByIdPortalsRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headImageFoldersByIdPortalsRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of portals relation to an item by id.
     * @method
     * @name TweakApi#headImageFoldersByIdPortalsRelByFk
     * @param {string} id - ImageFolder id
     * @param {string} fk - Foreign key for portals
     */
    headImageFoldersByIdPortalsRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for members.
     * @method
     * @name TweakApi#getImageFoldersByIdMembersByFk
     * @param {string} id - ImageFolder id
     * @param {string} fk - Foreign key for members
     */
    getImageFoldersByIdMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteImageFoldersByIdMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for members.
     * @method
     * @name TweakApi#deleteImageFoldersByIdMembersByFk
     * @param {string} id - ImageFolder id
     * @param {string} fk - Foreign key for members
     */
    deleteImageFoldersByIdMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putImageFoldersByIdMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for members.
    * @method
    * @name TweakApi#putImageFoldersByIdMembersByFk
         * @param {string} id - ImageFolder id
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putImageFoldersByIdMembersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putImageFoldersByIdMembersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Add a related item by id for members.
    * @method
    * @name TweakApi#putImageFoldersByIdMembersRelByFk
         * @param {string} id - ImageFolder id
         * @param {string} fk - Foreign key for members
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putImageFoldersByIdMembersRelByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteImageFoldersByIdMembersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Remove the members relation to an item by id.
     * @method
     * @name TweakApi#deleteImageFoldersByIdMembersRelByFk
     * @param {string} id - ImageFolder id
     * @param {string} fk - Foreign key for members
     */
    deleteImageFoldersByIdMembersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headImageFoldersByIdMembersRelByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members/rel/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check the existence of members relation to an item by id.
     * @method
     * @name TweakApi#headImageFoldersByIdMembersRelByFk
     * @param {string} id - ImageFolder id
     * @param {string} fk - Foreign key for members
     */
    headImageFoldersByIdMembersRelByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members/rel/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdFolderMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/folderMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a related item by id for folderMembers.
     * @method
     * @name TweakApi#getImageFoldersByIdFolderMembersByFk
     * @param {string} id - ImageFolder id
     * @param {string} fk - Foreign key for folderMembers
     */
    getImageFoldersByIdFolderMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/folderMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteImageFoldersByIdFolderMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/folderMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a related item by id for folderMembers.
     * @method
     * @name TweakApi#deleteImageFoldersByIdFolderMembersByFk
     * @param {string} id - ImageFolder id
     * @param {string} fk - Foreign key for folderMembers
     */
    deleteImageFoldersByIdFolderMembersByFk(parameters: {
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/folderMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putImageFoldersByIdFolderMembersByFkURL(parameters: {
        'id': string,
        'fk': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/folderMembers/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Update a related item by id for folderMembers.
    * @method
    * @name TweakApi#putImageFoldersByIdFolderMembersByFk
         * @param {string} id - ImageFolder id
         * @param {string} fk - Foreign key for folderMembers
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    putImageFoldersByIdFolderMembersByFk(parameters: {
        'id': string,
        'fk': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/folderMembers/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdImagesURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/images';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries images of ImageFolder.
    * @method
    * @name TweakApi#getImageFoldersByIdImages
         * @param {string} id - ImageFolder id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getImageFoldersByIdImages(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImageFoldersByIdImagesURL(parameters: {
        'id': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/images';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in images of this model.
    * @method
    * @name TweakApi#postImageFoldersByIdImages
         * @param {string} id - ImageFolder id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postImageFoldersByIdImages(parameters: {
        'id': string,
        'data' ? : Image,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteImageFoldersByIdImagesURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/images';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all images of this model.
     * @method
     * @name TweakApi#deleteImageFoldersByIdImages
     * @param {string} id - ImageFolder id
     */
    deleteImageFoldersByIdImages(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/images';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdImagesCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/images/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts images of ImageFolder.
     * @method
     * @name TweakApi#getImageFoldersByIdImagesCount
     * @param {string} id - ImageFolder id
     * @param {string} where - Criteria to match model instances
     */
    getImageFoldersByIdImagesCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/images/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdChildrenURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/children';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries children of ImageFolder.
    * @method
    * @name TweakApi#getImageFoldersByIdChildren
         * @param {string} id - ImageFolder id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getImageFoldersByIdChildren(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/children';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImageFoldersByIdChildrenURL(parameters: {
        'id': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/children';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in children of this model.
    * @method
    * @name TweakApi#postImageFoldersByIdChildren
         * @param {string} id - ImageFolder id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postImageFoldersByIdChildren(parameters: {
        'id': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/children';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteImageFoldersByIdChildrenURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/children';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all children of this model.
     * @method
     * @name TweakApi#deleteImageFoldersByIdChildren
     * @param {string} id - ImageFolder id
     */
    deleteImageFoldersByIdChildren(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/children';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdChildrenCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/children/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts children of ImageFolder.
     * @method
     * @name TweakApi#getImageFoldersByIdChildrenCount
     * @param {string} id - ImageFolder id
     * @param {string} where - Criteria to match model instances
     */
    getImageFoldersByIdChildrenCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/children/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdPortalsURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries portals of ImageFolder.
    * @method
    * @name TweakApi#getImageFoldersByIdPortals
         * @param {string} id - ImageFolder id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getImageFoldersByIdPortals(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImageFoldersByIdPortalsURL(parameters: {
        'id': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in portals of this model.
    * @method
    * @name TweakApi#postImageFoldersByIdPortals
         * @param {string} id - ImageFolder id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postImageFoldersByIdPortals(parameters: {
        'id': string,
        'data' ? : Portal,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteImageFoldersByIdPortalsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all portals of this model.
     * @method
     * @name TweakApi#deleteImageFoldersByIdPortals
     * @param {string} id - ImageFolder id
     */
    deleteImageFoldersByIdPortals(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdPortalsCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts portals of ImageFolder.
     * @method
     * @name TweakApi#getImageFoldersByIdPortalsCount
     * @param {string} id - ImageFolder id
     * @param {string} where - Criteria to match model instances
     */
    getImageFoldersByIdPortalsCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/portals/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdMembersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries members of ImageFolder.
    * @method
    * @name TweakApi#getImageFoldersByIdMembers
         * @param {string} id - ImageFolder id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getImageFoldersByIdMembers(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImageFoldersByIdMembersURL(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in members of this model.
    * @method
    * @name TweakApi#postImageFoldersByIdMembers
         * @param {string} id - ImageFolder id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postImageFoldersByIdMembers(parameters: {
        'id': string,
        'data' ? : TeamMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteImageFoldersByIdMembersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all members of this model.
     * @method
     * @name TweakApi#deleteImageFoldersByIdMembers
     * @param {string} id - ImageFolder id
     */
    deleteImageFoldersByIdMembers(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdMembersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts members of ImageFolder.
     * @method
     * @name TweakApi#getImageFoldersByIdMembersCount
     * @param {string} id - ImageFolder id
     * @param {string} where - Criteria to match model instances
     */
    getImageFoldersByIdMembersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/members/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdFolderMembersURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/folderMembers';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Queries folderMembers of ImageFolder.
    * @method
    * @name TweakApi#getImageFoldersByIdFolderMembers
         * @param {string} id - ImageFolder id
         * @param {string} filter - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getImageFoldersByIdFolderMembers(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/folderMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImageFoldersByIdFolderMembersURL(parameters: {
        'id': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/folderMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Creates a new instance in folderMembers of this model.
    * @method
    * @name TweakApi#postImageFoldersByIdFolderMembers
         * @param {string} id - ImageFolder id
         * @param {} data - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postImageFoldersByIdFolderMembers(parameters: {
        'id': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/folderMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteImageFoldersByIdFolderMembersURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/folderMembers';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Deletes all folderMembers of this model.
     * @method
     * @name TweakApi#deleteImageFoldersByIdFolderMembers
     * @param {string} id - ImageFolder id
     */
    deleteImageFoldersByIdFolderMembers(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/folderMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdFolderMembersCountURL(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/folderMembers/count';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Counts folderMembers of ImageFolder.
     * @method
     * @name TweakApi#getImageFoldersByIdFolderMembersCount
     * @param {string} id - ImageFolder id
     * @param {string} where - Criteria to match model instances
     */
    getImageFoldersByIdFolderMembersCount(parameters: {
        'id': string,
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/folderMembers/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImageFoldersURL(parameters: {
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postImageFolders
     * @param {} data - Model instance data
     */
    postImageFolders(parameters: {
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchImageFoldersURL(parameters: {
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchImageFolders
     * @param {} data - Model instance data
     */
    patchImageFolders(parameters: {
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putImageFoldersURL(parameters: {
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putImageFolders
     * @param {} data - Model instance data
     */
    putImageFolders(parameters: {
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getImageFolders
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getImageFolders(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImageFoldersReplaceOrCreateURL(parameters: {
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postImageFoldersReplaceOrCreate
     * @param {} data - Model instance data
     */
    postImageFoldersReplaceOrCreate(parameters: {
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImageFoldersUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postImageFoldersUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postImageFoldersUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getImageFoldersByIdExists
     * @param {string} id - Model id
     */
    getImageFoldersByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headImageFoldersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headImageFoldersById
     * @param {string} id - Model id
     */
    headImageFoldersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getImageFoldersById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getImageFoldersById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putImageFoldersByIdURL(parameters: {
        'id': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putImageFoldersById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putImageFoldersById(parameters: {
        'id': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteImageFoldersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteImageFoldersById
     * @param {string} id - Model id
     */
    deleteImageFoldersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchImageFoldersByIdURL(parameters: {
        'id': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchImageFoldersById
     * @param {string} id - ImageFolder id
     * @param {} data - An object of model property name/value pairs
     */
    patchImageFoldersById(parameters: {
        'id': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImageFoldersByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postImageFoldersByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postImageFoldersByIdReplace(parameters: {
        'id': string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getImageFoldersFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getImageFoldersFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImageFoldersUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postImageFoldersUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postImageFoldersUpdate(parameters: {
        'where' ? : string,
        'data' ? : ImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getImageFoldersCount
     * @param {string} where - Criteria to match model instances
     */
    getImageFoldersCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImageFoldersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postImageFoldersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postImageFoldersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getImageFoldersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getImageFoldersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdInvitationTicketsURL(parameters: {
        'id': string,
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/invitationTickets';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * List InvitationTickets for this ImageFolder
     * @method
     * @name TweakApi#getImageFoldersByIdInvitationTickets
     * @param {string} id - ImageFolder id
     * @param {string} id - ImageFolder id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getImageFoldersByIdInvitationTickets(parameters: {
        'id': string,
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/invitationTickets';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFoldersByIdInvitationTicketsByFkURL(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/invitationTickets/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Get InvitationTicket by Id for this ImageFolder
     * @method
     * @name TweakApi#getImageFoldersByIdInvitationTicketsByFk
     * @param {string} id - ImageFolder id
     * @param {string} id - ImageFolder id
     * @param {string} fk - InvitationTicket id
     * @param {string} filter - Only include changes that match this filter
     */
    getImageFoldersByIdInvitationTicketsByFk(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/invitationTickets/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteImageFoldersByIdInvitationTicketsByFkURL(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/invitationTickets/{fk}';

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{id}', `${parameters['id']}`);

        path = path.replace('{fk}', `${parameters['fk']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete InvitationTickets for this ImageFolder
     * @method
     * @name TweakApi#deleteImageFoldersByIdInvitationTicketsByFk
     * @param {string} id - ImageFolder id
     * @param {string} id - ImageFolder id
     * @param {string} fk - InvitationTicket id
     */
    deleteImageFoldersByIdInvitationTicketsByFk(parameters: {
        'id': string,
        'id': string,
        'fk': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolders/{id}/invitationTickets/{fk}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            path = path.replace('{fk}', `${parameters['fk']}`);

            if (parameters['fk'] === undefined) {
                reject(new Error('Missing required  parameter: fk'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalImageFoldersByIdPortalURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}/portal';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation portal.
    * @method
    * @name TweakApi#getPortalImageFoldersByIdPortal
         * @param {string} id - PortalImageFolder id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalImageFoldersByIdPortal(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}/portal';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalImageFoldersByIdFolderURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}/folder';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation folder.
    * @method
    * @name TweakApi#getPortalImageFoldersByIdFolder
         * @param {string} id - PortalImageFolder id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalImageFoldersByIdFolder(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}/folder';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalImageFoldersURL(parameters: {
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postPortalImageFolders
     * @param {} data - Model instance data
     */
    postPortalImageFolders(parameters: {
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchPortalImageFoldersURL(parameters: {
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchPortalImageFolders
     * @param {} data - Model instance data
     */
    patchPortalImageFolders(parameters: {
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalImageFoldersURL(parameters: {
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putPortalImageFolders
     * @param {} data - Model instance data
     */
    putPortalImageFolders(parameters: {
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalImageFoldersURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getPortalImageFolders
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalImageFolders(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalImageFoldersReplaceOrCreateURL(parameters: {
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postPortalImageFoldersReplaceOrCreate
     * @param {} data - Model instance data
     */
    postPortalImageFoldersReplaceOrCreate(parameters: {
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalImageFoldersUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postPortalImageFoldersUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postPortalImageFoldersUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalImageFoldersByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getPortalImageFoldersByIdExists
     * @param {string} id - Model id
     */
    getPortalImageFoldersByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headPortalImageFoldersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headPortalImageFoldersById
     * @param {string} id - Model id
     */
    headPortalImageFoldersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalImageFoldersByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getPortalImageFoldersById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalImageFoldersById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putPortalImageFoldersByIdURL(parameters: {
        'id': string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putPortalImageFoldersById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putPortalImageFoldersById(parameters: {
        'id': string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deletePortalImageFoldersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deletePortalImageFoldersById
     * @param {string} id - Model id
     */
    deletePortalImageFoldersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchPortalImageFoldersByIdURL(parameters: {
        'id': string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchPortalImageFoldersById
     * @param {string} id - PortalImageFolder id
     * @param {} data - An object of model property name/value pairs
     */
    patchPortalImageFoldersById(parameters: {
        'id': string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalImageFoldersByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postPortalImageFoldersByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postPortalImageFoldersByIdReplace(parameters: {
        'id': string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalImageFoldersFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getPortalImageFoldersFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getPortalImageFoldersFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalImageFoldersUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postPortalImageFoldersUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postPortalImageFoldersUpdate(parameters: {
        'where' ? : string,
        'data' ? : PortalImageFolder,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalImageFoldersCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getPortalImageFoldersCount
     * @param {string} where - Criteria to match model instances
     */
    getPortalImageFoldersCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postPortalImageFoldersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postPortalImageFoldersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postPortalImageFoldersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getPortalImageFoldersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getPortalImageFoldersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getPortalImageFoldersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/PortalImageFolders/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFolderMembersByIdMemberURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}/member';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation member.
    * @method
    * @name TweakApi#getImageFolderMembersByIdMember
         * @param {string} id - ImageFolderMember id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getImageFolderMembersByIdMember(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}/member';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFolderMembersByIdFolderURL(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}/folder';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['refresh'] !== undefined) {
            queryParameters['refresh'] = parameters['refresh'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Fetches belongsTo relation folder.
    * @method
    * @name TweakApi#getImageFolderMembersByIdFolder
         * @param {string} id - ImageFolderMember id
         * @param {boolean} refresh - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getImageFolderMembersByIdFolder(parameters: {
        'id': string,
        'refresh' ? : boolean,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}/folder';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['refresh'] !== undefined) {
                queryParameters['refresh'] = parameters['refresh'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImageFolderMembersURL(parameters: {
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Create a new instance of the model and persist it into the data source.
     * @method
     * @name TweakApi#postImageFolderMembers
     * @param {} data - Model instance data
     */
    postImageFolderMembers(parameters: {
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchImageFolderMembersURL(parameters: {
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#patchImageFolderMembers
     * @param {} data - Model instance data
     */
    patchImageFolderMembers(parameters: {
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putImageFolderMembersURL(parameters: {
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#putImageFolderMembers
     * @param {} data - Model instance data
     */
    putImageFolderMembers(parameters: {
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFolderMembersURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find all instances of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getImageFolderMembers
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getImageFolderMembers(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImageFolderMembersReplaceOrCreateURL(parameters: {
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/replaceOrCreate';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @method
     * @name TweakApi#postImageFolderMembersReplaceOrCreate
     * @param {} data - Model instance data
     */
    postImageFolderMembersReplaceOrCreate(parameters: {
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/replaceOrCreate';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImageFolderMembersUpsertWithWhereURL(parameters: {
        'where' ? : string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/upsertWithWhere';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @method
     * @name TweakApi#postImageFolderMembersUpsertWithWhere
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postImageFolderMembersUpsertWithWhere(parameters: {
        'where' ? : string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/upsertWithWhere';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFolderMembersByIdExistsURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}/exists';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#getImageFolderMembersByIdExists
     * @param {string} id - Model id
     */
    getImageFolderMembersByIdExists(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}/exists';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    headImageFolderMembersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Check whether a model instance exists in the data source.
     * @method
     * @name TweakApi#headImageFolderMembersById
     * @param {string} id - Model id
     */
    headImageFolderMembersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('HEAD', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFolderMembersByIdURL(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#getImageFolderMembersById
     * @param {string} id - Model id
     * @param {string} filter - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
     */
    getImageFolderMembersById(parameters: {
        'id': string,
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    putImageFolderMembersByIdURL(parameters: {
        'id': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#putImageFolderMembersById
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    putImageFolderMembersById(parameters: {
        'id': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PUT', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    deleteImageFolderMembersByIdURL(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Delete a model instance by {{id}} from the data source.
     * @method
     * @name TweakApi#deleteImageFolderMembersById
     * @param {string} id - Model id
     */
    deleteImageFolderMembersById(parameters: {
        'id': string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('DELETE', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    patchImageFolderMembersByIdURL(parameters: {
        'id': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#patchImageFolderMembersById
     * @param {string} id - ImageFolderMember id
     * @param {} data - An object of model property name/value pairs
     */
    patchImageFolderMembersById(parameters: {
        'id': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('PATCH', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImageFolderMembersByIdReplaceURL(parameters: {
        'id': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}/replace';

        path = path.replace('{id}', `${parameters['id']}`);

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @method
     * @name TweakApi#postImageFolderMembersByIdReplace
     * @param {string} id - Model id
     * @param {} data - Model instance data
     */
    postImageFolderMembersByIdReplace(parameters: {
        'id': string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/{id}/replace';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            path = path.replace('{id}', `${parameters['id']}`);

            if (parameters['id'] === undefined) {
                reject(new Error('Missing required  parameter: id'));
                return;
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFolderMembersFindOneURL(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/findOne';
        if (parameters['filter'] !== undefined) {
            queryParameters['filter'] = parameters['filter'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Find first instance of the model matched by filter from the data source.
     * @method
     * @name TweakApi#getImageFolderMembersFindOne
     * @param {string} filter - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})
     */
    getImageFolderMembersFindOne(parameters: {
        'filter' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/findOne';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['filter'] !== undefined) {
                queryParameters['filter'] = parameters['filter'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImageFolderMembersUpdateURL(parameters: {
        'where' ? : string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/update';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @method
     * @name TweakApi#postImageFolderMembersUpdate
     * @param {string} where - Criteria to match model instances
     * @param {} data - An object of model property name/value pairs
     */
    postImageFolderMembersUpdate(parameters: {
        'where' ? : string,
        'data' ? : ImageFolderMember,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/update';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters['data'] !== undefined) {
                body = parameters['data'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFolderMembersCountURL(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/count';
        if (parameters['where'] !== undefined) {
            queryParameters['where'] = parameters['where'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
     * Count instances of the model matched by where from the data source.
     * @method
     * @name TweakApi#getImageFolderMembersCount
     * @param {string} where - Criteria to match model instances
     */
    getImageFolderMembersCount(parameters: {
        'where' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/count';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['where'] !== undefined) {
                queryParameters['where'] = parameters['where'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    postImageFolderMembersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/change-stream';

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        queryParameters = {};

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#postImageFolderMembersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    postImageFolderMembersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                form['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            form = queryParameters;
            queryParameters = {};

            this.request('POST', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

    getImageFolderMembersChangeStreamURL(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): string {
        let queryParameters: any = {};
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/change-stream';
        if (parameters['options'] !== undefined) {
            queryParameters['options'] = parameters['options'];
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                queryParameters[parameterName] = parameters.$queryParameters[parameterName];
            });
        }

        let keys = Object.keys(queryParameters);
        return domain + path + (keys.length > 0 ? '?' + (keys.map(key => key + '=' + encodeURIComponent(queryParameters[key])).join('&')) : '');
    }

    /**
    * Create a change stream.
    * @method
    * @name TweakApi#getImageFolderMembersChangeStream
         * @param {string} options - Tweak API to integrate with all the Tweak services.  You can find out more about Tweak 
        at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
    */
    getImageFolderMembersChangeStream(parameters: {
        'options' ? : string,
        $queryParameters ? : any,
        $domain ? : string
    }): Promise < request.Response > {
        const domain = parameters.$domain ? parameters.$domain : this.domain;
        let path = '/ImageFolderMembers/change-stream';
        let body: any;
        let queryParameters: any = {};
        let headers: any = {};
        let form: any = {};
        return new Promise((resolve, reject) => {
            headers['Content-Type'] = 'application/json';

            if (parameters['options'] !== undefined) {
                queryParameters['options'] = parameters['options'];
            }

            if (parameters.$queryParameters) {
                Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                    queryParameters[parameterName] = parameters.$queryParameters[parameterName];
                });
            }

            this.request('GET', domain + path, body, headers, queryParameters, form, reject, resolve);
        });
    }

}